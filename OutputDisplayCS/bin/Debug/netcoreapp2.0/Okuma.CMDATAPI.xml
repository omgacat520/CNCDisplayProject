<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Okuma.CMDATAPI</name>
  </assembly>
  <members>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm">
      <summary> Class represents particular alarm history information from NC. It is read-only information. NC Alarm information cannot be changed by this class.  </summary>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Date">
      <summary> Gets the alarm date for this CAlarm instance.   Sets the alarm date for this CAlarm instance only. A System.String containing the alarm date in this format "yyyy/mm/dd". </summary>
      <returns>A System.String containing the alarm date in this format "yyyy/mm/dd"</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Time">
      <summary> Gets the alarm time for this CAlarm instance. Sets the alarm time for this CAlarm instance only. A System.String containing the alarm time in this format "hh:mm:ss" </summary>
      <returns> A System.String containing the alarm time in this format "hh:mm:ss"</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Number">
      <summary> Gets the alarm number for this CAlarm instance.  Sets the alarm number for this CAlarm instance only. </summary>
      <returns> A System.String containing the alarm number</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Code">
      <summary> Gets the alarm code for this CAlarm instance. Sets the alarm code for this CAlarm instance only. </summary>
      <returns> A System.String containing the alarm code</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Message">
      <summary> Gets the alarm message for this CAlarm instance.  Sets the alarm message for this CAlarm instance only. </summary>
      <returns>A System.String containing the alarm message</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CAlarm.Object">
      <summary> Gets the alarm object for this CAlarm instance. Sets the alarm object for this CAlarm instance only </summary>
      <returns> A System.Int32 containing the alarm object</returns>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory">
      <summary> Class provides alarm history information stored by NC.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetMaxCount">
      <summary> Gets maximum number of alarm history that can stored by the system. </summary>
      <example> This example shows how to returns maximum count. <para> On Error GoTo sd </para> <para> Dim alarmIndex As Int16 </para> <para> alarmIndex = CInt(Me.mahAlarmIndex.Text)</para> <para> Dim mahObject As MacMan.CAlarm </para> <para> mahObject = objMah.GetAlarm(alarmIndex) </para> <para> Me.mahAlarmCode.Text = mahObject.Code </para> <para> Me.mahAlarmCount.Text = objMah.GetCount </para> <para> Me.mahAlarmDate.Text = mahObject.Date </para> <para> Me.mahAlarmMessage.Text = mahObject.Message </para> <para> Me.mahAlarmNumber.Text = mahObject.Number </para> <para> Me.mahAlarmTime.Text = mahObject.Time </para> <para> Me.mahMaxAlarmCount.Text = objMah.GetMaxCount </para> <para> Exit Sub </para> <para> sd: </para> <para>  doError("MacMan Alarm History", Err.Description) </para> <para>Resume Next </para> </example>
      <returns>A System.Int32 value that represents the maximum number of alarm history</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetCount">
      <summary> Gets the number of alarms that are currently available in history. </summary>
      <example> This example shows how to returns count. <para>	Private Sub UpdateMah()</para> <para>		On Error GoTo sd </para> <para>		Dim objMah As MacMan.CAlarmHistory </para> <para>		Dim alarmIndex As Int16 </para> <para>		alarmIndex = CInt(Me.mahAlarmIndex.Text) </para> <para>		Me.mahAlarmCount.Text = objMah.GetCount </para> <para>		Exit Sub </para> <para>	sd: </para> <para>		doError("MacMan Alarm History", Err.Description) </para> <para>	Resume Next </para> <para> End Sub </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarm(System.Int32)">
      <summary> Gets the Alarm history data at the specified alarm index. </summary>
      <example> Source code description. <para>On Error GoTo sd </para> <para> Dim alarmIndex As Int16 </para> <para> alarmIndex = CInt(Me.mahAlarmIndex.Text) </para> <para> Dim mahObject As CMDATAPILib.MacMan.CAlarm </para> <para> mahObject = objMah.GetAlarm(alarmIndex) </para> <para> Me.mahAlarmCode.Text = mahObject.Code </para> <para> Me.mahAlarmCount.Text = objMah.GetCount </para> <para> Me.mahAlarmDate.Text = mahObject.Date </para> <para> Me.mahAlarmMessage.Text = mahObject.Message </para> <para> Me.mahAlarmNumber.Text = mahObject.Number </para> <para> Me.mahAlarmTime.Text = mahObject.Time </para> <para> Me.mahMaxAlarmCount.Text = objMah.GetMaxCount </para> <para> Exit Sub </para> <para>	sd: </para> <para> doError("MacMan Alarm History", Err.Description) </para> <para> Resume Next </para> </example>
      <param name="intAlarmIndex">Starting index.  The 1-based index at which the information is obtained</param>
      <returns>An Okuma.CMDATAPI.DataAPI.MacMan.CAlarm object that represents the Alarm history data if there is one available.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> ALARM HISTORY - List of all alarms in history in the descending order of date <para> <img src="MacMan-AlarmHistory.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CAlarmHistory.GetAlarms(System.Int32,System.Int32)">
      <summary> Gets a list of alarm history information at the specified indexes. </summary>
      <example> <para> Dim mohObject As MacMan.CAlarm </para> <para> Dim mohObjects As ArrayList </para> <para> Try </para> <para> Me.mahResults.Text = "" </para> <para> mohObjects = objMah.GetAlarms(CInt(Me.mahFrom.Text), CInt(Me.mahTo.Text)) </para> <para> For Each mohObject In mohObjects </para> <para> Me.mahResults.Text += mohObject.Date &amp; " " &amp; mohObject.Time &amp; vbTab &amp; mohObject.Code &amp; vbTab &amp; mohObject.Message &amp; vbCrLf </para> <para> Next </para> <para> Catch ae As ApplicationException </para> <para> doError("Macman Alarm History", ae.Message)  </para> <para> Catch ex As Exception </para> <para> doError("Macman Alarm History", ex.Message) </para> <para> End Try </para> </example>
      <param name="intFromIndex">Starting index.  The 1-based index at which the information is obtained</param>
      <param name="intToIndex">Ending index.  The 1-based index at which the information is obtained</param>
      <returns>A System.Collection.ArrayList object that represents the list of CAlarm object.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> ALARM HISTORY - List of all alarms in history in the descending order of date <para> <img src="MacMan-AlarmHistory.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CATC">
      <summary> Class provides information about Auto Tool Changer.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMagazineProperty(System.Int32)">
      <summary> Gets magazine information at specified magazine number. </summary>
      <example> This sample shows how to call the GetMagazineProperty() method. <para> Dim objAtc As new CATC </para> <para> Dim magProp As MagazineProperty </para> <para> Try </para> <para> magProp = objAtc.GetMagazineProperty(CInt(Me.magazineNumber.Text)) </para> <para> Me.numberOfPots.Text = magProp.PotPerMagazine </para> <para> Me.startingPot.Text = magProp.StartingPotNumber </para> <para> Me.endingPot.Text = magProp.EndingPotNumber </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC: Magazine Property", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC: Magazine Property", ex.Message) </para> <para> End Try </para> </example>
      <param name="intMagazineNo">The 1-based magazine number.</param>
      <returns> A Okuma.CMDATAPI.Structures.MagazineProperty structure which contains number of pots, and the starting and ending pot number for this magazine number. </returns>
      <remarks> For multi-magazine system, the starting and ending number is different for each magazine number. <para> Sample 5 magazines and 400 pots ATC:</para> <list type="table"> <listheader> <term>Magazine Number</term> <description>Staring and Ending Pot number</description> </listheader> <item> <term>1</term> <description>1 to 80</description> </item> <item> <term>2</term> <description>81 to 160</description> </item> <item> <term>3</term> <description>161 to 240</description> </item> <item> <term>4</term> <description>241 to 320</description> </item> <item> <term>5</term> <description>321 to 400</description> </item> </list> </remarks>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMagazineType">
      <summary> Gets magazine type configured by the system. </summary>
      <example> This sample shows how to call the GetMagazineType() method. <para> Dim atcType As ATCTypeEnum </para> <para> Dim maxMagazines As Int32 </para> <para> Dim heavyToolMemo As Double </para> <para> Dim largeToolMemo As Double </para> <para> Dim magazineType As MagazineTypeEnum </para> <para> Dim maxPots As Int32 </para> <para> Dim retTool As String </para> <para> Dim actTool As String </para> <para> Dim nextTool As String </para> <para> Try </para> <para> atcType = objAtc.GetATCType </para> <para> magazineType = objAtc.GetMagazineType </para> <para> maxPots = objAtc.GetMaxPots </para> <para> retTool = objAtc.GetReturnTool </para> <para> actTool = objAtc.GetActualTool </para> <para> nextTool = objAtc.GetNextTool </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC", ex.Message) </para> <para> End Try </para> </example>
      <returns>A Okuma.CMDATAPI.Enumerations.MagazineTypeEnum enumeration that represents the magazine type currently configured for the system</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCType">
      <summary> Gets ATC type configured for this system </summary>
      <example> This sample shows how to call the GetATCType() method. <para> Dim objAtc As new CATC </para> <para> Dim atcType As ATCTypeEnum </para> <para> Try </para> <para> atcType = objAtc.GetATCType </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC", ex.Message) </para> <para> End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.ATCTypeEnum enumeration type that represents ATC type currently configured for this system</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetPotTool(System.Int32)">
      <summary> Gets pot tool information based on pot number. </summary>
      <example> This sample code shows how to call the GetPotTool() method. <para> Dim objAtc As new CATC </para> <para> Dim stToolProperty As ToolProperty </para> <para> Dim intPotNo as Integer </para> <para> Dim intToolNo as Integer </para> <para> Dim strToolKind As String</para> <para> stToolProperty = objAtc.GetPotTool(intPotNo) </para> <para> intToolNo = stToolProperty.intToolNo </para> <para> strToolKind = stToolProperty.strToolKind </para> </example>
      <param name="intPotNo">The 1-based pot number to retrieve the pot tool information.</param>
      <returns>An Okuma.CMDATAPI.Structures.ToolProperty value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> For OSP-P300 controls: <para> TOOL DATA - MAGAZINE INFO. <img src="MC.P300.ToolData.ATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMaxPots">
      <summary> Gets maximum number of pots configured for this system </summary>
      <example> his sample shows how to call the GetMaxPots() method. <para>	Dim objAtc As new CATC	</para> <para>	Dim maxPots As Int32	</para> <para>	Try	</para> <para>	      maxPots = objAtc.GetMaxPots	</para> <para>	Catch ae As ApplicationException	</para> <para>	      doError("CATC", ae.Message)	</para> <para>	Catch ex As Exception	</para> <para>		doError("CATC", ex.Message)	</para> <para>	End Try	</para> </example>
      <returns>A System.Int32 value that represents the number of pots currently configured for this system</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMaxMagazines">
      <summary> Gets maximum number of magazines configured for this system. </summary>
      <example> This sample shows how to call the GetMaxMagazines() method. <para> Dim objAtc As new CATC </para> <para> Dim maxMagazines As Int32 </para> <para> Try </para> <para> maxMagazines = objAtc.GetMaxMagazines </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC", ex.Message) </para> <para> End Try </para> </example>
      <returns>A System.Int32 value that represents total magazines currently configured for this system.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetMagazinePosition(System.Int32)">
      <summary> Gets currently indexed pot number at the specified magazine number. </summary>
      <example> This sample shows how to call the GetMagazinePosition() method. <para> Try </para> <para>  Me.atcMagazinePosition.Text = objAtc.GetMagazinePosition(CInt(Me.magazineNumber.Text)) </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC: Magazine Property", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC: Magazine Property", ex.Message) </para> <para> End Try </para> </example>
      <param name="intMagazineNo">The 1-based magazine number.</param>
      <returns>An System.Int32 value that represents the indexed pot number at the specified magazine number. For multi-magazine,  a different indexed pot number is returned, respectively.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function if magazine number is greater than 1: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Multi-Magazine specification</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetActualTool">
      <summary> Gets tool that is currently mounted in the spindle.  Tool information includes tool number and tool attribute if any. </summary>
      <example> This sample code shows how to call the GetActualTool() method. <para> Dim objAtc As new CATC </para> <para> Dim strValue As String </para> <para> strValue = objAtc.GetActualTool() </para> </example>
      <returns>A System.String that represents a tool number currently in the spindle.  If no tool in the spindle, 'NONE' will be returned.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> POT NO./TOOL NO. TABLE - ATC TOOL - 001LM - Current tool in the spindle is tool #1 with an attribute LM. <para> <img src="atc.jpg" /> </para> </Figure>
      <Figure> For OSP-P300 controls: <para> TOOL DATA - MAGAZINE INFO. - ACT T-NO <img src="MC.P300.ToolData.ATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetNextTool">
      <summary> Gets the tool number that is in loading/unloading position with spindle </summary>
      <example> This sample code shows how to call the GetNextTool() method. <para> Dim objAtc As new CATC </para> <para> Dim strValue As String </para> <para> strValue = objAtc.GetNextTool() </para> </example>
      <returns>A System.String value that represents a tool number.  If no tool, a string of 'NONE' will be returned.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> POT NO./TOOL NO. TABLE - NXT TOOL - Next tool to be mounted in the spindle. <para> <img src="atc.jpg" /> </para> </Figure>
      <Figure> For OSP-P300 controls: <para> TOOL DATA - MAGAZINE INFO. - NXT T-NO. <img src="MC.P300.ToolData.ATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetReturnTool">
      <summary> Gets the return tool number in ATC fixed address system. </summary>
      <example> This sample code shows how to call the GetReturnTool() method. <para> Dim objAtc As new CATC </para> <para> Dim retTool As String </para> <para> Try </para> <para> retTool = objAtc.GetReturnTool </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC", ex.Message) </para> <para> End Try </para> </example>
      <returns>A System.String value that represents the tool number to be returned.  Otherwise, a string of 'NON' is returned.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Random ATC Specification</term> <description>Invalid</description> </item> </list> </para> </remarks>
      <Figure> POT NO./TOOL NO. TABLE - RET TOOL - Tool to be return in the spindle. <para> <img src="atc.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetLargeToolMemo">
      <summary> Gets large tool memo for a given tool number. </summary>
      <example> This sample code shows how to call the GetLargeToolMemo() method. <para> Dim objAtc As new CATC </para> <para> Dim largeToolMemo As String </para> <para> Try </para> <para>	largeToolMemo = objAtc.GetLargeToolMemo() </para> <para> Catch ae As ApplicationException </para> <para>	doError("CATC: Heavy Tool Memo", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CATC: Heavy Tool Memo", ex.Message) </para> <para> End Try	</para> </example>
      <returns>A System.String value that represents the information about large tool</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - POT NO./TOOL NO. TABLE (FIXED ADDRESS) - SET - LARGE-DIA. TOOL - Large is tool memo. <para> <img src="MC.ATC.SET.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.SetLargeToolMemo(System.String)">
      <summary> Sets large tool memo. </summary>
      <example> This sample code shows how to call the SetLargeToolMemo() method. <para> Dim objAtc As new CATC </para> <para> Try </para> <para>	objAtc.SetLargeToolMemo(Me.memoToolNumber.Text) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CATC: Heavy Tool Memo", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CATC: Heavy Tool Memo", ex.Message) </para> <para> End Try </para> </example>
      <param name="strValue">The memo to be set for the the large tool attribute.  A NotSupportedException is throw if the number of characters for the memo is greater than 10.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> SET - LARGE-DIA. TOOL - Large diameter tool memo. <para> <img src="MC.ATC.SET.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetHeavyToolMemo">
      <summary> Gets the heavy tool memo for the specified tool. </summary>
      <example> This sample code shows how to call the GetHeavyToolMemo() method. <para> Dim objAtc As new CATC </para> <para> Dim heavyToolMemo As String </para> <para> Try </para> <para> heavyToolMemo = objAtc.GetHeavyToolMemo() </para> <para> Catch ae As ApplicationException </para> <para> doError("CATC: Heavy Tool Memo", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CATC: Heavy Tool Memo", ex.Message) </para> <para> End Try </para> </example>
      <returns>A System.String value that represents the information about heavy tool</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - POT NO./TOOL NO. TABLE (FIXED ADDRESS) - SET - HEAVY TOOL - Heavy is tool memo <para> <img src="MC.ATC.SET.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.SetHeavyToolMemo(System.String)">
      <summary> Sets heavy tool memo. </summary>
      <example> This sample code shows how to call the SetHeavyToolMemo() method. <para> Dim objAtc As new CATC </para> <para> Try </para> <para>	objAtc.SetHeavyToolMemo(Me.memoToolNumber.Text) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CATC: Heavy Tool Memo", ae.Message)	</para> <para> Catch ex As Exception </para> <para>	doError("CATC: Heavy Tool Memo", ex.Message) </para> <para> End Try </para> </example>
      <param name="strValue">The memo to be set for the the heavy tool attribute.  A NotSupportedException is throw if the number of characters for the memo is greater than 10.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> SET - HEAVY TOOL - Heavy tool's memo. <para> <img src="MC.ATC.SET.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetReturnPotNo">
      <summary> Gets return tool pot number for ATC Random. </summary>
      <example> This sample code shows how to call the GetReturnPotNo() method. <para> Dim objAtc As new CATC </para> <para> Try </para> <para>	txtReturnTool.Text = objAtc.GetReturnTool() </para> <para> Catch ae As ApplicationException </para> <para>	doError("CATC: GetReturnPotNo", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CATC: GetReturnPotNo", ex.Message) </para> <para> End Try	</para> </example>
      <returns>A System.String value that represents the information about the return pot number</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Random ATC Specification </term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - POT NO./TOOL NO. TABLE (ATC RANDOM ADDRESS) - POT NO. <para> <img src="MC.ATC.RANDOM_ADDRESS.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CATC.GetATCSequence">
      <summary> Gets ATC sequence number </summary>
      <example> This sample code shows how to call the GetReturnPotNo() method. <para> Dim objAtc As new CATC </para> <para> Dim intValue As Integer </para> <para>	intValue = objAtc.GetATCSequence() </para> </example>
      <returns>A System.Int32 represents the ATC sequence number</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> ATC FUNCTION - ATC SEQ NO. <para> <img src="ATCOperation.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CAxis">
      <summary> Class provides information about axes in the system which relates position, feed rate, load, and feed status.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
      <summary> Sets current data unit for this class instance. </summary>
      <example> This sample code shows how to call the SetDataUnit() method. <para> Dim objaxis As new CAxis </para> <para> Try </para> <para> objaxis.SetDataUnit(Me.axisDataUnit.SelectedValue) </para> <para> refresh_axis_tab() </para> <para> Catch ae As ApplicationException </para> <para> doError("CAxis", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CAxis", ex.Message) </para> <para> End Try </para> </example>
      <param name="enDataUnit">Data Unit to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If applicable, this setting is applied to data in this class instance only, not for NC Data Unit. For linear axis position, data unit can be either mm or inch. For circular (rotary) axis position, data unit is in degree only. For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, then NC position will be converted to inch and vice versa. </remarks>
      <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. <para> <img src="ParametersScreen.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetAxisType(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets axis type for the given axis index. </summary>
      <example> This sample code shows how to call the GetAxisType() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Me.axisType.Text = objaxis.GetAxisType(curAxisEnum) </para> </example>
      <param name="enAxisIndex">Axis index.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>An Okuma.CMDATAPI.Enumerations.AxisTypeEnum enumeration value that represents the axis type for the given axis index</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetFeedrateType">
      <summary> Gets feedrate type that is currently active in the system </summary>
      <example> This sample code shows how to call the GetFeedrateType() method. <para> Dim objaxis As new CAxis </para> <para> Me.feedrateType.Text = System.Enum.GetNames(GetType(FeedrateTypeEnum)).GetValue(objaxis.GetFeedrateType) </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum enumeration value that represents an active feedrate type</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetCommandFeedrate(Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum)">
      <summary> Gets command feedrate from the program for the given order. </summary>
      <example> This sample code shows how to call the GetCommandFeedrate() method. <para> Dim objaxis As new CAxis </para> <para> Dim curCommandFeedrateEnum As CommandFeedrateOrderEnum </para> <para> Me.commandFeedRate.Text = objaxis.GetCommandFeedrate(curCommandFeedrateEnum) </para> </example>
      <param name="enValue">The specified order in which the command feedrate is carried out by the program.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum enumeration.</param>
      <returns>A System.Double value that represents the feedrate for the specified order.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> BLOCK DATA - F - Command feedrate <para> <img src="blockdata.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualFeedrate(Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum)">
      <summary> Gets the actual feedrate carried out by the system for the given feedrate type. </summary>
      <example> This sample code shows how to call the GetActualFeedrate() method. <para> Dim objaxis As new CAxis </para> <para> Dim curFeedrateEnum As FeedrateTypeEnum </para> <para> Me.actualFeedrate.Text = objaxis.GetActualFeedrate(curFeedrateEnum) </para> </example>
      <param name="enFeedrate">Type of feedrate that feed rate data to be returned.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum enumeration.</param>
      <returns>A System.Double value that represents the actual feedrate carried out by the system at the specified feedrate type.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> BLOCK DATA - Fr/Fm - Actual feedrate per revolution/per minute <para> <img src="blockdata.jpg" /> </para> </Figure>
      <remarks> For feedrate type mm/rev, the system returns a large number (2147483.647) when NC feedrate value is overflow.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetFeedrateOverride">
      <summary> Gets percentage of feedrate that is overriden by the system </summary>
      <example> This sample code shows how to call the GetFeedrateOverride() method. <para> Dim objaxis As new CAxis </para> <para> Me.feedrateOverride.Text = objaxis.GetFeedrateOverride()	</para> </example>
      <returns>A System.Int32 value that represents the percentage of feedrate is overriden by the system</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> G02 - Feedrate override control knob on machine control panel <para> <img src="MachineControlPanel.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetMaxFeedrateOverride">
      <summary> Gets maximum feedrate override by the system. </summary>
      <example> This sample code shows how to call the GetMaxFeedrateOverride() method. <para> Dim objaxis As new CAxis </para> <para> Me.maxFeedrateOverride.Text = objaxis.GetMaxFeedrateOverride	</para> </example>
      <returns>A System.Int32 value that represents the percentage of maximum feedrate override by the system</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetFeedHold">
      <summary> Gets the axis feeding status. </summary>
      <example> This sample code shows how to call the GetFeedHold() method. <para> Dim objaxis As new CAxis </para> <para> Me.feedHold.Text = objaxis.GetFeedHold </para> </example>
      <returns>A System.Boolean value.  It returns true if axis is in stop state, otherwise, false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> G01 - Machine is in feed hold state. <para> <img src="RunningStatus-G01.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetAxisLoad(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets axis load at the specified axis index. </summary>
      <example> This sample code shows how to call the GetAxisLoad() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Me.axisLoad.Text = objaxis.GetAxisLoad(curAxisEnum) </para> </example>
      <param name="enAxisIndex">Axis index.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Int32 value that represents the percentage of load at the specified axis index.</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>Percentage of load for X,Y,Z,B,and Ys axis. <para> AUTO OPERATION - NC AXIS DATA - MAGNI. <img src="MC.Axis.Load.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetAxisName(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets axis name for the specified axis index </summary>
      <example> This sample code shows how to call the GetAxisName() method. <para>Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Me.axisName.Text = objaxis.GetAxisName(curAxisEnum) </para> </example>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.String that represents the name of the specified axis index.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotaryAxisName(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
      <summary> Gets rotary axis name for the specified axis index </summary>
      <example> This sample code shows how to call the GetRotaryAxisName() method. <para>Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As RotaryAxisIndexEnum </para> <para> Me.axisName.Text = objaxis.GetRotaryAxisName(curAxisEnum) </para> </example>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
      <returns>A System.String that represents the name of the specified axis index.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - ROTARY AXIS SYSTEM PARAMETER - Rotary Axis Structure - NAME <para> <img src="MC.Parameter.RotaryAxisSystemParameter.Structure.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.IsISORotaryAxis(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
      <summary> Check if the specified rotary axis index is complied with ISO standard or not </summary>
      <example> This sample code shows how to call the IsISORotaryAxis() method. <para>Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As RotaryAxisIndexEnum </para> <para> Dim blnValue As Boolean </para> <para> blnValue = objaxis.IsISORotaryAxis(curAxisEnum) </para> </example>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
      <returns>A Boolean value.  True if it is complied with ISO standard otherwise false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - ROTARY AXIS PARAMETER - Rotation Axis Attribute - ISO - Page 1/2 <para> <img src="MC.Parameter.RotaryAxisParameter.Attribute.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotaryAxisSetupPosition(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
      <summary> Get setup position for the specified rotary axis index </summary>
      <example> This sample code shows how to call the GetRotaryAxisSetupPosition() method. <para>Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As RotaryAxisIndexEnum </para> <para> Dim enValue As RotaryAxisSetupPositionEnum </para> <para> enValue = objaxis.GetRotaryAxisSetupPosition(curAxisEnum) </para> </example>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
      <returns>An Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum enumeration value that represents a setup position for a rotary axis</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - ROTARY AXIS SYSTEM PARAMETER - Rotary Axis Structure -POSITION <para> <img src="MC.Parameter.RotaryAxisSystemParameter.Structure.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotaryAxisSetupStructure(Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum)">
      <summary> Get setup structure for the specified rotary axis index </summary>
      <example> This sample code shows how to call the GetRotaryAxisSetupStructure() method. <para>Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As RotaryAxisIndexEnum </para> <para> Dim enValue As RotaryAxisSetupStructureEnum </para> <para> enValue = objaxis.GetRotaryAxisSetupStructure(curAxisEnum) </para> </example>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum enumeration.</param>
      <returns>An Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum enumeration value that represents a setup structure for a rotary axis</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - ROTARY AXIS SYSTEM PARAMETER - Rotary Axis Structure - STRUCTURE <para> <img src="MC.Parameter.RotaryAxisSystemParameter.Structure.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotationCenterSetupPosition(Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum,Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum,Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum)">
      <summary> Gets rotation center setup position given rotation center side, linear axis index, and rotation axis structure. </summary>
      <example> This sample code shows how to call the GetRotationCenterSetupPosition() method. <para> Dim objaxis As new CAxis </para> <para> Dim enRotationCenterSide As RotationCenterSideEnum </para> <para> Dim enLinearAxisIndex As LinearAxisIndexEnum </para> <para> Dim enRotaryAxisStructure As RotaryAxisStructureEnum </para> <para> Dim dblValue As Double </para> <para> dlbValue = objaxis.GetRotationCenterSetupPosition(enRotationCenterSide, enRotaryAxisStructure, enLinearAxisIndex) </para> </example>
      <param name="enRotationCenterSide">Rotation Center side.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum enumeration.  </param>
      <param name="enRotaryAxisStructure">Rotary Axis Strucuture index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum enumeration.  </param>
      <param name="enLinearAxisIndex">Linear Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the rotation center setup position.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER- ROTARY AXIS PARAMETER - Rotation Center - Page 2/2 <para> <img src="MC.Axis.RotaryAxisParameter.RotationCenter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetShiftAmountSlopeCoord(Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum)">
      <summary> Gets shift amount in slope coordinate system for given axis index </summary>
      <example> This sample code shows how to call the GetShiftAmountSlopeCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim enLinearAxisIndex As LinearAxisIndexEnum </para> <para> Dim dblValue As Double </para> <para> dlbValue = objaxis.GetShiftAmountSlopeCoord(enLinearAxisIndex) </para> </example>
      <param name="enLinearAxisIndex">Linear Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the shift amount in slope coordinate system for the specfiied axis index</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> Reference Manual: OSP-200M - Special Functions Manual - Section 28 <para> <img src="MC.Axis.SlopeCoord.ShiftAmount.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotateAmountSlopeCoord(System.Int32,System.Int32)">
      <summary> Gets rotate amount in slope coordinate system for given rotation position in a 3x3 rotation matrix </summary>
      <example> This sample code shows how to call the GetRotateAmountSlopeCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim intColumn As Int32 </para> <para> Dim intRow As Int32 </para> <para> Dim dblValue As Double </para> <para> dlbValue = objaxis.GetRotateAmountSlopeCoord(intColumn, intRow) </para> </example>
      <param name="intColumn">The column position in a 3x3 Rotation Matrix. Column value is ranging from 0 to 2</param>
      <param name="intRow">The row position in a 3x3 Rotation Matrix. Row value is ranging from 0 to 2</param>
      <returns>A System.Double that represents the rotate amount in slope coordinate system for the specfiied axis index</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para>Reference Manual: OSP-200M - Special Functions Manual - Section 28</para> <para>Reference Rotation Matrix - http://en.wikipedia.org/wiki/Rotation_matrix</para> <para> <img src="MC.Axis.SlopeCoord.ShiftAmount.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetShiftAmountInverseSlopeCoord(Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum)">
      <summary> Gets shift amount in inverse slope coordinate system for given axis index </summary>
      <example> This sample code shows how to call the GetShiftAmountInverseSlopeCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim enLinearAxisIndex As LinearAxisIndexEnum </para> <para> Dim dblValue As Double </para> <para> dlbValue = objaxis.GetShiftAmountInverseSlopeCoord(enLinearAxisIndex) </para> </example>
      <param name="enLinearAxisIndex">Linear Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the shift amount in slope coordinate system for the specfiied axis index</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> Reference Manual: OSP-200M - Special Functions Manual - Section 28 <para> <img src="MC.Axis.SlopeCoord.ShiftAmount.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRotateAmountInverseSlopeCoord(System.Int32,System.Int32)">
      <summary> Gets rotate amount in inverse slope coordinate system for given rotation position in a 3x3 rotation matrix </summary>
      <example> This sample code shows how to call the GetRotateAmountInverseSlopeCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim intColumn As Int32 </para> <para> Dim intRow As Int32 </para> <para> Dim dblValue As Double </para> <para> dlbValue = objaxis.GetRotateAmountInverseSlopeCoord(intColumn, intRow) </para> </example>
      <param name="intColumn">The column position in a 3x3 Rotation Matrix. Column value is ranging from 0 to 2</param>
      <param name="intRow">The row position in a 3x3 Rotation Matrix. Row value is ranging from 0 to 2</param>
      <returns>A System.Double that represents the rotate amount in slope coordinate system for the specfiied axis index</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para>Reference Manual: OSP-200M - Special Functions Manual - Section 28</para> <para>Reference Rotation Matrix - http://en.wikipedia.org/wiki/Rotation_matrix</para> <para> <img src="MC.Axis.SlopeCoord.ShiftAmount.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetSlopeConverting">
      <summary> Gets current Slope Converting </summary>
      <example> This sample shows how to call the GetSlopeConverting method. <para>Dim objAxis As New CAxis </para> <para>Dim enValue As SlopeConvertingEnum </para> <para>Try </para> <para>    enValue = objAxis.GetSlopeConverting </para> <para>Catch ae As ApplicationException </para> <para>    doError("CAxis", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CAxis", ex.Message) </para> <para>End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualPositionProgramCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets actual position in program coordinate at the specified axis index. </summary>
      <example> This sample code shows how to call the GetActualPositionProgramCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> curAxisEnum=System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.axisCombo.SelectedValue) </para> <para> Me.apProgramCoord.Text = CDbl(objaxis.GetActualPositionProgramCoord(curAxisEnum) </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Double that represents the actual position in program coordinate.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> ACT POSI - Actual position in program coordinate <para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetDistanceToTargetPosition(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets distance from the actual position to a target value specified by the program at the specified axis index. </summary>
      <example> This sample code shows how to call the GetDistanceToTargetPosition() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Me.distanceTarget.Text = objaxis.GetDistanceToTargetPosition(curAxisEnum) </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the distance from actual position to target.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>Distance - Distance to target position <para> <img src="ActualPosition-p4.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetTargetPosition(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets the programmed target coordinate system at the specified axis index. </summary>
      <example> This sample code shows how to call the GetTargetPosition() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Me.targetPosition.Text = objaxis.GetTargetPosition(curAxisEnum) </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the target position.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> Targe point - Target position. <para> <img src="ActualPosition-p4.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualPositionMachineCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets actual position in machine coordinate at the specified axis index. </summary>
      <example> This sample code shows how to call the GetActualPositionMachineCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> curAxisEnum=System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.axisCombo.SelectedValue) </para> <para> Me.apMachineCoord.Text = objaxis.GetActualPositionMachineCoord(curAxisEnum)	</para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the actual position in machine coordinate.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> ACT POSI(MACHINE) - Actual position in machine coordinate <para> <img src="ActualPosition-p4.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetActualPositionEncoderCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets actual position in encoder coordinate at the specified axis index. </summary>
      <example> This sample code shows how to call the GetActualPositionEncoderCoord() method. <para> Dim objaxis As new CAxis </para> <para> Me.apEncoderCoord.Text = objaxis.GetActualPositionEncoderCoord(AxisIndexEnum.Z_Axis)	</para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.  </param>
      <returns>A System.Double that represents the actual position in encoder coordinate.</returns>
      <returns>A System.Double that represents the actual position in program coordinate.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>RCON - Actual position in encoder coordinate <para> <img src="AxisData_Encoder_coord.RCON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRelativeActualPositionProgramCoord(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets relative actual position in program coordinate at the specified axis index. </summary>
      <example> This sample code shows how to call the GetRelativeActualPositionProgramCoord() method. <para> Dim objaxis As new CAxis </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> curAxisEnum=System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.axisCombo.SelectedValue) </para> <para> Me.txt_RelativeActualPositionProgramCoord.Text = CDbl(objaxis.GetRelativeActualPositionProgramCoord(curAxisEnum))</para> </example>
      <param name="enAxisIndex">Axis index. Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Double that represents the relative actual position in program coordinate.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>SFLCPDPX - Relative Actual position in program coordinate <para> <img src="AxisData_Encoder_coord.RCON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets user parameter variable limit at the specified axis index </summary>
      <example> This example shows how to get user parameter variable limit at the specified axis index. <para> <para> Dim dblValue as Double	</para> <para> Dim enAxisIndex as AxisIndexEnum </para> <para> Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum </para> <para> dblValue = objVariables.GetUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex)	</para> </para> </example>
      <param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum enumeration.</param>
      <param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M) <para> <img src="MC.Parameter.UserParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.SetUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary>Set user parameter variable limit at the specified axis index. </summary>
      <example> This example shows how to set user parameter variable limit at the specified axis index. <para> <para> Dim dblValue as Double	</para> <para> Dim enAxisIndex as AxisIndexEnum </para> <para> Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum </para> <para> objVariables.SetUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex, dblValue)	</para> </para> </example>
      <param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum enumeration.</param>
      <param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Variable limit value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M) <para> <img src="MC.Parameter.UserParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.AddUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary>Set user parameter variable limit by adding the input value to the existing data at the specified axis index. </summary>
      <example> This example shows how to add user parameter variable limit at the specified axis index. <para> <para> Dim dblValue as Double	</para> <para> Dim enAxisIndex as AxisIndexEnum </para> <para> Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum </para> <para> objVariables.AddUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex, dblValue)	</para> </para> </example>
      <param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum enumeration.</param>
      <param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Variable limit value to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M) <para> <img src="MC.Parameter.UserParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.CalUserParameterVariableLimit(Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary>Determine the variable limit based on the calculation made on the input value and actual position at the specified axis index. </summary>
      <example> This example shows how to calculate user parameter variable limit at the specified axis index. <para> <para> Dim dblValue as Double	</para> <para> Dim enAxisIndex as AxisIndexEnum </para> <para> Dim enUserParameterVariableLimit as UserParameterVariableLimitEnum </para> <para> objVariables.CalUserParameterVariableLimit(enUserParameterVariableLimit, enAxisIndex, dblValue)	</para> </para> </example>
      <param name="enVariableLimit">Variable Limit. Values of parameter come from Okuma.CMDATAPI.Enumerations.UserVariableLimitEnum.</param>
      <param name="enAxisIndex">Axis index. Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Input value to be calculated from</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <Figure> PARAMETER - USER PARAMETER - +/- VARIABLE LIMIT(P), +/- VARIABLE LIMIT(M) <para> <img src="MC.Parameter.UserParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHiCutProFeedrateUpperLimit">
      <summary> Gets Hi-Cut Pro feedrate upper limit </summary>
      <example> This sample code shows how to call the GetHiCutProFeedrateUpperLimit() method. <para> Dim objaxis As new CAxis </para> <para> Dim dblValue as Double </para> <para> dblValue = objaxis.GetHiCutProFeedrateUpperLimit() </para> </example>
      <returns>A System.Double value that represents the feedrate upper limit for Hi-Cut Pro</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - Hi-Cut Pro Control PARAMETER - FEEDRATE UPPER LIMIT <para> <img src="HiCutProControlParameter.jpg" /> </para> </Figure>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Hi-Cut Pro Function NC SPEC CODE [11,0]</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHiCutProMachiningTolerance">
      <summary> Gets Hi-Cut Pro machining tolerance </summary>
      <example> This sample code shows how to call the GetHiCutProMachiningTolerance() method. <para> Dim objaxis As new CAxis </para> <para> Dim dblValue as Double </para> <para> dblValue = objaxis.GetHiCutProMachiningTolerance() </para> </example>
      <returns>A System.Double value that represents the machining tolerance for Hi-Cut Pro</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - Hi-Cut Pro Control PARAMETER - MACHINING TOLERANCE <para> <img src="HiCutProControlParameter.jpg" /> </para> </Figure>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Hi-Cut Pro Function NC SPEC CODE [11,0]</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHomePosition(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets Home Position given position index, and axis index </summary>
      <example> This sample code shows how to call the GetHomePosition() method. <para> Dim objaxis As new CAxis </para> <para> Dim dblValue as Double </para> <para> Dim intPosition as Integer </para> <para> Dim enAxisIndex as AxisIndexEnum </para> <para> dblValue = objaxis.GetHomePosition(intPosition, enAxisIndex) </para> </example>
      <param name="intPosition">Home Position. Valid variable indexes are ranging from 1-32/96/192.</param>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Double value that represents the home position</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - HOME POSITION PARAMETER <para> <img src="HomePositionParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetHomePositionMovementOrder(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets Home Position movement order given position index, and axis index </summary>
      <example> This sample code shows how to call the GetHomePositionMovementOrder() method. <para> Dim objaxis As new CAxis </para> <para> Dim intValue as Integer </para> <para> Dim intPosition as Integer </para> <para> Dim enAxisIndex as AxisIndexEnum </para> <para> intValue = objaxis.GetHomePositionMovementOrder(intPosition, enAxisIndex) </para> </example>
      <param name="intPosition">Home Position. Valid variable indexes are ranging from 1-32/96/192.</param>
      <param name="enAxisIndex">axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Int32 value that represents the home position movement order</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - HOME POSITION MOVEMENT ORDER <para> <img src="HomePositionMovementOrderParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetMaxHomePositions">
      <summary> Gets number of home positions available in the system </summary>
      <example> This sample code shows how to call the GetMaxHomePositions() method. <para> Dim objaxis As new CAxis </para> <para> Dim intPositions as Integer </para> <para> intPositions = objaxis.GetMaxHomePositions() </para> </example>
      <returns>A System.Int32 value that represents number of home positions available in the system</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - HOME POSITION <para> <img src="HomePositionParameter.jpg" /> </para> </Figure>
      <remarks> <para> Home positions are ranging from 32, 96, and to 197 positions. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CAxis.GetRapidFeedrateOverride">
      <summary> Gets rapid feedrate override </summary>
      <example> This sample code shows how to call the GetRapidFeedrateOverride() method. <para> Dim objaxis As new CAxis </para> <para> Dim intValue as Int32 </para> <para> intValue = objaxis.GetRapidFeedrateOverride()	</para> </example>
      <returns>A System.Int32 value that represents the percentage of feedrate is overriden by the system</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> G01 - Rapid Feedrate override control knob on machine control panel <para> <img src="MachineControlPanel.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CBallScrew">
      <summary> Class provides functions to compensate for pitch error in ball screws to improve positioning accuracy.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
      <summary> Sets current data unit for this class instance. </summary>
      <example> This sample code shows how to call the SetDataUnit() method. <para> Dim objBS As CBallScrew </para> <para> Try </para> <para>	objBS.SetDataUnit(Me.ballscrewDataUnitCombo.SelectedValue) </para> <para>	ballscrewUpdate() </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enDataUnit">Data Unit to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If applicable, this setting is applied to data in this class instance only, not for NC Data Unit. For linear axis position, data unit can be either mm or inch. For circular (rotary) axis position, data unit is in degree only. For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, then NC data will be converted to inch and vice versa. </remarks>
      <Figure> PARAMETER - NC OPTIONA PARAMETER - INPUT UNIT SYSTEM - DATA SET UNI - Data Unit in mm or inch.  This is for NC Data only. <para> <img src="ParametersScreen.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetMaxPitchPoints(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets the total number of points where pitch error compensation data are set for the individual axis. </summary>
      <example> This sample code shows how to call the GetMaxPitchPoints() method. <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para>	curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue))</para> <para>	Me.bsMaxPitchPoints.Text = objBS.GetMaxPitchPoints(curAxisEnum) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try	</para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Int32 that represent the max setting pitch points.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH POINT - Current setting of number of pitch points <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetMaxPitchPoints(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
      <summary> Sets the total number of points where pitch error compensation data are set for the individual axis. </summary>
      <example> This sample code shows how to call the SetMaxPitchPoints() method. <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para>	curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue)	</para> <para>	objBS.SetMaxPitchPoints(curAxisEnum, CInt(Me.bsMaxPitchPointsUpdate.Text)) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message)	</para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="intValue">Max pitch points value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH POINT - Current setting of number of pitch points <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddMaxPitchPoints(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
      <summary> Sets the maximum pitch points by adding the input value to the existing data at the specified axis index. </summary>
      <example> This sample code shows how to call the AddMaxPitchPoints() method. <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para>	curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para>	objBS.AddMaxPitchPoints(curAxisEnum, CInt(Me.bsMaxPitchPointsUpdate.Text)) </para> <para>	ballscrewUpdate() </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="intValue">pitch points value to be added to the current system</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH POINT - Current setting of number of pitch points <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetDataPoint(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets the pitch error compensation data at the specified point, and the axis index. </summary>
      <example> This sample code shows how to call the GetDataPoint() method. <para> Try </para> <para>	curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para>	Me.bsDataPoint.Text = objBS.GetDataPoint(CInt(Me.bsPecPoint.Text), curAxisEnum) </para> <para>	Me.bsInterval.Text = objBS.GetInterval(curAxisEnum) </para> <para>	Me.bsMaxPitchPoints.Text = objBS.GetMaxPitchPoints(curAxisEnum) </para> <para>	Me.bsStartPosition.Text = objBS.GetStartPosition(curAxisEnum) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="intPECPoint">Pitch Error Compensation data point</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Int32 that represents PEC data.</returns>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PEC Data points for X, Y, Z, and B axis <para> <img src="MC.PEC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetDataPoint(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
      <summary> Sets the pitch error compensation data at the specified point, and the axis index. </summary>
      <example> This sample code shows how to call the SetDataPoint() method. <para>	Dim curAxisEnum As AxisIndexEnum	</para> <para>	Try	</para> <para>	   curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue)	</para> <para>	   objBS.SetDataPoint(CInt(Me.bsPecPoint.Text), curAxisEnum, CInt(Me.bsDataPointUpdate.Text))	</para> <para>	   Me.bsDataPoint.Text = objBS.GetDataPoint(CInt(Me.bsPecPoint.Text), curAxisEnum)	</para> <para>	Catch ae As ApplicationException	</para> <para>	   doError("CBallScrew", ae.Message)	</para> <para>	Catch ex As Exception	</para> <para>	    doError("CBallScrew", ex.Message)	</para> <para>	End Try	</para> </example>
      <param name="intPECPoint">Pitch Error Compensation data point</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="intValue">Pitch Error Compensation data to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PEC Data points for X, Y, Z, and B axis <para> <img src="MC.PEC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddDataPoint(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
      <summary> Set the pitch error compensation data by adding the input value to the existing data at the specified point, and the axis index. </summary>
      <example> This sample code shows how to call the AddDataPoint() method. <para> Try </para> <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para> curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue)objBS.AddDataPoint(CInt(Me					.bsPecPoint.Text), curAxisEnum, CInt(Me.bsDataPointUpdate.Text)) </para> <para> Catch ae As ApplicationException </para> <para> doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="intPECPoint">Pitch Error Compensation data point</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="intValue">Pitch Error Compensation data to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PEC Data points for X, Y, Z, and B axis <para> <img src="MC.PEC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetInterval(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets the interval where ball screw pitch errors are compensated for at the specified axis index. </summary>
      <example> This sample code shows how to call the GetInterval() method. <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para>	curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para>	Me.bsInterval.Text = objBS.GetInterval(curAxisEnum) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Int32 value that represents the ball screw interval</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PTICH COMP SPAN - PEC Interval <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetInterval(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
      <summary> Sets the pitch error compensation interval where ball screw pitch errors are compensated for. </summary>
      <example> This sample code shows how to call the SetInterval() method. <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para> curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para> objBS.SetInterval(curAxisEnum, CInt(Me.bsIntervalUpdate.Text)) </para> <para> ballscrewUpdate() </para> <para> Catch ae As ApplicationException </para> <para> doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="intValue">Interval value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH COMP SPAN - PEC interval <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddInterval(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Int32)">
      <summary> Set the pitch error compensation interval data by adding the input value to the existing data at the specified axis index. </summary>
      <example> This sample code shows how to call the AddInterval() method. <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para> curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para> objBS.AddInterval(curAxisEnum, CInt(Me.bsIntervalUpdate.Text)) </para> <para> Catch ae As ApplicationException </para> <para> doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="intValue">Interval value to be added to</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - PITCH COMP SPAN - PEC Interval <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.GetStartPositionInNDirection(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets the starting position of pitch error compensation in negative direction. </summary>
      <example> This sample code shows how to call the GetStartPositionInNDirection() method. <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para>	curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para>	Me.bsStartPosition.Text = objBS.GetStartPositionInNDirection(curAxisEnum) </para> <para> Catch ae As ApplicationException </para> <para>	doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para>	doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Double value that represents the starting position</returns>
      <DataUnit> <para> The unit depends on axis type: </para> <list type="table"> <listheader> <term>Axis type</term> <description>Unit</description> </listheader> <item> <term>Linear axis</term> <description>By default, unit is in millimeter.  Other units can be set by calling SetDataUnit.</description> </item> <item> <term>Rotary axis</term> <description>Degree</description> </item> </list> </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET -  N PITCH ERROR COMP - Starting position of PEC in negative direction <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.SetStartPositionInNDirection(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Sets the starting position of pitch error compesation in Negative direction. </summary>
      <example> This sample code shows how to call the SetStartPositionInNDirection() method. <para> Dim objBS As new CBallScrew </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Try </para> <para> curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para> objBS.SetStartPositionInNDirection(curAxisEnum, CDbl(Me.bsStartPositionUpdate.Text))</para> <para> ballscrewUpdate()</para> <para> Catch ae As ApplicationException </para> <para> doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CBallScrew", ex.Message) </para> <para> End Try  </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue"> value to be added to</param>
      <DataUnit> <para> The unit depends on axis type: </para> <list type="table"> <listheader> <term>Axis type</term> <description>Unit</description> </listheader> <item> <term>Linear axis</term> <description>By default, unit is in millimeter.  Other units can be set by calling SetDataUnit.</description> </item> <item> <term>Rotary axis</term> <description>Degree</description> </item> </list> </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - N PITCH ERROR COMP - Starting position of PEC in negative direction <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBallScrew.AddStartPositionInNDirection(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Sets the starting position of pitch error compesation in Negative direction by adding the input datat to the existing data. </summary>
      <example> This sample code shows how to call the AddStartPositionInNDirection() method. <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Dim objBS As new CBallScrew </para> <para> Try </para> <para> curAxisEnum = System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.ballscrewAxisCombo.SelectedValue) </para> <para> objBS.AddStartPositionInNDirection(curAxisEnum, CDbl(Me.bsMaxPitchPointsUpdate.Text)) </para> <para> ballscrewUpdate() </para> <para> Catch ae As ApplicationException </para> <para> doError("CBallScrew", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CBallScrew", ex.Message) </para> <para> End Try </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Value to be added to</param>
      <DataUnit> <para> The unit depends on axis type: </para> <list type="table"> <listheader> <term>Axis type</term> <description>Unit</description> </listheader> <item> <term>Linear axis</term> <description>By default, unit is in millimeter.  Other units can be set by calling SetDataUnit.</description> </item> <item> <term>Rotary axis</term> <description>c</description> </item> </list> </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - PITCH ERROR COMPENSATION - PREPARE SET - N PITCH ERROR COMP - Starting position of PEC in negative direction <para> <img src="MC.PEC.SETTING.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CAPISpecException">
      <summary> This exception class will be thrown during a call to CMachine.Init method if the API Specification is not enabled on machine  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CBase">
      <summary> It is a base class for all classes of Data API. All classes in DATA-API will be derived from this class to handle error handling, logging service, and other services for internal data structure of this library ONLY.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBase.MMToMicron(System.Double,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Function handles conversion value in mm to micron per axis index  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetLoggingLevel">
      <summary>get current logging level</summary>
      <returns>A ApiLog::loggingRequestType value.</returns>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CBase.GetAxisType(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Get axis type given axis index </summary>
      <returns>AxisTypeEnum</returns>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CCoolant">
      <summary> Class provides machine coolant information.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CCoolant.GetChipFlushCondition">
      <summary> Gets the machine chip flush condition </summary>
      <example> This sample code shows how to use the GetChipFlushCondition() method. <para>Try </para> <para>    Me.coolantChipCondition.Text = System.Enum.GetName(GetType(OnOffEnum), CInt(objCoolant.GetChipFlushCondition)) </para> <para>Catch ae As ApplicationException </para> <para>    doError("CCoolant", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CCoolant", ex.Message) </para> <para>End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration value that represents the condition of chip flush system.  An ON value means that chip flush is running, otherwise it returns an OFF value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CCurrentAlarm">
      <summary> Class represents current alarm information from NC. For more information, please refer to the CNC System OSP-P200M/P20M/OSP-P200M-R/P20M-R Alarm and Error List document.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.#ctor(System.Int32,Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum,System.Int32,System.String,System.String,System.String,System.String)">
      <summary> Initializes a new instance of the CCurrentAlarm class with the alarm number, alarm level, alarm object, alarm code, alarm message, object message, and alarm character string. </summary>
      <param name="intAlarmNumber">Alarm number</param>
      <param name="enAlarmLevel">Alarm level</param>
      <param name="intAlarmObject">Alarm object</param>
      <param name="strAlarmCode">Alarm code</param>
      <param name="strAlarmMessage">Alarm message</param>
      <param name="strObjectMessage">Object message</param>
      <param name="strAlarmCharacterString">Alarm Character String</param>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmNumber">
      <summary> Gets the alarm number for this CCurrentAlarm instance. </summary>
      <returns> A System.Int32 containing the alarm number</returns>
      <Figure> Alarm Format - Alarm number (1) <para> <img src="MC.AlarmFormat.jpg" /> </para>  </Figure>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmLevel">
      <summary> Gets the alarm level for this CCurrentAlarm instance. Alarms related with the OSP are classified into five types such as Alarm P, A, B, C and D. </summary>
      <returns>An Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum value</returns>
      <Figure> Alarm Classifications <para> <img src="MC.AlarmLevel.jpg" /> </para>  </Figure>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmCode">
      <summary> Gets the alarm code for this CCurrentAlarm instance. </summary>
      <returns> A System.String containing the alarm code</returns>
      <Figure> Alarm Format - Alarm code (6) <para> <img src="MC.AlarmFormat.jpg" /> </para>  </Figure>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.ObjectNumber">
      <summary> Gets the alarm Object number for this CCurrentAlarm instance. The object number and the object message show the programming system and the control axis where the alarm has occurred by the number and message as shown in the table below: </summary>
      <returns> A System.Int32 containing the alarm Object</returns>
      <Figure> Alarm Format - Object number (2) <para> <img src="MC.AlarmFormat.jpg" /> </para> <para> Object Number and Object Message Table: </para> <para> <img src="MC.AlarmObject.jpg" /> </para> <para> As indicated above, the object numbers and messages to be used are determined by the machine specifications. </para>  </Figure>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmMessage">
      <summary> Gets the alarm message for this CCurrentAlarm instance. </summary>
      <returns>A System.String containing the alarm message</returns>
      <Figure> Alarm Format - Alarm Message (4) <para> <img src="MC.AlarmFormat.jpg" /> </para>  </Figure>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.ObjectMessage">
      <summary> Gets the alarm Object message for this CCurrentAlarm instance. </summary>
      <returns>A System.String containing the alarm Object message</returns>
      <Figure> Alarm Format - Object Message (5) <para> <img src="MC.AlarmFormat.jpg" /> </para>  </Figure>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CCurrentAlarm.AlarmCharacterString">
      <summary> Gets the alarm Character String for this CCurrentAlarm instance. </summary>
      <returns>A System.String containing the alarm Character String</returns>
      <Figure> Alarm Format - Alarm character-string (7) <para> <img src="MC.AlarmFormat.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CIO">
      <summary> Class provides information about PLC I/O Bit, Word, and Long Word.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetBitIO(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32,Okuma.CMDATAPI.Enumerations.BitsEnum)">
      <summary>Gets I/O bit at the specified address index. </summary>
      <example> This example shows how to call GetBitIO method <para>  Me.varValue.Text = objIO.GetBitIO( enIO,  intAddressIndex,  enBits)	</para> </example>
      <param name="enIO">I/O type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param>
      <param name="intAddressIndex">Logical I/O address index</param>
      <param name="enBits">Bit number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.BitsEnum enumeration.</param>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.Bit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetWordIO(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32)">
      <summary>Gets I/O WORD at the specified address index. </summary>
      <example> This example shows how to call GetWordIO method <para>  Me.varValue.Text = objIO.GetWordIO( enIO,  intAddressIndex)	</para> </example>
      <param name="enIO">I/O type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param>
      <param name="intAddressIndex">Logical I/O address index</param>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.Word.jpg" /> </para> </Figure>
      <remarks> Data value displayed on OSP IO Monitor application can have negative values in DEC column. However, HEX column will display actual value. For example: If Word data of index 17 bit 15 is ON then it will be displayed as -1 in DEC column, and FFFF in HEX column. This function will return 65535.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetLongWordIO(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32)">
      <summary>Gets I/O LONG WORD at the specified address index. </summary>
      <example> This example shows how to call GetLongWordIO method <para>  Me.varValue.Text = objIO.GetLongWordIO( enIO,  intAddressIndex)	</para> </example>
      <param name="enIO">I/O type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param>
      <param name="intAddressIndex">Logical I/O address index</param>
      <returns>A System.Int64 value represents decimal value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.LongWord.jpg" /> </para> </Figure>
      <remarks> Data value displayed on OSP IO Monitor application can have negative values in DEC column. However, HEX column will display actual value. For example: If Long Word data has a HEX value of FFFFFFFF then it will be displayed as -1 in DEC column. This function will return 4294967295 for the equivalent value of FFFFFFFF in HEX .  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetUserTaskIOVariable(Okuma.CMDATAPI.Enumerations.IOTypeEnum,System.Int32)">
      <summary>Gets User Task I/O variable given I/O type and variable index. </summary>
      <example> This example shows how to call GetUserTaskIOVariable method <para>  Me.varValue.Text = objIO.GetUserTaskIOVariable(enIO, intIndex)	</para> </example>
      <param name="enIO">I/O variable type.  Values of parameter come from Okuma.CMDATAPI.Enumerations.IOTypeEnum enumeration.</param>
      <param name="intIndex">User Task I/O variable index. Valid variable indexes are ranging from 1-8.</param>
      <returns>A Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.UserTaskIO.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.SetUserTaskOutputVariable(System.Int32,Okuma.CMDATAPI.Enumerations.OnOffStateEnum)">
      <summary>Sets User Task Output I/O variable given variable index. </summary>
      <example> This example shows how to call SetUserTaskOutputVariable method <para>  Me.varValue.Text = objIO.SetUserTaskOutputVariable(intIndex)	</para> </example>
      <param name="intIndex">User Task I/O variable index. Valid variable indexes are ranging from 1-8.</param>
      <param name="enValue">User Task output value to be set.  Values of parameter come from Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.UserTaskIO.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetProtectedUserTaskOutputVariable(System.Int32)">
      <summary>Gets protected User Task I/O output variable given variable index. </summary>
      <example> This example shows how to call GetProtectedUserTaskOuptutVariable method <para>  Dim enValue	as OnOffStateEnum </para> <para>  enValue = objIO.GetProtectedUserTaskOuptutVariable(intIndex)	</para> </example>
      <param name="intIndex">User Task I/O variable index. Valid variable indexes are ranging from 1-8.</param>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value.  It is in protected mode if it is ON otherwise not protected</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.UserTaskIO.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.SetProtectedUserTaskOutputVariable(System.Int32,Okuma.CMDATAPI.Enumerations.OnOffStateEnum)">
      <summary>Protect User Task Output I/O variable from writing in NC given variable index. If a User Task Output I/O variable has been set for protection it will prevent NC from writing into this ouptut variable. For example: VDOUT[1] = 1 will generate a NC alarm if output variable 1 is protected. </summary>
      <example> This example shows how to call SetProtectedUserTaskOutputVariable method <para>  Dim enValue as OnOffStateEnum = OnOffStateEnum.ON </para> <para>  objIO.SetProtectedUserTaskOutputVariable(intIndex, enValue)	</para> </example>
      <param name="intIndex">User Task output I/O variable index. Valid variable indexes are ranging from 1-8.</param>
      <param name="enValue">It is in protected mode if setting value is ON, otherwise it is un-protected. Values of parameter come from Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.UserTaskIO.jpg" /> </para> </Figure>
      <remarks> <para> ********************* This function can only be supported in OSP-P200 machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetIO(System.String)">
      <summary>Gets I/O address value given I/O label. </summary>
      <example> This example shows how to call GetLabel method <para> Try </para> <para> Dim vtIOAddress As IOAddress </para> <para> txtIOBitIndex.Text = "" </para> <para> txtIOBitNo.Text = "" </para> <para> txtIOBit.Text = "" </para> <para> txtIOWordIndex.Text = "" </para> <para> txtIOWord.Text = "" </para> <para> txtIOLongWordIndex.Text = "" </para> <para> txtIOLongWord.Text = "" </para> <para> vtIOAddress = m_objIO.GetIO(txtIOLabel.Text) </para> <para> cboIOVariableTypes.SelectedIndex = (vtIOAddress.enIOType) </para> <para> Select Case vtIOAddress.enSize </para> <para>		Case IOAddressSizeEnum.Bit </para> <para>			txtIOBitIndex.Text = vtIOAddress.Address </para> <para>			txtIOBitNo.Text = vtIOAddress.Bit </para> <para>			txtIOBit.Text = vtIOAddress.Value </para> <para>      Case IOAddressSizeEnum.Word </para> <para>          txtIOWordIndex.Text = vtIOAddress.Address </para> <para>          txtIOWord.Text = vtIOAddress.Value </para> <para>		Case IOAddressSizeEnum.DWord </para> <para>          txtIOLongWordIndex.Text = vtIOAddress.Address </para> <para>          txtIOLongWord.Text = vtIOAddress.Value </para> <para>      Case Else </para> <para>          DisplayError("I/O Variables", "Invalid I/O Label") </para> <para>  End Select </para> <para>  Catch ae As ApplicationException </para> <para>		DisplayError("I/O Variables", ae.Message) </para> <para>  Catch ex As Exception </para> <para>		DisplayError("I/O Variables", ex.Message) </para> <para>  End Try </para> </example>
      <param name="strLabel">An I/O address label for Bit/Word/Long Word.  It is case-sensitive and cannot be blank label.</param>
      <returns>An I/O address data value associated with the label if it is found. Otherwise, address/bit location will be reset to -1, and 0 respectively.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.Bit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CIO.GetLabel(Okuma.CMDATAPI.DataAPI.CIOAddress)">
      <summary> Gets label associated with the I/O address location, I/O size, and I/O type. </summary>
      <example> This example shows how to call GetLabel method <para> Try </para> <para> Dim objAddress As CIOAddress = new CIOAddress</para> <para> Dim strValue As String </para> <para> objAddress.Address = 11 </para> <para> objAddress.Bit = 15 </para> <para> objAddress.enSize = IOAddressSizeEnum.Bit </para> <para> objAddress.enIOType = IOTypeEnum.Input </para> <para> strValue = m_objIO.GetLabel(objAddress) </para> </example>
      <param name="objIOAddress">I/O address location, I/O address size, and I/O type </param>
      <returns>A label if the label can be found based on the given information.  It can be empty if no label assigned to an I/O address location</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> I/O Monitor application <para> <img src="MC.IO.Monitor.Bit.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CIOAddress">
      <summary> Class represents I/O address data  </summary>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Address">
      <summary>Logical I/O address index location</summary>
      <returns>A System.Int32 value</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Bit">
      <summary>Logical I/O address bit location</summary>
      <returns>A BitsEnum value</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Size">
      <summary>I/O data size - Bit/Word/Long Word</summary>
      <returns>A IOAddressSizeEnum value</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.IOType">
      <summary>I/O type</summary>
      <returns>A IOTypeEnum value</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.CIOAddress.Value">
      <summary> I/O value. For IOAddressSizeEnum.Bit, it has a value of 1 if Bit is ON, otherwise it has a value of zero or Bit is OFF. </summary>
      <returns>A System.Int64 value</returns>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CMachine">
      <summary> Class provides general machine information. </summary>
      <remarks> This class is the main class that provides access points to machine data. The Init method must be called before accessing to any other machine data.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.CMachine">
      <summary> Create an instance of CMachine class.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.#ctor(System.String)">
      <summary> Create an instance of CMachine class. In addition to library name, the provided logging name will be used for logging all function calls </summary>
      <param name="strLoggingName">Logging name to be used in Logging Service. Note: Only the first provided logging name is stored</param>
      <remarks> Only the first instance of this class created with a logging name will be used otherwise, the default logging name will be used.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
      <summary> Sets current data unit for this class instance. </summary>
      <example> This sample code shows how to call the SetDataUnit() method. <para> Dim objaxis As new CAxis </para> <para> Try </para> <para> objaxis.SetDataUnit(Me.axisDataUnit.SelectedValue) </para> <para> refresh_axis_tab() </para> <para> Catch ae As ApplicationException </para> <para> doError("CAxis", ae.Message) </para> <para> Catch ex As Exception </para> <para> doError("CAxis", ex.Message) </para> <para> End Try </para> </example>
      <param name="enDataUnit">Data Unit to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If applicable, this setting is applied to data in this class instance only, not for NC Data Unit. For linear axis position, data unit can be either mm or inch. For circular (rotary) axis position, data unit is in degree only. For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, then NC position will be converted to inch and vice versa. </remarks>
      <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. <para> <img src="ParametersScreen.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.Init">
      <summary> Initialize the library to communicate with machine sharing data. </summary>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <exception cref="CAPISpecException">Thrown when API Specification is not enabled on machine</exception>
      <remarks> <para> ***************************************************************************************************************************************************************************</para> <para> ***************************************************************************************************************************************************************************</para> This function must be called from the main thread of the application.  Subsequent calls from this class or others classes can be called from threads other than main thread. <para> ***************************************************************************************************************************************************************************</para> <para> ***************************************************************************************************************************************************************************</para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.Close">
      <summary> Close the communication with NC</summary>
      <remarks> Any subsequent call for NC data will fail after calling this method.</remarks>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetOperationUnitSystemDisplay">
      <summary> Gets the current setting of machine data unit </summary>
      <example> This sample code shows how to use the GetOperationUnitSystemDisplay() method. <para>Dim objMachine As CMDATAPILib.CMachine </para> <para>	Try </para> <para>		Me.machineExecutionMode.Text = System.Enum.GetNames(GetType(ExecutionModeEnum)).GetValue(objMachine.GetExecutionMode) </para> <para>      Me.machineOperationMode.Text = System.Enum.GetNames(GetType(OperationModeEnum)).GetValue(objMachine.GetOperationMode) </para> <para>      Me.machineUnitSytem.Text = objMachine.GetOperationUnitSystemDisplay </para> <para>	Catch ae As ApplicationException </para> <para>		doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>		doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <returns> A System.Int32 value. <para> <list type="table"> <listheader> <term>Preset value</term> <description>Operation unit system</description> </listheader> <item> <term>0</term> <description>1mm</description> </item> <item> <term>1</term> <description>0.01mm</description> </item> <item> <term>2</term> <description>0.001mm</description> </item> <item> <term>3</term> <description>0.0001mm</description> </item> <item> <term>4</term> <description>1inch</description> </item> <item> <term>5</term> <description>0.0001inch</description> </item> <item> <term>6</term> <description>0.00001inch</description> </item> </list> </para> </returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - NC OPTIONAL PARAMETER - INPUT UNIT SYSTEM - DATA SET UNIT/LENGTH UNIT SYSTEM - Current setting of data unit on NC: mm/inch <para> <img src="Parameter.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetPanelMode">
      <summary> Gets current machine panel mode. </summary>
      <example> This sample code shows how to use the GetPanelMode() method. <para>	Dim objMachine As CMDATAPILib.CMachine </para> <para>	Try </para> <para>	    Me.machineOperationMode.Text = System.Enum.GetNames(GetType(PanelModeEnum)).GetValue(objMachine.GetPanelMode) </para> <para>	Catch ae As ApplicationException </para> <para>    doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	  doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.PanelModeEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetOperationMode">
      <summary> Gets current machine operation mode. </summary>
      <example> This sample code shows how to use the GetOperationMode() method. <para>Dim objMachine As CMDATAPILib.CMachine </para> <para>	Try </para> <para>	    Me.machineOperationMode.Text = System.Enum.GetNames(GetType(OperationModeEnum)).GetValue(objMachine.GetOperationMode) </para> <para>	Catch ae As ApplicationException </para> <para>	    doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	    doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.OperationModeEnum enumeration value</returns>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetExecutionMode">
      <summary> Gets machine execution mode. It is considered running if it is currently executing a block of code either in Auto or MDI mode. </summary>
      <example> This sample code shows how to use the GetExecutionMode() method. <para>Dim objMachine As CMDATAPILib.CMachine  </para> <para>	Try </para> <para>	    Me.machineExecutionMode.Text = System.Enum.GetNames(GetType(ExecutionModeEnum)).GetValue(objMachine.GetExecutionMode) </para> <para>	Catch ae As ApplicationException </para> <para>	    doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	    doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.ExecutionModeEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetPowerOnTime">
      <summary> Gets the time since machine power is on. </summary>
      <example> This sample code shows how to use the GetPowerOnTime() method. <para>	Dim objMachine As CMDATAPILib.CMachine </para> <para>	Try </para> <para>		Me.machineExecutionMode.Text = System.Enum.GetNames(GetType(ExecutionModeEnum)).GetValue(objMachine.GetExecutionMode) </para> <para>      Me.machineOperationMode.Text = System.Enum.GetNames(GetType(OperationModeEnum)).GetValue(objMachine.GetOperationMode) </para> <para>      Me.machinePowerOnTime.Text = objMachine.GetPowerOnTime </para> <para>	Catch ae As ApplicationException </para> <para>		doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para> 		doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>A System.Int32 value that represents time since machine is powered on</returns>
      <DataUnit> Unit is in second </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
      <Figure> NC OPR MONITOR (2/2) - Power ON Time Count <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetPowerOnTime(System.Int32)">
      <summary> Sets power on time count value </summary>
      <example> This sample code shows how to use the SetPowerOnTime() method. <para>	Dim objMachine As CMDATAPILib.CMachine </para> <para>	Try </para> <para>			objMachine.SetPowerOnTime(CInt(Me.machinePowerOnTimeUpdate.Text)) </para> <para>	Catch ae As ApplicationException </para> <para>			doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>			doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <param name="intValue">time value to be set</param>
      <DataUnit> Unit is in second </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> NC OPR MONITOR (2/2) - Power ON Time Count <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddPowerOnTime(System.Int32)">
      <summary> Set the time since machine power is on by adding the input value to the existing data. </summary>
      <example> This sample code shows how to use the AddPowerOnTime() method. <para>	Dim objMachine As CMDATAPILib.CMachine  </para> <para>	Try </para> <para>	    objMachine.AddPowerOnTime(CInt(Me.machinePowerOnTimeUpdate.Text)) </para> <para>	    updateMachineTab() </para> <para>	Catch ae As ApplicationException </para> <para>	    doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	    doError("CMachine:", ex.Message) </para> <para>	End Try  </para> </example>
      <param name="intValue">time value to be added</param>
      <DataUnit> Unit is second </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> NC OPR MONITOR (2/2) - Power ON Time Count <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets machine zero offset at the specified axis index </summary>
      <param name="enAxisIndex">Axis index</param>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <returns>A System.Double value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE) <para> <img src="MC.Parameter.SystemParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Set machine zero offset at the specified axis index </summary>
      <param name="enAxisIndex">Axis index</param>
      <param name="dblValue">Setting value</param>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE) <para> <img src="MC.Parameter.SystemParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Set machine zero offset data by adding the input value to the existing data at the specified axis index. </summary>
      <param name="enAxisIndex">Axis index</param>
      <param name="dblValue">Value to be added to the current machine zero offset value</param>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE) <para> <img src="MC.Parameter.SystemParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.CalZeroOffset(Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Determined machine zero offset data at the specified axis index so that the input value is taken as the actual position data </summary>
      <param name="enAxisIndex">Axis index</param>
      <param name="dblValue">Actual Position data to be calculated from</param>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <Figure> PARAMETER - SYSTEM PARAMETER - ZERO OFFSET (MACHINE) <para> <img src="MC.Parameter.SystemParameter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetCurrentAlarm">
      <summary> Gets current OSP alarm. </summary>
      <example> This example shows how to call GetCurrentAlarm method . <para>	Dim objCurrentAlarm as CCurrentAlarm </para> <para>	objCurrentAlarm = objMachine.GetCurrentAlarm()	</para> </example>
      <returns>An Okuma.CMDATAPI.DataAPI.CCurrentAlarm object.  If there is no alarm in the system, alarm properties will be set to 0 and empty string.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> ********************* This function cannot be supported in OSP-P100 II machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetCurrentAlarmMessage">
      <summary> Gets current OSP alarm message. </summary>
      <example> This example shows how to call GetCurrentAlarmMessage method . <para>	Dim strValue As String </para> <para>	strValue = objMachine.GetCurrentAlarmMessage()	</para> </example>
      <returns>A System.String.  If there is no alarm in the system,an empty string will be returned.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> <img src="MC.CurrentAlarmMessage.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.IsNCReset">
      <summary> Gets NC reset status. <para> Note: Once NC reset button is pressed while part program is running the NC Reset signal is ON and stays in this state for about 500ms. </para> </summary>
      <example> This sample code shows how to use the IsNCReset() method. <para>Dim objMachine As CMDATAPILib.CMachine  </para> <para>Dim blnNCResetStatus As Boolean </para> <para>	Try </para> <para>	    blnNCResetStatus = objMachine.IsNCReset() </para> <para>	Catch ae As ApplicationException </para> <para>	    doError("CMachine:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	    doError("CMachine:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>A Boolean value.  NC is reset if the return value is true, otherwise it is not.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
      <remarks> <para> ********************* This function cannot be supported in OSP-P100 II machines. ************************ </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetNCStatus(Okuma.CMDATAPI.Enumerations.NCStatusEnum)">
      <summary> Gets current state of the specified NC status for current subsystem </summary>
      <example> This example shows how to call GetNCStatus method . <para>	Dim enNCStatus as NCStatusEnum </para> <para>	Dim enValue as OnOffStateEnum </para> <para>	enValue = objMachine.GetNCStatus(enNCStatus)	</para> </example>
      <returns>An Okuma.CLDATAPI.Enumerations.OnOffStateEnum object.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetHourMeterCount(Okuma.CMDATAPI.Enumerations.HourMeterEnum)">
      <summary> Gets hour meter count for the specified type </summary>
      <example> This example shows how to call GetHourMeterCount() method . <para>	Dim intValue as Int32 </para> <para>	Dim enValue as HourMeterEnum </para> <para>	intValue = objMachine.GetHourMeterCount(HourMeterEnum enValue) </para> </example>
      <param name="enValue">Hour meter type</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Second </DataUnit>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC operation monitor specification NC spec [19,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (2/2) - COUNT/SET <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetHourMeterCount(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
      <summary> Sets hour meter count for the specified type </summary>
      <example> This example shows how to call SetHourMeterCount() method . <para>	Dim intValue as Int32 </para> <para>	Dim enValue as HourMeterEnum </para> <para>	objMachine.SetHourMeterCount(enValue, intValue) </para> </example>
      <param name="enValue">Hour meter type</param>
      <param name="intValue">Value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Second </DataUnit>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC operation monitor specification NC spec [19,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (2/2) - COUNT/SET <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddHourMeterCount(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
      <summary> Sets hour meter count by adding the input value to the existing data </summary>
      <example> This example shows how to call AddHourMeterCount() method . <para>	Dim intValue as Int32 </para> <para>	Dim enValue as HourMeterEnum </para> <para>	objMachine.AddHourMeterCount(enValue, intValue) </para> </example>
      <param name="enValue">Hour meter type</param>
      <param name="intValue">Value to be added</param>
      <DataUnit> Second </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC operation monitor specification NC spec [19,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (2/2) - COUNT/SET <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.GetHourMeterSet(Okuma.CMDATAPI.Enumerations.HourMeterEnum)">
      <summary> Gets hour meter set for the specified type </summary>
      <example> This example shows how to call GetHourMeterSet() method . <para>	Dim intValue as Int32 </para> <para>	Dim enValue as HourMeterEnum </para> <para>	intValue = objMachine.GetHourMeterSet(HourMeterEnum enValue) </para> </example>
      <param name="enValue">Hour meter type</param>
      <returns>A System.Int32 value.</returns>
      <DataUnit> Second </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Second </DataUnit>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC operation monitor specification NC spec [19,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (2/2) - COUNT/SET <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.SetHourMeterSet(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
      <summary> Sets hour meter set for the specified type and current subsystem </summary>
      <example> This example shows how to call SetHourMeterCount() method . <para>	Dim intValue as Int32 </para> <para>	Dim enValue as HourMeterEnum </para> <para>	objMachine.SetHourMeterSet(enValue, intValue) </para> </example>
      <param name="enValue">Hour meter type</param>
      <param name="intValue">Value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Second </DataUnit>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC operation monitor specification NC spec [19,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (2/2) - COUNT/SET <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMachine.AddHourMeterSet(Okuma.CMDATAPI.Enumerations.HourMeterEnum,System.Int32)">
      <summary> Sets hour meter set by adding the input value to the existing data for current sub system. </summary>
      <example> This example shows how to call AddHourMeterSet() method . <para>	Dim intValue as Int32 </para> <para>	Dim enValue as HourMeterEnum </para> <para>	objMachine.AddHourMeterSet(enValue, intValue) </para> </example>
      <param name="enValue">Hour meter type</param>
      <param name="intValue">Value to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Second </DataUnit>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC operation monitor specification NC spec [19,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (2/2) - COUNT/SET <para> <img src="NC-OPR-MONITOR-PAGE2.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CMachining">
      <summary> Class represents a machining report data.  </summary>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.NumberOfWork">
      <summary>Gets processing track record - Number of work.  Sets processing track record - Number of work for this class instance only</summary>
      <returns>A System.Int64 value.</returns>
      <DataUnit> Unit  </DataUnit>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.RunningTime">
      <summary> Gets processing track record - Running time.  Sets processing track record - Running Time for this class instance only. Data unit is second. </summary>
      <returns>A System.Int64 value.</returns>
      <DataUnit> Second  </DataUnit>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.OperatingTime">
      <summary> Gets processing track record - Operating time.  Sets processing track record - Operating Time for this class instance only. </summary>
      <returns>A System.Int64 value.</returns>
      <DataUnit> Seconds  </DataUnit>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.CuttingTime">
      <summary> Gets processing track record - Cutting time.  Sets processing track record - Cutting Time for this class instance only.  Data unit is second. </summary>
      <returns>A System.Int64 value.</returns>
      <DataUnit> Second  </DataUnit>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.MainProgramFileName">
      <summary> Gets processing track record - Main program file name.  Sets processing track record - Main program file name for this class instance only. </summary>
      <returns>A System.String value</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.MainProgramName">
      <summary> Gets processing track record - Main program name.  Sets processing track record - Main program name for this class instance only. </summary>
      <returns>A System.String value</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.StartDate">
      <summary> Gets processing track record - Start Date.  Sets processing track record - Start Date for this class instance only.  Data is in "yyyy/mm/dd" format. </summary>
      <returns>A System.String value in this format "yyyy/mm/dd"</returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.CMachining.StartTime">
      <summary> Gets processing track record - Start Time. Sets processing track record - Start Time for this class instance only.  Data is in "hh:mm:ss" format. </summary>
      <returns>A System.Int32 value in this format "hh:mm:ss"</returns>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport">
      <summary> Class provides machining reports information stored by NC.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMaxCount(Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
      <summary> Gets maximum number of machining report that can stored by the system. </summary>
      <example> This sample code shows how to call the GetMaxCount() method. <para>On Error GoTo sd </para> <para>		Dim objMeh As MacMan.CMachiningReport </para> <para>		Dim Mac_reportObject As MacMan.CMachining </para> <para>		opIndex = CInt(Me.MacReport_Index.Text) </para> <para>		int_PeriodReport = CInt(Me.Cmb_rptPeriod.SelectedItem) </para> <para>		Mac_reportObject = objMeh.GetMachiningReport(opIndex,int_PeriodReport) </para> <para>		Me.macreport_maxcount.Text = 	objMeh.GetMaxCount (int_PeriodReport) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("MacMan Machining  Report", Err.Description) </para> <para>     Resume Next </para> </example>
      <param name="enReportPeriod">Values for this parameter come from the  Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.</param>
      <returns>A System.Int32 value that represents the maximum number of machining report</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetCount(Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
      <summary> Gets number of machining report available </summary>
      <example> This sample code shows how to call the GetCount() method. <para>On Error GoTo sd </para> <para>		Dim objMeh As MacMan.CMachiningReport </para> <para>		Dim Mac_reportObject As MacMan.CMachining </para> <para>		opIndex = CInt(Me.MacReport_Index.Text) </para> <para>		int_PeriodReport = CInt(Me.Cmb_rptPeriod.SelectedItem) </para> <para>		Mac_reportObject = objMeh.GetMachiningReport(opIndex, int_PeriodReport) </para> <para>		Me.MacReport_count.Text = objMeh.GetCount(int_PeriodReport)	</para> <para>		Exit Sub </para> <para>sd: </para> <para>    doError("MacMan Machining  Report", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="enReportPeriod">A report period index.  Values for this parameter come from the Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.</param>
      <returns>A System.Int32 value that represents the number of machining report available</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMachiningReport(System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
      <summary> Gets the Machining report data at the specified report index, and report period type. </summary>
      <example> This sample code shows how to call the GetMachiningReport() method. <para>	Dim Mac_reportObject As MacMan.CMachining </para> <para>	Dim int_PeriodReport As Int32 </para> <para>	Dim opIndex As Int16 </para> <para>	Dim Mac_reportObjects As ArrayList </para> <para>	Try </para> <para>		Me.txtmecreport_result.Text = "" </para> <para>	    int_PeriodReport = CInt(Me.Cmb_rptPeriod.SelectedItem) </para> <para>	    opIndex = CInt(Me.MacReport_Index.Text) </para> <para>	    Mac_reportObject = objMeh.GetMachiningReport(opIndex,int_PeriodReport) </para> <para>	    For Each Mac_reportObject In Mac_reportObjects </para> <para>            Me.mohResults.Text += Mac_reportObject.StartDate &amp; vbTab &amp; Mac_reportObject.NumberOfWork &amp; vbTab &amp; Mac_reportObject.StartTime &amp; vbCrLf </para> <para>	    Next </para> <para>	Catch ae As ApplicationException </para> <para>	    doError("CMachiningReport", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	    doError("CMachiningReport", ex.Message) </para> <para>	End Try </para> </example>
      <param name="intIndex">Machining report index</param>
      <param name="enReportPeriod">Type of report to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
      <returns>An Okuma.CMDATAPI.DataAPI.CMachining object that represents the machining report data.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006 <para> <img src="MacMan-MachiningReport.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.CMachiningReport.GetMachiningReports(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.ReportPeriodEnum)">
      <summary> Gets the Machining report data at the specified report indexes, and report period type. </summary>
      <example> This sample code shows how to call the GetMachiningReports() method. <para>	Dim Mac_reportObject As MacMan.CMachining </para> <para>	Dim int_PeriodReport As Int32 </para> <para>	Dim opIndex As Int16 </para> <para>	Dim Mac_reportObjects As ArrayList </para> <para>	Try </para> <para>    Me.txtmecreport_result.Text = "" </para> <para>    int_PeriodReport = CInt(Me.Cmb_rptPeriod.SelectedItem) </para> <para>    opIndex = CInt(Me.MacReport_Index.Text) </para> <para>    Mac_reportObject = objMeh.GetMachiningReport(opIndex, int_PeriodReport) </para> <para>    Mac_reportObjects = objMeh.GetMachiningReports(CInt(txt_from.Text),CInt(txt_to.Text), int_PeriodReport) </para> <para>    For Each Mac_reportObject In Mac_reportObjects </para> <para>        Me.mohResults.Text += Mac_reportObject.StartDate &amp; vbTab &amp; Mac_reportObject.NumberOfWork &amp; Mac_reportObject.NumberOfWork &amp; vbTab &amp; Mac_reportObject.RunningTime &amp; Mac_reportObject.OperatingTime &amp; Mac_reportObject.CuttingTime &amp; Mac_reportObject.MainProgramFileName &amp;  </para> <para>		  Mac_reportObject.MainProgramName &amp; vbCrLf </para> <para>    Next </para> <para>	Catch ae As ApplicationException </para> <para>    doError("CWorkpiece", ae.Message) </para> <para>	Catch ex As Exception </para> <para>    doError("CWorkpiece", ex.Message) </para> <para>	End Try </para> </example>
      <param name="intFromIndex">Starting machining report index</param>
      <param name="intToIndex">Ending machining report index</param>
      <param name="enReportPeriod">Type of report to be retreived.  Values of parameter come from Okuma.CMDATAPI.Enumerations.ReportPeriodEnum enumeration.</param>
      <returns>An System.Collections.ArrarList object that represents list of machining report data  if possible.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> MACHINING REPORT: DAILY(TODAY) 2006/10/25 - Machining report for today on October 25, 2006 <para> <img src="MacMan-MachiningReport.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CMOPTool">
      <summary> Class provides information about MOP Tool data. </summary>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>MOP-TOOL specification</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetToolDataInputMode">
      <summary> Gets the current setting of MOP Tool Data input mode: Relative or Absolute mode </summary>
      <example> This sample shows how to call the GetToolDataInputMode() method. <para>On Error GoTo sd </para> <para>    Me.mopToolDataInputMode.Text = System.Enum.GetNames(GetType(MOPToolInputModeEnum)).GetValue(objCMOP.GetToolDataInputMode) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING MODE SELECT PARAMETER - TOOL DATA INPUT - ABSOLUTE/RELATIVE <para> <img src="MC.MOP.PARAMETER.MODESELECT.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines whether the threshold levels (AL.V,LIMIT,LL,UL), set in the tool data, are input as a relative value (percentage) in reference to the reference value or as an absolute value.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetToolDataInputMode(Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Sets the Tool Data Input mode </summary>
      <example> This sample shows how to call the SetToolDataInputMode() method. <para>Try </para> <para>    objCMOP.SetToolDataInputMode(CInt(Me.mopPositionTypeCombo.SelectedValue)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enValue">Value to be set for tool data input mode.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING MODE SELECT PARAMETER - TOOL DATA INPUT - ABSOLUTE/RELATIVE <para> <img src="MC.MOP.PARAMETER.MODESELECT.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines whether the threshold levels (AL.V,LIMIT,LL,UL), set in the tool data, are input as a relative value (percentage) in reference to the reference value or as an absolute value.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetMaxMOPToolData">
      <summary> Gets number of MOP tool data configured for this system </summary>
      <example> This sample shows how to call the GetMaxMOPToolData() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curAxisEnum As AxisIndexEnum </para> <para>    Dim posTypeEnum As MOPToolInputModeEnum </para> <para>	   curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>    posTypeEnum = System.Enum.GetValues(GetType(MOPToolInputModeEnum)).GetValue(Me.mopPositionTypeCombo.SelectedValue) </para> <para>    Me.TXT_GetMaxMOPToolData.Text = CInt(objCMOP.GetMaxMOPToolData)  </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <returns>A System.Int32 value that represents number of MOP Tool data</returns>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetToolDataNumber(System.Int32,System.Int32)">
      <summary> Gets MOP tool data number associated with the tool number and its class number. </summary>
      <example> This sample shows how to call the GetToolDataNumber() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curClassNo As Integer </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    curClassNo = CInt(Me.classNo.Text) </para> <para>    Me.mopToolDataNumber.Text = objCMOP.GetToolDataNumber(curMopTool, curClassNo) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> <para>End Sub </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="intClassNo">Class number</param>
      <returns>A System.Int32 value that represents the MOP Tool data number.  It returns zero if there no MOP Tool data number for the tool and class number.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING ENTRY TOOL LIST <para> MOP Tool data number for tool number 50 and its classification 0 is 4. <img src="MopTool.ToolDataSettinglist.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The MOP Tool data number is assigned automatically at the time the tool and its associated class number is created. The MOP Tool data number associated with a tool number and class number can be changed when one of the MOP Tool data numbers in the table is deleted or a new MOP Tool data number is added to the table. <para> The following specifications must be met for valid tool number: <list type="table"> <listheader> <term>Specification</term> <description>Number of Tools</description> </listheader> <item> <term>Tool Data Sets 999 specification</term> <description>1-999</description> </item> <item> <term>Tool Data Sets 300 specification</term> <description>1-300</description> </item> <item> <term>Tool Data Sets 200 specification</term> <description>1-200</description> </item> <item> <term>Tool Data Sets 100 specification</term> <description>1-100</description> </item> </list> </para> </para> <para> Note: It is possible to input from 1 to 999 as tool number, but the tool data of tool number more than 300 is ignored.  Therefore, this function will fail to obtain tool data number for any tool greater than 300 even it can be registered in the MOP Tool table. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetMaxOverride(System.Int32)">
      <summary> Gets the maximum override value for the given MOP Tool data number. This number determines the upper limit level of the override in the adaptive control. </summary>
      <example> This sample shows how to call the GetMaxOverride() method. <para>On Error GoTo sd </para> <para>		Dim objCMOP As new CMOPTool </para> <para>		Dim curMopTool As Integer </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopMaxOverride.Text = objCMOP.GetMaxOverride(curMopTool) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="intToolDataNo">the MOP Tool data number</param>
      <returns>A System.Int32 value that represent the percentage of override.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MAX. OVERRIDE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetMaxOverride(System.Int32,System.Int32)">
      <summary> Sets the maximum override value for a given MOP-Tool data </summary>
      <example> This sample shows how to call the SetMaxOverride() method. <para>Try </para> <para>    objCMOP.SetMaxOverride(CInt(Me.mopToolNumber.Text), CInt(Me.mopSetMaxOverride.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolDataNo">MOP Tool data number</param>
      <param name="intValue"> Max override value to be set <para>Setting range: Minimum override value to 200%</para> </param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MAX. OVERRIDE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines the lower limit level of the override in the adaptive control. <para> The setting of Max, Min, and air-cut override items are common data for all load data. Therefore, changing the setting for them at any page, the change is reflected to all pages. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetMinOverride(System.Int32)">
      <summary> Gets the minimum override value for the given MOP Tool data number. This number determines the lower limit level of the override in the adaptive control. </summary>
      <example> This sample shows how to call the GetMinOverride() method. <para>On Error GoTo sd </para> <para>		Dim objCMOP As new CMOPTool </para> <para>		Dim curMopTool As Integer </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopMinOverride.Text = objCMOP.GetMinOverride(curMopTool) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="intToolDataNo">the MOP Tool data number</param>
      <returns>A System.Int32 value that represent the percentage of override.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MIN. OVERRIDE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetMinOverride(System.Int32,System.Int32)">
      <summary> Sets the minimum override value for a given MOP-Tool data </summary>
      <example> This sample shows how to call the SetMinOverride() method. <para>Try </para> <para>    objCMOP.SetMinOverride(CInt(Me.mopToolNumber.Text), CInt(Me.mopSetMinOverride.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolDataNo">MOP Tool data number</param>
      <param name="intValue"> Min. override value to be set <para>Setting range: 1 to 200%</para> </param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - MIN. OVERRIDE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines the lower limit level of the override in the adaptive control. <para> The setting of Max, Min, and air-cut override items are common data for all load data. Therefore, changing the setting for them at any page, the change is reflected to all pages. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAirCutOverride(System.Int32)">
      <summary> Gets the air-cut override value for the given MOP Tool data number. This number determines the air-cut override value of the air-cut time reduction function. </summary>
      <example> This sample shows how to call the GetAirCutOverride() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    Me.mopAircutOverride.Text = objCMOP.GetAirCutOverride(curMopTool) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="intToolDataNo">the MOP Tool data number</param>
      <returns>A System.Int32 value that represent the percentage of override.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT OVERRIDE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAirCutOverride(System.Int32,System.Int32)">
      <summary> Sets the air-cut override value for a given MOP-Tool data </summary>
      <example> This sample shows how to call the SetAirCutOverride() method. <para>Try </para> <para>    objCMOP.SetAirCutOverride(CInt(Me.mopToolNumber.Text), CInt(Me.mopSetAircutOverride.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolDataNo">MOP Tool data number</param>
      <param name="intValue"> Air-Cut override value to be set <para>Setting range: 1 to 200%</para> </param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT OVERRIDE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines the air-cut override value of the air-cut time reduction function. <para> The setting of Max, Min, and air-cut override items are common data for all load data. Therefore, changing the setting for them at any page, the change is reflected to all pages. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetCuttingTime(System.Int32)">
      <summary> Gets the cutting time for the given MOP Tool data number. Cutting Time indicates the total time in which measured value has been higher than the AIR-CUT LEVEL value. </summary>
      <example> This sample shows how to call the GetCuttingTime() method. <para>		Dim objCMOP As new CMOPTool </para> <para>	    Dim curMopTool As Integer </para> <para>	    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>	    Me.mopCuttingTime.Text = objCMOP.GetCuttingTime(curMopTool) </para> <para>	    Exit Sub </para> </example>
      <param name="intToolDataNo">MOP Tool data number</param>
      <returns>A System.Int32 value that represents the Cutting Time.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Unit is in second. </DataUnit>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING ENTRY TOOL LIST - CUTTING TIME <para> Cutting time for MOP Tool data number 1 (Tool number 40-0) is 1 second. <img src="MopTool.ToolDataSettinglist.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetCuttingTime(System.Int32,System.Int32)">
      <summary> Sets the Cutting Time value for a given MOP-Tool data </summary>
      <example> This sample shows how to call the SetCuttingTime() method. <para>Try </para> <para>    objCMOP.SetCuttingTime(CInt(Me.mopToolNumber.Text), CDbl(Me.mopSetCuttingTime.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolDataNo">MOP Tool data number</param>
      <param name="intValue"> Cutting Time value to be set <para>Setting range: 0 - 3599999 seconds</para> </param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Unit is in second. </DataUnit>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING ENTRY TOOL LIST - CUTTING TIME <para> Cutting time for MOP Tool data number 1 (Tool number 40-0) is 1 second. <img src="MopTool.ToolDataSettinglist.jpg" /> </para> </Figure>
      <remarks> CUTTING TIME indicates the total time in which measured value has been higher than the AIR-CUT LEVEL value.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetALVValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Gets the AL.V value for the given MOP Tool data, axis index in relative or aboslute value. </summary>
      <example> This sample shows how to call the GetALVValue() method. <para>On Error GoTo sd </para> <para>    Dim objCMOP As new CMOPTool </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curAxisEnum As AxisIndexEnum </para> <para>    Dim posTypeEnum As MOPToolInputModeEnum </para> <para>    curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>    posTypeEnum = System.Enum.GetValues(GetType(MOPToolInputModeEnum)).GetValue(Me.mopPositionTypeCombo.SelectedValue) </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    Me.mopALVValue.Text = objCMOP.GetALVValue(curAxisEnum, curMopTool, posTypeEnum) </para> <para>	  Exit Sub </para> <para>sd: </para> <para>	  doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool data number</param>
      <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
      <returns>A System.Double value that represents the AL.V value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AL.V <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <remarks> This is the threshold level used by the overload monitoring function for determining the tool wear status to give the tool wear alarm. The setting is made in percentage to the reference value; measured value is taken as the reference value.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetALVValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Sets the AL.V value for the given MOP Tool Data number, axis index, and tool data input mode. </summary>
      <example> This sample shows how to call the SetALVValue() method. <para>Try </para> <para>		objCMOP.SetALVValue(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CDbl(Me.mopSetALVValue.Text), CInt(Me.mopPositionTypeCombo.SelectedValue)) </para> <para>		mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>		doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="dblValue"> AL.V value to be set. Setting range: 1 to 200% (relative value [%]) 0.001 to 99999.999 (measured value) </param>
      <param name="enValue"> Mode at which AL.V value sets to </param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AL.V <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the threshold level used by the overload monitoring function for determining the tool wear status to give the tool wear alarm. The setting is made in either the measured value or percentage to the reference value. <para> Notes: Setting of REF, Limit, AL.V, UL, and LL are all related to each other. Changing the value of one of these settings might cause an invalid setting in other settings. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetLimitValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Gets the Limit value for the given MOP Tool data, axis index in relative or aboslute value. </summary>
      <example> This sample shows how to call the GetLimitValue() method. <para>On Error GoTo sd </para> <para>		Dim objCMOP As new CMOPTool </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para> 		Dim posTypeEnum As MOPToolInputModeEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		posTypeEnum = System.Enum.GetValues(GetType(MOPToolInputModeEnum)).GetValue(Me.mopPositionTypeCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para> 		Me.mopLimitValue.Text = objCMOP.GetLimitValue(curAxisEnum, curMopTool, posTypeEnum) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool data number</param>
      <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
      <returns>A System.Double value that represents the Limit value.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LIMIT <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the threshold level used by the overload monitoring function for determining the overload status to give the overload alarm. The setting is made in either the measured value or percentage to the reference value.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetLimitValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Sets the Limit value for the given MOP Tool Data number, axis index, and tool data input mode. </summary>
      <example> This sample shows how to call the SetLimitValue() method. <para>Try </para> <para>    objCMOP.SetLimitValue(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CDbl(Me.mopSetLimitValue.Text), CInt(Me.mopPositionTypeCombo.SelectedValue)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="dblValue">Limit value to be set. Setting range: 1 to 200% (relative value [%]) 0.001 to 99999.999 (measured value) </param>
      <param name="enValue">Mode at which Limit value sets to</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LIMIT <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the threshold level used by the overload monitoring function for determining the overload status to give the overload alarm. The setting is made in either the measured value or percentage to the reference value. <para> Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other. Changing the value of one of these settings might cause an invalid setting in other settings. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetULValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Gets the Upper Limit value for the given MOP Tool data, axis index in relative or aboslute value. </summary>
      <example> This sample shows how to call the GetULValue() method. <para>On Error GoTo sd </para> <para>        Dim curMopTool As Integer </para> <para>        Dim curAxisEnum As AxisIndexEnum </para> <para>        Dim posTypeEnum As MOPToolInputModeEnum </para> <para>        curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>        posTypeEnum = System.Enum.GetValues(GetType(MOPToolInputModeEnum)).GetValue(Me.mopPositionTypeCombo.SelectedValue) </para> <para>        Me.mopUlValue.Text = objCMOP.GetULValue(curAxisEnum, curMopTool, posTypeEnum) </para> <para>        Exit Sub </para> <para>sd: </para> <para>        doError("CMOP Tool", Err.Description) </para> <para>        Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool data number</param>
      <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
      <returns>A System.Double value that represents the Limit value.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - UL - Upper limit <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the upper limit level used by the adaptive control function. The setting is made in either the measure value or percentage to the reference value. The adaptive control function controls the feed override values so that the load signal always lies between the upper and lower limits.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetULValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Sets the Upper Limit (UL) value for the given MOP Tool Data number, axis index, and tool data input mode. </summary>
      <example> This sample shows how to call the SetULValue() method. <para>Try </para> <para>    objCMOP.SetULValue(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CDbl(Me.mopSetULValue.Text), CInt(Me.mopPositionTypeCombo.SelectedValue)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="dblValue">UL value to be set. <para>Setting range:</para> <para>Lower limit of adaptive control to 200% (relative value [%])</para> <para>Lower limit of adaptive control to 99999.999 (measured value)</para> </param>
      <param name="enValue">Mode at which UL value sets to</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - UL - Upper limit <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the upper limit level used by the adaptive control function. The setting is made in either the measure value or percentage to the reference value. The adaptive control function controls the feed override values so that the load signal always lies between the upper and lower limits. <para> Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other. Changing the value of one of these settings might cause an invalid setting in other settings. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetLLValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Gets the Lower Limit value for the given MOP Tool data, axis index in relative or aboslute value. </summary>
      <example> This sample shows how to call the GetLLValue() method. <para>On Error GoTo sd </para> <para>		Dim objCMOP As new CMOPTool </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para>		Dim posTypeEnum As MOPToolInputModeEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		posTypeEnum = System.Enum.GetValues(GetType(MOPToolInputModeEnum)).GetValue(Me.mopPositionTypeCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopLLValue.Text = objCMOP.GetLLValue(curAxisEnum, curMopTool, posTypeEnum) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool data number</param>
      <param name="enValue">An absolute or relative mode that AL.V value to be retrieved.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum enumeration.</param>
      <returns>A System.Double value that represents the Limit value.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LL - Lower level limit <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the lower limit level used by the adaptive control function. The setting is made in either the measure value or percentage to the reference value. The adaptive control function controls the feed override values so that the load signal always lies between the upper and lower limits.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetLLValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double,Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum)">
      <summary> Sets the Lower Limit (LL) value for the given MOP Tool Data number, axis index, and tool data input mode. </summary>
      <example> This sample shows how to call the SetLLValue() method. <para>Try </para> <para>    objCMOP.SetLLValue(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CDbl(Me.mopSetLLValue.Text), CInt(Me.mopPositionTypeCombo.SelectedValue)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="dblValue"> LL value to be set. <para>Setting range:</para> <para>1% to Upper limit of adaptive control (relative value [%]</para> <para>0.001 to Upper limit of adaptive control (measured value)</para> </param>
      <param name="enValue">Mode at which UL value sets to</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - LL - Lower level limit <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This is the lower limit level used by the adaptive control function. The setting is made in either the measure value or percentage to the reference value. The adaptive control function controls the feed override values so that the load signal always lies between the upper and lower limits. <para> Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other. Changing the value of one of these settings might cause an invalid setting in other settings. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetReferenceValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Get the absolue value of Reference data for the selected axis index and MOP tool data number. </summary>
      <example> This sample shows how to call the GetReferenceValue() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curAxisEnum As AxisIndexEnum </para> <para>    curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    Me.mopReferenceValue.Text = objCMOP.GetReferenceValue(curAxisEnum, curMopTool) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">MOP Tool data number</param>
      <returns>An System.Double value that represents the Reference (REF) value.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - REF. - Reference value <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the system.</exception>
      <remarks> This is the reference value when the tool data is set using a relative value. When the tool data is automatically set, the maximum load during automatic setting period is set as the REF.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetReferenceValue(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,System.Double)">
      <summary> Sets the Reference (REF) value for the given MOP-Tool data number, and axis index. </summary>
      <example> This sample shows how to call the SetReferenceValue() method. <para>Try </para> <para>    objCMOP.SetReferenceValue(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CDbl(Me.mopSetReferenceValue.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool data number</param>
      <param name="dblValue"> Reference value to be set.  Setting range: 0.001 to 99999.999. </param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - REF. - Reference value <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the system.</exception>
      <remarks> This is the reference value when the tool data is set using a relative value. When the tool data is automatically set, the maximum load during automatic setting period is set as the REF. <para> Notes: Setting of REF, AL.V, Limit, UL, and LL are all related to each other. Changing the value of one of these settings might cause an invalid setting in other settings. </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetOverloadMonitor(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Get the overload monitor function status. </summary>
      <example> This sample shows how to call the GetOverloadMonitor() method. <para>On Error GoTo sd </para> <para>		Dim objCMOP As new CMOPTool </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopOverloadMonitor.Text = objCMOP.GetOverloadMonitor(curAxisEnum, curMopTool) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - OVERLOAD MONITOR - ON/OFF <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines ON/OFF of the overload monitoring function. If "OFF" is set, the overload monitoring function is not executed.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetOverloadMonitor(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
      <summary> Sets the overload monitor function status. </summary>
      <example> This sample shows how to call the SetOverloadMonitor() method. <para>Try </para> <para>    objCMOP.SetOverloadMonitor(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CInt(Me.mopSetOverloadMonitor.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="enValue">overload status to be set</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - OVERLOAD MONITOR - ON/OFF <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines ON/OFF of the overload monitoring function. If "OFF" is set, the overload monitoring function is not executed.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAdaptiveControl(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Get the adaptive monitoring function status. </summary>
      <example> This sample shows how to call the GetAdaptiveControl() method. <para>On Error GoTo sd </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopAdaptiveControl.Text = objCMOP.GetAdaptiveControl(curAxisEnum, curMopTool) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - ADAPTIVE CONTROL - ON/OFF <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <remarks> This determines ON/OFF of the adaptive control monitoring function. If "OFF" is set, the adaptive control function is not executed. Note: The adaptive control uses one type of load signal for each tool data. Therefore, if the adaptive control setting is changed from OFF to ON, the load signal having been ON is automatically switched.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAdaptiveControl(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
      <summary> Sets adaptive control monitoring function status. </summary>
      <example> This sample shows how to call the SetAdaptiveControl() method. <para>On Error GoTo sd </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopAdaptiveControl.Text = objCMOP.GetAdaptiveControl(curAxisEnum, curMopTool) </para> <para>		Exit Sub </para> <para>sd: </para> <para> 	doError("CMOP Tool", Err.Description) </para> <para> 	Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="enValue">adaptive control status to be set</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - ADAPTIVE CONTROL - ON/OFF <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <remarks> This determines ON/OFF of the adaptive control monitoring function. If "OFF" is set, the adaptive control function is not executed. Note: The adaptive control uses one type of load signal for each tool data. Therefore, if the adaptive control setting is changed from OFF to ON, the load signal having been ON is automatically switched.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAirCutReduction(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Get the Air-Cut Reduction function status. </summary>
      <example> This sample shows how to call the GetAirCutReduction() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curAxisEnum As AxisIndexEnum </para> <para>    curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>    posTypeEnum = System.Enum.GetValues(GetType(MOPToolInputModeEnum)).GetValue(Me.mopPositionTypeCombo.SelectedValue) </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    Me.mopAircutReduction.Text = objCMOP.GetAirCutReduction(curAxisEnum, curMopTool) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT REDUCT - ON/OFF <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <remarks> This determines ON/OFF of the air-cut time reduction function. If "OFF" is set, the air-cut time reduction function is not executed.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAirCutReduction(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
      <summary> Sets air-cut reduction status for a given MOP tool number, and an axis number. </summary>
      <example> This sample shows how to call the SetAirCutReduction() method. <para>Try </para> <para>    objCMOP.SetAirCutOverride(CInt(Me.mopToolNumber.Text), CInt(Me.mopSetAircutOverride.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <param name="enValue">Air-cut reduction status to be set.  Values of parameter come from Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AIR-CUT- REDUCT <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <remarks> This determines ON/OFF of the air-cut time reduction function. If OFF is set, air-cut time reduction function is not executed independent of the setting for air-cut time reduction function by load data.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAutoChange(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Get the Auto Change monitoring function status. </summary>
      <example> This sample shows how to call the GetAutoChange() method. <para>On Error GoTo sd </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopAutoChange.Text = System.Enum.GetNames(GetType(OnOffEnum)).GetValue(objCMOP.GetAutoChange(curAxisEnum, curMopTool)) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AUTO-SET CHANGE - ON/OFF <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> This determines whether or not the parameters defined in Reference, AL.V, Limit, UL, LL, Max. Override, Min. Override, Air-Cut Override, Overload Moninotr, Adaptive Control, and Air-Cut Reduction function  should be changed in the automatic setting mode.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAutoChange(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffEnum)">
      <summary> Sets the Auto Change monitoring function status. </summary>
      <example> This sample shows how to call the SetAutoChange() method. <para>Try </para> <para>    objCMOP.SetAutoChange(CInt(Me.mopAxisCombo.SelectedValue), CInt(Me.mopToolNumber.Text), CInt(Me.mopSetAutoChange.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool data number</param>
      <param name="enValue">Value to be set</param>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - AUTO-SET CHANGE <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
      <remarks> This determines whether or not the parameters defined in Reference, AL.V, Limit, UL, LL, Max. Override, Min. Override, Air-Cut Override, Overload Moninotr, Adaptive Control, and Air-Cut Reduction function  should be changed in the automatic setting mode.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAlarm(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Gets the alarm status for the given MOP Tool Data number, and axis index </summary>
      <example> This sample shows how to call the GetAlarm() method. <para>On Error GoTo sd </para> <para>		Dim curMopTool As Integer </para> <para>		Dim curAxisEnum As AxisIndexEnum </para> <para>		curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>		curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>		Me.mopAlarms.Text = System.Enum.GetNames(GetType(MOPToolDataAlarm)).GetValue(objCMOP.GetAlarm(curAxisEnum, curMopTool)) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CMOP Tool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">MOP Tool data number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm enumeration that represents an alarm condition</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - ALARM <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetCuttingLoadAtAlarm(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Gets the Cutting load at the time the alarm occurs for the specified axis index, and MOP Tool data number. </summary>
      <example> This sample shows how to call the GetCuttingLoadAtAlarm() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curAxisEnum As AxisIndexEnum </para> <para>    curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    Me.mopCuttingLoad.Text = objCMOP.GetCuttingLoadAtAlarm(curAxisEnum, curMopTool) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">MOP Tool data number</param>
      <returns>A System.Double value that represents the cutting load.</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - 1/ Cutting load at the time of alarm generating <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetSignalDifferentAtAlarm(Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum,System.Int32)">
      <summary> Gets the amount of change at the time of unusual signal alarm for the specified axis index, and MOP Tool data number. </summary>
      <example> This sample shows how to call the GetSignalDifferentAtAlarm() method. <para>On Error GoTo sd </para> <para>    Dim curMopTool As Integer </para> <para>    Dim curAxisEnum As AxisIndexEnum </para> <para>    curAxisEnum = System.Enum.GetValues(GetType(MOPToolAxisEnum)).GetValue(Me.mopAxisCombo.SelectedValue) </para> <para>    curMopTool = CInt(Me.mopToolNumber.Text) </para> <para>    Me.mopSignalDiffAlarm.Text = objCMOP.GetSignalDifferentAtAlarm(curAxisEnum, curMopTool) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="enAxisIndex">An axis number.  Values of parameter come from Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum enumeration.</param>
      <param name="intToolDataNo">The MOP Tool Data number</param>
      <returns>A System.Double values that reppresents alarm data</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - TOOL DATA SETTING - 2/  Amount of change at the time of unusual signal alarm <para> <img src="MOPTOOL.TOOLDATASETTING.P1.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.GetAmountUnsualSignalChange(System.Int32)">
      <summary> Gets the amount of unsual signal change in the MOP tool data setup table for a given MOP Tool Load Data number. </summary>
      <example> This sample shows how to call the GetAmountUnsualSignalChange() method. <para>On Error GoTo sd </para> <para>    Dim intLoadDataNo As Integer </para> <para>    Me.mopUnusualSignal.Text = objCMOP.GetAmountUnsualSignalChange(intLoadDataNo) </para> <para>    Exit Sub </para> <para>sd: </para> <para>    doError("CMOP Tool", Err.Description) </para> <para>    Resume Next </para> </example>
      <param name="intLoadDataNo">Load data number.  It is ranging from 1 to 16.</param>
      <returns>A System.Int32 value</returns>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING LOAD M PARAMETER - ABNORMAL-SIG. RATE <para> <img src="MC.MOP.PARAMETER.LOAD-M.jpg" /> </para> </Figure>
      <DataUnit>Percent</DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CMOPTool.SetAmountUnsualSignalChange(System.Int32,System.Double)">
      <summary> Sets the amount of unsual signal change in the MOP tool data setup table for a given MOP Tool Load Data number. </summary>
      <example> This sample shows how to call the SetAmountUnsualSignalChange() method. <para>Try </para> <para>    Dim intLoadDataNo as Integer</para> <para>    objCMOP.SetAmountUnsualSignalChange(intLoadDataNo, CDbl(Me.mopSetUnusualSignal.Text)) </para> <para>    mopUpdate() </para> <para>Catch ae As ApplicationException </para> <para>    doError("CMOP Tool", ae.Message) </para> <para>    Catch ex As Exception </para> <para>    doError("CMOP Tool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intLoadDataNo">a MOP Tool Load data number.  It is ranging from 1 to 16.</param>
      <param name="dblValue">Value to be set.  Setting range: 0.001 to 99999.999</param>
      <DataUnit>Percent</DataUnit>
      <Figure> AUTO OPERATION - MOP-TOOL MEASURED DISPLAY - PARAMETER SETTING LOAD M PARAMETER - ABNORMAL-SIG. RATE <para> <img src="MC.MOP.PARAMETER.LOAD-M.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write to system.</exception>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory">
      <summary> Class provides operating history information stored by NC.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.GetMaxCount">
      <summary> Gets maximum number of Operating history that can be stored by the system. </summary>
      <example> This sample shows how to call the GetMaxCount method. <para>Private Sub xyz </para> <para>		On Error GoTo sd </para> <para>		Dim objMoh As CMDATAPILib.MacMan.COperationHistory  </para> <para>		Dim opIndex As Int16 </para> <para>		opIndex = CInt(Me.mohOperationIndex.Text) </para> <para>		Me.mohOperationMaxCount.Text = objMoh.GetMaxCount </para> <para>		Exit Sub </para> <para>sd: </para> <para>     doError("MacMan Operating Report", Err.Description) </para> <para>    Resume Next </para> <para>End Sub </para> </example>
      <returns>A System.Int32 value that represents the maximum number of Operating history</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.GetTodayOperatingHistory(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
      <summary> Gets today operating history for the specified report data at the specified indexes. </summary>
      <example> This sample shows how to call the GetTodayOperatingHistory method. <para>Dim objMopnh As MacMan.COperatingHistory </para> <para>Dim rp As Int32() </para> <para>Me.mopnhAlarmOnTime.Text = objMopnh.GetTodayOperatingHistory(CInt(Me.mopnhFrom.Text), CInt(Me.mopnhTo.Text),OperatingReportDataEnum.AlarmOnTime ) </para> </example>
      <param name="intFromIndex">Starting operating history index.  The 1-based index at which the alarm information is obtained</param>
      <param name="intToIndex">Ending operating history index.  The 1-based index at which the alarm information is obtained</param>
      <param name="enReportData">Operating history data to be retreived</param>
      <returns>A zero-based array of System.Int32 values that represents the operation history data for the given indexes.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> If a request for a total of 144 operating history, then each value in the array is equivalent to the time period as shown in the table below. A value of 1 indicates that the state of this requested report data is ON; otherwise it is OFF. <list type="table"> <listheader> <term>Index</term> <description>Time slot (hh:mm) </description> </listheader> <item> <term>0</term> <description>00:00</description> </item> <item> <term>1</term> <description>00:10</description> </item> <item> <term>2</term> <description>00:20</description> </item> <item> <term>...</term> <description>...</description> </item> <item> <term>...</term> <description>...</description> </item> <item> <term>142</term> <description>23:40</description> </item> <item> <term>143</term> <description>23:50</description> </item> </list> </remarks>
      <Figure> OPERATING HIS - DAILY(TODAY):2006/10/25 <para> <img src="MacMan-OperatingHistory.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingHistory.GetPreviousOperatingHistory(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
      <summary> Gets previous operating history for the specified report data at the specified indexes. </summary>
      <example> This sample shows how to call the GetPreviousOperatingHistory method. <para>Dim objMopnh As new MacMan.COperatingHistory </para> <para>Dim rp As Int32() </para> <para>Me.mopnhAlarmOnTime.Text = objMopnh.GetPreviousOperatingHistory(CInt(Me.mopnhFrom.Text), CInt(Me.mopnhTo.Text),OperatingReportDataEnum.AlarmOnTime ) </para> </example>
      <param name="intFromIndex">Starting operating history index.  The 1-based index at which the alarm information is obtained</param>
      <param name="intToIndex">Ending operating history index.  The 1-based index at which the alarm information is obtained</param>
      <param name="enReportData">Operating history data to be retreived</param>
      <returns>A zero-based array of System.Int32 values that represents the operation history data for the given indexes if possible.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para> If a request for a total of 144 operating history, then each value in the array is equivalent to the time period as shown in the table below. A value of 1 indicates that the state of this requested report data is ON; otherwise it is OFF. </para> <list type="table"> <listheader> <term>Index</term> <description>Time slot (hh:mm) </description> </listheader> <item> <term>0</term> <description>00:00</description> </item> <item> <term>1</term> <description>00:10</description> </item> <item> <term>2</term> <description>00:20</description> </item> <item> <term>...</term> <description>...</description> </item> <item> <term>...</term> <description>...</description> </item> <item> <term>142</term> <description>23:40</description> </item> <item> <term>143</term> <description>23:50</description> </item> </list> </remarks>
      <Figure> OPERATING REP: DAILY(PREV):2006/10/25 <para> <img src="MacMan-OperatingHistory.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport">
      <summary> Class provides operating report information stored by NC.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetMaxCount">
      <summary> Gets maximum number of Operating report that can be stored by the system. </summary>
      <example> This sample shows how to call the GetMaxCount method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morMaxNoOfOpReport.Text = objMor.GetMaxCount </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("MacmMan Operating Report", Err.Description) </para> <para>		Resume Next </para> </example>
      <returns>A System.Int32 value that represents the maximum number of Operating report</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetOperatingStatus">
      <summary> Gets the machine operating status. </summary>
      <example> This sample shows how to call the GetOperatingStatus method. <para>On Error GoTo sd </para> <para>		Me.morNonoperatingCondition.Text = System.Enum.GetNames(GetType(NonOperatingConditionEnum)).GetValue(objMor.GetNonOperatingCondition) </para> <para>		Me.morOperatingStatus.Text = System.Enum.GetNames(GetType(OperatingStatusEnum)).GetValue(objMor.GetOperatingStatus) </para> <para>	    Me.morPeriodOperatingReport.Text = objMor.GetPeriodOperatingTime </para> <para>      Me.morPreviousOperatingTime.Text = objMor.GetPreviousOperatingTime </para> <para>      Me.morTodayOperatingTime.Text = objMor.GetTodayOperatingTime </para> <para>		Exit Sub </para> <para>sd: </para> <para>      doError("MacmMan Operating Report", Err.Description) </para> <para>      Resume Next </para> </example>
      <returns>A Okuma.CMDATAPI.Enumerations.OperatingStatusEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> START - OPERATING - Machine is operating if Operating has a yellow color in its background.  Otherwise, it is not operating. <para> <img src="MacMan-OperatingReport.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetNonOperatingCondition">
      <summary> Gets the Non-operating condition of the machine. </summary>
      <example> This sample shows how to call the GetNonOperatingCondition method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morNonoperatingCondition.Text = System.Enum.GetNames(GetType(NonOperatingConditionEnum)).GetValue(objMor.GetNonOperatingCondition) </para> <para> 	Exit Sub </para> <para>sd: </para> <para>		doError("MacmMan Operating Report", Err.Description) </para> <para> 	Resume Next </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP:DAILY(TODAY) - NOT OPERATING - NO OPERATOR -  When the machine is not operating, it is in one the non-operating condition such as in-proc setup, no operator, part waiting, maintenance, other. <para> <img src="MacMan-OperatingReport.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetTodayOperatingReport(Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
      <summary> Gets Today operating report for the specified report data. </summary>
      <example> This sample shows how to call the GetTodayOperatingReport method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morOperatingTime.Text = objMor.GetTodayOperatingReport(OperatingReportDataEnum.OperatingTime) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("MacMan Operating History Report", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="enReportData">Report data to be retreived.  Values for this parameter come from the Okuma.CMDATAPI.OperatingReportDataEnum enumeration.</param>
      <returns>A System.Int64 value.</returns>
      <DataUnit>Seconds</DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP: DAILY(TODAY) <para> <img src="MacMan.OperatingReport.Today.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPreviousOperatingReport(Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
      <summary> Gets Previous operating report for the specified report data. </summary>
      <example> This sample shows how to call the GetPreviousOperatingReport method. <para>Dim objMor As new MacMan.COperatingReport </para> <para>Me.morPrevAlarmOnTime.Text = objMor.GetPreviousOperatingReport(OperatingReportDataEnum.AlarmOnTime) </para> </example>
      <param name="enReportData">Report data to be retreived.  Values for this parameter come from the Okuma.CMDATAPI.OperatingReportDataEnum enumeration.</param>
      <returns>A System.Int64 value.</returns>
      <DataUnit>Seconds</DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP: DAILY(PREV) <para> <img src="MacMan.OperatingReport.Previous.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPeriodOperatingReport(Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum)">
      <summary> Gets Period operating report for the specified report data. </summary>
      <example> This sample shows how to call the ExceptionHandler method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morPeriodExternalInputTime.Text = objMor.GetPeriodOperatingReport(OperatingReportDataEnum.ExternalInputTime) </para> </example>
      <param name="enReportData">Report data to be retreived.  Values for this parameter come from the Okuma.CMDATAPI.OperatingReportDataEnum enumeration.</param>
      <returns>A System.Int64 value</returns>
      <DataUnit>Seconds</DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP: PERIOD <para> <img src="MacMan.OperatingReport.Period.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetTodayOperatingReportDate">
      <summary> Gets Today operating report date. </summary>
      <example> This sample shows how to call the LogMessage method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morDateOfOperatingReport.Text = objMor.GetTodayOperatingReportDate() </para> </example>
      <returns>A System.String value that represents the date in yyyy/mm/dd format</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP: DAILY(TODAY) <para> <img src="MacMan.OperatingReport.Today.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPreviousOperatingReportDate">
      <summary> Gets Previous operating report date. </summary>
      <example> This sample shows how to call the LogMessage method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morPrevDateOfOperatingRept.Text = objMor.GetPreviousOperatingReportDate() </para> </example>
      <returns>A System.String value that represents the date in yyyy/mm/dd format</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP: DAILY(PREV) <para> <img src="MacMan.OperatingReport.Previous.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperatingReport.GetPeriodOperatingReportDate">
      <summary> Gets Period operating report date. </summary>
      <example> This sample shows how to call the LogMessage method. <para>		Dim objMor As new MacMan.COperatingReport </para> <para>		Me.morPeriodDateOfOperatingReport.Text = objMor.GetPeriodOperatingReportDate() </para> </example>
      <returns>A System.String value that represents the date in yyyy/mm/dd format</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATING REP: PERIOD <para> <img src="MacMan.OperatingReport.Previous.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperation">
      <summary> Class represents particular operation history information.  </summary>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.COperation.Date">
      <summary> Gets Operation history Date. Sets Operation history Date for this class instance only.  It is in "yyyy/mm/dd" format </summary>
      <returns> A System.String value containg operation history data  </returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.COperation.Time">
      <summary> Gets Operation history Time. Sets Operation history Time for this class instance only.  It is in "hh:mm:ss" format </summary>
      <returns> A System.String value containg operation history Time  </returns>
    </member>
    <member name="P:Okuma.CMDATAPI.DataAPI.MacMan.COperation.Data">
      <summary> Gets Operation history data.  Sets Operation data for this class instance only. </summary>
      <returns> A System.String value containg operation history data  </returns>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory">
      <summary> Class provides operation history information stored by NC.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetMaxCount">
      <summary> Gets the maximum number of operation histories that can be stored by the system. </summary>
      <example> This sample shows how to call the GetMaxCount method. <para>On Error GoTo sd </para> <para>		Dim objMoh As CMDATAPILib.MacMan.COperationHistory </para> <para>		Dim opIndex As Int16 </para> <para>		opIndex = CInt(Me.mohOperationIndex.Text) </para> <para>		Me.mohOperationMaxCount.Text = objMoh.GetMaxCount </para> <para>		Exit Sub </para> <para>sd: </para> <para>	    doError("MacMan Operating Report", Err.Description) </para> <para>	    Resume Next </para> </example>
      <returns>A System.Int32 value that represents the maximum number of Operation history</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetCount">
      <summary> Gets number of Operation histories that are currently available in the system. </summary>
      <example> This sample shows how to call the GetCount method. <para>On Error GoTo sd </para> <para>		Dim opIndex As Int16 </para> <para>		Dim objMoh As CMDATAPILib.MacMan.COperationHistory </para> <para>	    opIndex = CInt(Me.mohOperationIndex.Text) </para> <para>	    Me.mohOperationCount.Text = objMoh.GetCount </para> <para>	    Exit Sub </para> <para>sd: </para> <para>    doError("MacMan Operating Report", Err.Description) </para> <para>	   Resume Next </para> </example>
      <returns>A System.Int32 value that represents the number of Operation history</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationHistory(System.Int32)">
      <overloads>GetOperationHistory has 2 overload methods</overloads>
      <summary> Gets the Operation history data for the given index. </summary>
      <example> This sample shows how to call the GetOperationHistory method. <para>On Error GoTo sd </para> <para>    Dim opIndex As Int16 </para> <para>    Dim mohObject As CMDATAPILib.MacMan.COperation </para> <para>    opIndex = CInt(Me.mohOperationIndex.Text) </para> <para>	  mohObject = objMoh.GetOperationHistory(opIndex) </para> <para>    Me.mohHistoryObject.Text = mohObject.Date &amp; vbCrLf &amp; mohObject.Data &amp; vbCrLf &amp; mohObject.Time </para> <para>	  Me.mohOperationData.Text = mohObject.Data </para> <para>    Me.mohOperationDate.Text = mohObject.Date </para> <para>    Me.mohOperationTime.Text = mohObject.Time </para> <para>    Me.mohOperationCount.Text = objMoh.GetCount </para> <para>    Me.mohOperationMaxCount.Text = objMoh.GetMaxCount </para> <para>    Exit Sub </para> <para>sd: </para> <para>	   doError("MacMan Operating Report", Err.Description) </para> <para>	   Resume Next </para> </example>
      <param name="intIndex">Operation history index to be retreived</param>
      <returns>An Okuma.CMDATAPI.DataAPI.COperation object that represents the Operation history data.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATION HISTORY: OPERATE PANEL <para> <img src="MacMan-OperationHistory.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.MacMan.COperationHistory.GetOperationHistory(System.Int32,System.Int32)">
      <summary> Gets the Operation history for the given indexes. </summary>
      <example> This sample shows how to call the GetOperationHistory (Int32 intFromIndex, Int32 intToIndex) method. <para>On Error GoTo sd </para> <para>		Dim opIndex As Int16 </para> <para>		Dim mohObject As CMDATAPILib.MacMan.COperation </para> <para>		opIndex = CInt(Me.mohOperationIndex.Text) </para> <para>		mohObject = objMoh.GetOperationHistory(opIndex) </para> <para>		Me.mohHistoryObject.Text = mohObject.Date &amp; vbCrLf &amp; mohObject.Data &amp; vbCrLf &amp; mohObject.Time </para> <para>		Me.mohOperationData.Text = mohObject.Data </para> <para>		Me.mohOperationDate.Text = mohObject.Date </para> <para>		Me.mohOperationTime.Text = mohObject.Time </para> <para>		Me.mohOperationCount.Text = objMoh.GetCount </para> <para> 		Me.mohOperationMaxCount.Text = objMoh.GetMaxCount </para> <para> 		Exit Sub </para> <para>sd: </para> <para>		doError("MacMan Operating Report", Err.Description) </para> <para> 	Resume Next </para> </example>
      <param name="intFromIndex">Starting Operation history index.  The 1-based index at which the information is obtained</param>
      <param name="intToIndex">Ending Operation history index.  The 1-based index at which the information is obtained</param>
      <returns>A System.Collection.ArrayList object that represents the list of Operation history if possible.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> OPERATION HISTORY: OPERATE PANEL <para> <img src="MacMan-OperationHistory.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.COptionalParameter">
      <summary> Class provides operation to Optional Parameter Long, Word, and Bit on NC.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterBit(System.Int32,System.Int32)">
      <summary>Gets NC Optional parameter bit value at bit index Please see <see href="MC.OPE-B1003.html">Optional Parameter (Bit)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Gets NC Optional parameter bit value at bit index. <para> <code> Dim enValue as BitStateEnum	</code> <code> enValue = objVariables.GetNCOptionalParameterBit(intBitIndex)	</code> </para> </example>
      <param name="intBitIndex">Bit index</param>
      <param name="intBitNo">Bit nummber ranging from 0 to 7</param>
      <returns>An OnOffStateEnum value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterBit(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.OnOffStateEnum)">
      <summary>Set NC Optional parameter bit value at bit index. Please see <see href="MC.OPE-B1003.html">Optional Parameter (Bit)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Set NC Optional parameter bit value at bit index, and bit number. <para> <code> Dim enValue as OnOffStateEnum </code> <code> objVariables.SetSubSystem(intSubSystem)</code> <code> objVariables.SetNCOptionalParameterBit(intBitIndex, intBitNo, enValue) </code> </para> </example>
      <param name="intBitIndex">Bit index</param>
      <param name="intBitNo">Bit nummber ranging from 0 to 7</param>
      <param name="enValue">Bit value</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterWord(System.Int32)">
      <summary>Gets NC Optional parameter WORD value at word index. Please see <see href="MC.OPE-B1002.html">Optional Parameter (Word)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Gets NC Optional parameter WORD value at word index. <para> <code> Dim intValue as Integer	</code> <code> Dim intWordIndex as Integer	</code> <code> intValue = objVariables.GetNCOptionalParameterWord(intWordIndex)	</code> </para> </example>
      <param name="intWordIndex">WORD index</param>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterWord(System.Int32,System.Int32)">
      <summary>Set NC Optional parameter WORD value at word index. Please see <see href="MC.OPE-B1002.html">Optional Parameter (Word)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Set NC Optional parameter WORD value at word index. <para> <code> Dim intValue as Integer	</code> <code> Dim intWordIndex as Integer	</code> <code> objVariables.SetSubSystem(intSubSystem)</code> <code> objVariables.SetNCOptionalParameterWord(intWordIndex, intValue)	</code> </para> </example>
      <param name="intWordIndex">WORD index</param>
      <param name="intValue">WORD value to set at WORD INDEX</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.AddNCOptionalParameterWord(System.Int32,System.Int32)">
      <summary>Sets NC Optional Parameter WORD by adding the input value to the existing data at the specified index. Please see <see href="MC.OPE-B1002.html">Optional Parameter (Word)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to add NC Optional parameter WORD value at word index. <para> <code> Dim intValue as Integer	</code> <code> Dim intWordIndex as Integer	</code> <code> objVariables.SetSubSystem(intSubSystem)</code> <code> objVariables.AddNCOptionalParameterWord(intWordIndex, intValue)	</code> </para> </example>
      <param name="intWordIndex">WORD index</param>
      <param name="intValue">WORD value to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.GetNCOptionalParameterLongWord(System.Int32)">
      <summary>Gets NC Optional parameter LONG WORD value at long word index. Please see <see href="MC.OPE-B1001.html">Optional Parameter (Long Word)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Gets NC Optional parameter LONG WORD value at long word index. <para> <code> Dim intValue as Integer	</code> <code> Dim intLongWordIndex as Integer	</code> <code> intValue = objVariables.GetNCOptionalParameterLongWord(intLongWordIndex)	</code> </para> </example>
      <param name="intLongWordIndex">LONG WORD index</param>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.SetNCOptionalParameterLongWord(System.Int32,System.Int32)">
      <summary>Set NC Optional parameter LONG WORD value at long word index. Please see <see href="MC.OPE-B1001.html">Optional Parameter (Long Word)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Set NC Optional parameter LONG WORD value at long word index. <para> <code> Dim intValue as Integer	</code> <code> Dim intLongWordIndex as Integer	</code> <code> objVariables.SetSubSystem(intSubSystem)</code> <code> objVariables.SetNCOptionalParameterLongWord(intLongWordIndex, intValue)	</code> </para> </example>
      <param name="intLongWordIndex">LONG WORD index</param>
      <param name="intValue">LONG WORD value to set at LONG WORD INDEX</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL PARAMETER - BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.COptionalParameter.AddNCOptionalParameterLongWord(System.Int32,System.Int32)">
      <summary>Sets NC Optional Parameter LONG WORD by adding the input value to the existing data at the specified index. Please see <see href="MC.OPE-B1001.html">Optional Parameter (Long Word)</see> or MC Operation Manual - DATA OPERATION - SECTION 4 PARAMETER SETTING and Appendix 1. Optional Parameter for more information. </summary>
      <example> This example shows how to Set NC Optional parameter LONG WORD value at long word index. <para> <code> Dim intValue as Integer	</code> <code> Dim intLongWordIndex as Integer	</code> <code> objVariables.SetSubSystem(intSubSystem)</code> <code> objVariables.AddNCOptionalParameterLongWord(intLongWordIndex, intValue)	</code> </para> </example>
      <param name="intLongWordIndex">LONG WORD index</param>
      <param name="intValue">LONG WORD value to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTIONAL BIT, WORD, LONG WORD <para> <img src="MC.Parameter.NCOptionalBitWordLongWord.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CProbe">
      <summary> Class provides information about Touch Probe.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProbe.GetTouchProbeSignal">
      <summary> Gets touch probe signal status </summary>
      <example> This sample code shows how to use the GetTouchProbeSignal() method. <para>	Dim objProbe As CProbe </para> <para>	Try </para> <para>	    txtTouchProbeSignal.Text = objProbe.GetTouchProbeSignal().ToString </para> <para>	Catch ae As ApplicationException </para> <para>    doError("CProbe:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	  doError("CProbe:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffStateEnum enumeration value. It is ON when it is contacted otherwise it is OFF state. </returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProbe.GetProbeSensorPosition(Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets touch probe position in encoder coordinate at the specified axis index. </summary>
      <example> This sample code shows how to call the GetProbeSensorPosition() method. <para> Dim objProbe As new CProbe </para> <para> Dim curAxisEnum As AxisIndexEnum </para> <para> Dim dblValue As Double </para> <para> curAxisEnum=System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.axisCombo.SelectedValue) </para> <para> dblValue = CDbl(objProbe.GetProbeSensorPosition(curAxisEnum) </para> </example>
      <param name="enAxisIndex">Axis index.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Double that represents position in encoder coordinate.</returns>
      <DataUnit> Default unit is in mm.  Other unit can be set by calling SetDataUnit method </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>RSAPA <para> <img src="AxisData_Encoder_coord.RCON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProbe.GetProbeSubProgramStatus">
      <summary> Gets sub program status of either OSPR1 or OSPR2 </summary>
      <example> This sample code shows how to use the GetProbeSubProgramStatus() method. <para>Dim objProbe As CMDATAPILib.CProbe  </para> <para>Dim enProbeSubProgramStatusEnum as ProbeSubProgramStatusEnum  </para> <para>	Try </para> <para>	    enProbeSubProgramStatusEnum = objProbe.GetProbeSubProgramStatus()</para> <para>	Catch ae As ApplicationException </para> <para>	    doError("CProbe:", ae.Message) </para> <para>	Catch ex As Exception </para> <para>	    doError("CProbe:", ex.Message) </para> <para>	End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum enumeration value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when input parameters are not supported for the current system</exception>
      <remarks> <para> ********************* This function cannot be supported in OSP-P100 II machines. ************************ </para>  </remarks>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CProgram">
      <summary> Class provides information about part program.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetRunningProgram(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary> Gets running part program. The return data is based on the input value of rows and columns. If an actual row in the part program contains more characters (each character is a column) than the specified input columns, the row will automatically break into multiple lines. If an actual row contains fewer characters than the specified input columns, spaces will be added to it. The read point and execute point values are relative value to the current screen of the running part program. </summary>
      <example> This sample shows how to call the GetRunningProgram method. <para>Dim objProgram As new CProgram </para> <para>Dim rp As String() </para> <para>Dim currp As String </para> <para>Try </para> <para>		rp = objProgram.GetRunningProgram(CInt(Me.progRow.Text), CInt(Me.progColumn.Text), CInt(Me.progRead.Text), CInt(Me.progExecutePoint.Text)) </para> <para>		For Each currp In rp </para> <para>	    	progRunningPrograms.Text += currp &amp; vbCrLf </para> <para>	    Next </para> <para>Catch ae As ApplicationException </para> <para>     doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <param name="intRow">Number of rows to display</param>
      <param name="intColumn">Number of columns/characters per line</param>
      <param name="pintReadPoint">A return value that represents the current read point in the part program</param>
      <param name="pintExecutePoint">A return value that represents the current execute point in the part program</param>
      <returns>An array of System.String value that represents the current running part program.</returns>
      <Figure> AUTO OPERATION - ACTUAL POSITION - CURRENT MAIN/SUB PROGRAM (EXEC) - A section of part programm is running. <para><para> '&gt;&gt;' is the read point, and an upper arrow is the execute point.</para> <img src="MC.PROGRAM.RUNNING.jpg" /> </para> </Figure>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> The number of row * column should not exceed 2048.  Number of column should not be greater than 79. Row must be greater than or equal to 0. Column must be greater than or equal to 1.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetExecutedSequenceNumber">
      <summary> Gets the current execute sequence number </summary>
      <example> This sample shows how to call the GetExecutedSequenceNumber method. <para>Dim objProgram As new CProgram </para> <para>Dim execSequenceNumber As String </para> <para>Try </para> <para>		execSequenceNumber = objProgram.GetExecutedSequenceNumber </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value that represents that sequence number.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - ACTUAL POSITION - CURRENT MAIN/SUB PROGRAM (EXEC) - A.MIN - 01234 - N1000 - The current executed sequence number is N1000 <para> <img src="MC.Program.Running.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetGCodes">
      <summary> Get the active G Codes. </summary>
      <example> This sample shows how to call the GetGCodes method. <para>Dim objProgram As new CProgram </para> <para>Dim gCodes As String </para> <para>Try </para> <para>      gCodes = objProgram.GetGCodes </para> <para>Catch ae As ApplicationException </para> <para>      doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>      doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value that represents all active G codes in the system</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> BLOCK DATA - CURRENT - List of all G codes being executed in NC. <para> <img src="BlockData.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetMCodes">
      <summary> Get the active M Codes. </summary>
      <example> This sample shows how to call the GetMCodes method. <para>Dim objProgram As new CProgram </para> <para>Dim mCodes As String </para> <para>Try </para> <para>     mCodes = objProgram.GetMCodes </para> <para>Catch ae As ApplicationException </para> <para>     doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>     doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value that represents all active M codes in the system</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> BLOCK DATA - CURRENT - List of all M codes being executed in NC. <para> <img src="BlockData.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetActiveProgramFileName">
      <summary> Gets the active main part program file name. </summary>
      <example> This sample shows how to call the GetActiveProgramFileName method. <para>Dim objProgram As new CProgram </para> <para>Dim activeProgramFname As String </para> <para>Try </para> <para>    activeProgramFname = objProgram.GetActiveProgramFileName </para> <para>Catch ae As ApplicationException </para> <para>    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> AUTO OPERATION - A.MIN - Current active part program file name being loaded into NC. <para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetActiveProgramName">
      <summary> Gets the active main program name. </summary>
      <example> This sample shows how to call the ExceptionHandler method. <para>   Dim objProgram As new CProgram </para> <para>   Dim activeProgramName As String </para> <para>   Try </para> <para>      activeProgramName = objProgram.GetActiveProgramName </para> <para>   Catch ae As ApplicationException </para> <para>       doError("CProgram", ae.Message) </para> <para>   Catch ex As Exception </para> <para>       doError("CProgram", ex.Message) </para> <para>   End Try </para> </example>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> A program file name can have multiple program name.  Each program name starts with an O such as O1234 </remarks>
      <Figure> AUTO OPERATION - O1234 - Active program name is O1234 <para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentBlockNumber">
      <summary> Gets current active block number in the system. </summary>
      <example> This sample shows how to call the GetCurrentBlockNumber method. <para>Dim objProgram As new CProgram </para> <para>Dim currentBlockNumber As Int32 </para> <para>Try </para> <para>		currentBlockNumber = objProgram.GetCurrentBlockNumber </para> <para>Catch ae As ApplicationException </para> <para>    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> AUTO OPERATION - ACTUAL POSITION 1mm(PROGRAM) O1234 N1000 135 <para><para>Current block number is 135.</para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetExecuteBlock(Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum)">
      <summary> Gets the execute block in the part program for the given execute block type. </summary>
      <example> This sample shows how to call the GetExecuteBlock method. <para>Dim objProgram As new CProgram </para> <para>Dim curExecEnum As ExecuteBlockTypeEnum </para> <para>Try </para> <para>		curExecEnum = System.Enum.GetValues(GetType(ExecuteBlockTypeEnum)).GetValue(Me.progExecCombo.SelectedValue) </para> <para>		progExecutingBlock.Text = objProgram.GetExecuteBlock(curExecEnum) </para> <para>Catch ae As ApplicationException </para> <para>     doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>     doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <param name="enValue">An execute block type</param>
      <returns>A System.String value that represents the execute block</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - EXECUTE BLOCK and NEXT LINE <para> <para>N1000G0X0Z0Y0B100 - It is a block being executed by NC.</para> <para>N120 T1 - It is a block being executed next by NC.</para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetDefaultProgramPath">
      <summary> Gets the default folder location where part program is stored. </summary>
      <example> This sample shows how to call the GetDefaultProgramPath method. <para>Dim objProgram As new CProgram </para> <para>Dim defaultProgramPath As String </para> <para>Try </para> <para>	  defaultProgramPath = objProgram.GetDefaultProgramPath </para> <para>Catch ae As ApplicationException </para> <para>    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value that represents a full path of part program location</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetProgramGCodeMacro(System.Int32)">
      <summary> Gets program name assigned to a G Code macro for G Code Macro type MODIN or CALL. </summary>
      <example> This sample shows how to call the GetProgramGCodeMacro method. <para>   Dim objProgram As new CProgram </para> <para>   Dim intGCodeMacro As Integer </para> <para>   Dim enGCodeMacroType As GCodeMacroTypeEnum </para> <para>   Dim strProgramName As String </para> <para>   Try </para> <para>      strProgramName = objProgram.GetProgramGCodeMacro(enGCodeMacroType, intGCodeMacro) </para> <para>   Catch ae As ApplicationException </para> <para>       doError("CProgram", ae.Message) </para> <para>   Catch ex As Exception </para> <para>       doError("CProgram", ex.Message) </para> <para>   End Try </para> </example>
      <param name="enGCodeType">G Code Macro Type.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.GCodeMarcoTypeEnum enumeration.</param>
      <param name="intGCodeMacro">G Code Macro number</param>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para> <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para> <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para> </remarks>
      <Figure> <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120</term> <term>M201-M210</term> </item> </list> <para> <para> Figgure 1</para> <img src="MC.Parameter.GMCodeMacro.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G540</term> <term>G111-G120, G541-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G580</term> <term>G111-G120</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 4</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120, G501-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.SetProgramGCodeMacro(System.Int32,System.String)">
      <summary> Sets program name for G Code macro number in MODIN or CALL </summary>
      <example> This sample shows how to call the SetProgramGCodeMacro method. <para>   Dim objProgram As new CProgram </para> <para>   Dim enGCodeType As GCodeMacroTypeEnum </para> <para>   Dim intGCodeMacro As Integer </para> <para>   Dim strProgramName As String </para> <para>   Try </para> <para>		objProgram.SetProgramGCodeMacro(enGCodeType, intGCodeMacro, strProgramName) </para> <para>   Catch ae As ApplicationException </para> <para>       doError("CProgram", ae.Message) </para> <para>   Catch ex As Exception </para> <para>       doError("CProgram", ex.Message) </para> <para>   End Try </para> </example>
      <param name="enGCodeType">G Code Macro Type.  Values of parameter come from the Okuma.CMDATAPI.Enumerations.GCodeMarcoTypeEnum enumeration.</param>
      <param name="intGCodeMacro">G Code Macro number</param>
      <param name="strValue">Program name to be set.  All program name will be converted to upper case.  An empty string will reset part program name to **.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para> <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para> <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para> </remarks>
      <Figure> <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120</term> <term>M201-M210</term> </item> </list> <para> <para> Figgure 1</para> <img src="MC.Parameter.GMCodeMacro.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G540</term> <term>G111-G120, G541-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G580</term> <term>G111-G120</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is not enabled).  See Figure 4</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120, G501-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetProgramMCodeMacro(System.Int32)">
      <summary> Gets program name assigned to a M Code macro. </summary>
      <example> This sample shows how to call the GetProgramMCodeMacro method. <para>   Dim objProgram As new CProgram </para> <para>   Dim intMCodeMacro As Integer </para> <para>   Dim strProgramName As String </para> <para>   Try </para> <para>      strProgramName = objProgram.GetProgramMCodeMacro(intMCodeMacro) </para> <para>   Catch ae As ApplicationException </para> <para>       doError("CProgram", ae.Message) </para> <para>   Catch ex As Exception </para> <para>       doError("CProgram", ex.Message) </para> <para>   End Try </para> </example>
      <param name="intGCodeMacro">M Code Macro number</param>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para> <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para> <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para> </remarks>
      <Figure> <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120</term> <term>M201-M210</term> </item> </list> <para> <para> Figgure 1</para> <img src="MC.Parameter.GMCodeMacro.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G540</term> <term>G111-G120, G541-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G580</term> <term>G111-G120</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is not enabled).  See Figure 4</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120, G501-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.SetProgramMCodeMacro(System.Int32,System.String)">
      <summary> Sets program name for M Code macro number. </summary>
      <example> This sample shows how to call the SetProgramMCodeMacro method. <para>   Dim objProgram As new CProgram </para> <para>   Dim intMCodeMacro As Integer </para> <para>   Dim strProgramName As String </para> <para>   Try </para> <para>		objProgram.SetProgramMCodeMacro(intMCodeMacro, strProgramName) </para> <para>   Catch ae As ApplicationException </para> <para>       doError("CProgram", ae.Message) </para> <para>   Catch ex As Exception </para> <para>       doError("CProgram", ex.Message) </para> <para>   End Try </para> </example>
      <param name="intGCodeMacro">M Code Macro number</param>
      <param name="strValue">Program name to be set.  All program name will be converted to upper case.  An empty string will reset part program name to **.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para>A program file name can have multiple program name.  Each program name starts with an O such as O1234.</para> <para>List of available G/M Codes depends on Extended Macro Option (GMEX) and the active setting of Optional Parameter (BIT, WORD, LONG WORD) bit 3 and 4 of Bit index 73.</para> <para>Note: Change of Optional Parameter bit 3 and 4 of Bit index 73 will not take into effect until reboot the machine.</para> </remarks>
      <Figure> <para>List of available G/M Code Macro - Standard (G/M Code Macro Option (GMEX) is not enabled).  See Figure 1</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120</term> <term>M201-M210</term> </item> </list> <para> <para> Figgure 1</para> <img src="MC.Parameter.GMCodeMacro.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 2</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G540</term> <term>G111-G120, G541-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 2 -  G/M Code Macro - G/M Code Macro Option is enabled and Optional Parameter 73 bit 3 and 4 are OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3OFF4OFF.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is enabled).  See Figure 3</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110, G501-G580</term> <term>G111-G120</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 3 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 3 is ON, and  Optional Parameter 73 bit 4 is OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3on4off.jpg" /> </para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>_________________________________________________________________________________________________________________________________________________</para> <para>List of available G/M Code Macro - Extended (G/M Code Macro Option (GMEX) is not enabled).  See Figure 4</para> <list type="table"> <listheader> <term>G CODE MODIN</term> <term>G CODE CALL</term> <term>M CODE CALL</term> </listheader> <item> <term>G101-G110</term> <term>G111-G120, G501-G580</term> <term>M201-M220</term> </item> </list> <para> <para> Figgure 4 -  G/M Code Macro - G/M Code Macro Option is enabled, Optional Parameter 73 bit 4 is ON and bit 3 is either ON or OFF</para> <img src="MC.Parameter.GMCodeMacro-WithOption3off4ON.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentActiveProgramName">
      <summary> Gets the active program name currently executed by NC.  It coud be main or sub program name. </summary>
      <example> This sample shows how to call the ExceptionHandler method. <para>   Dim objProgram As new CProgram </para> <para>   Dim activeProgramName As String </para> <para>   Try </para> <para>      activeProgramName = objProgram.GetCurrentActiveProgramName </para> <para>   Catch ae As ApplicationException </para> <para>       doError("CProgram", ae.Message) </para> <para>   Catch ex As Exception </para> <para>       doError("CProgram", ex.Message) </para> <para>   End Try </para> </example>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para> A program file name can have multiple program name.  Each program name starts with an O such as O1234 </para> <para> ********************* This function cannot be supported in OSP-P100 II machines. ************************ </para> </remarks>
      <Figure> AUTO OPERATION - O1234 - Active program name is O1234 <para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentActiveProgramFileName">
      <summary> Gets current active program file name.  It could only be program with MIN, SUB, and SSB extension. </summary>
      <example> This sample shows how to call the GetCurrentActiveProgramFileName method. <para>Dim objProgram As new  CProgram </para> <para>Dim activeProgramFname As String </para> <para>Try </para> <para>    activeProgramFname = objProgram.GetCurrentActiveProgramFileName </para> <para>Catch ae As ApplicationException </para> <para>    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> Program having extension other than MIN, SUB, and SSB will be displayed as 'D:\MD1' folder <para> ********************* This function cannot be supported in OSP-P100 II machines. ************************ </para> </remarks>
      <Figure> AUTO OPERATION - A.MIN - Current active part program file name being loaded into NC. <para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.CancelSubProgram(System.String)">
      <summary> Cancel sub program name. </summary>
      <example> This sample shows how to call the CancelSubProgram method. <para>Dim objProgram As new  CProgram </para> <para>Dim strSubProgramName As String </para> <para> objProgram.CancelSubProgram(strSubProgramName)</para> </example>
      <param name="strSubProgramName">Sub Program name to be cancel.  All program name will be converted to upper case.  Sub program name must be one of the following: OSPR1", "OSPR2", "OCUT1" or, and "OCUT2" .</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para> ********************* This function cannot be supported in OSP-P100 II machines. ************************ </para> </remarks>
      <Figure> AUTO OPERATION - A.MIN - Current active part program file name being loaded into NC. <para> <img src="MC.ActualPosition.P1.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetCurrentActiveProgramFilePath">
      <summary> Gets active  program file path.  It will return full path of currently selected main part program.  In case of no active part program it will return the default MD1 folder path which is D:\MD1 </summary>
      <example> This sample shows how to call the GetActiveProgramFilePath method. <para>Dim objProgram As new CProgram </para> <para>Dim strValue As String </para> <para>Try </para> <para>    strValue = objProgram.GetCurrentActiveProgramFilePath </para> <para>Catch ae As ApplicationException </para> <para>    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.CycleComplete">
      <summary> Check whether or not M02/M30 has been executed in the part program being run. </summary>
      <example> This example shows how to calls CycleComplete method <para>Dim blnCycleComplete As Boolean</para> <para>blnCycleComplete = objProgram.CycleComplete()	</para> </example>
      <returns>A System.Boolean value that represents the completion of part program being executed.  True if part program finishes its cycle by executing M02/M30 in the part program, otherwise false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para>The function returns false when NC is reset or program is just started.</para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.ScheduleProgramCycleComplete">
      <summary> Check whether or not the schedule program has finished. </summary>
      <example> This example shows how to calls ScheduleProgramCycleComplete method <para>Dim blnScheduleProgramCycleComplete As Boolean</para> <para>blnScheduleProgramCycleComplete = objProgram.ScheduleProgramCycleComplete()	</para> </example>
      <returns>A System.Boolean value that represents the completion of schedule program being executed.  True if shcedule program finishes its cycle by executing the END block, otherwise false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para>The function returns false when NC is reset or program is just started.</para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetActiveScheduleProgramFileName">
      <summary> Gets active schedule program file name. </summary>
      <example> This sample shows how to call the GetActiveScheduleProgramFileName method. <para>Dim objProgram As new CProgram </para> <para>Dim activeProgramFname As String </para> <para>Try </para> <para>    activeProgramFname = objProgram.GetActiveScheduleProgramFileName </para> <para>Catch ae As ApplicationException </para> <para>    doError("CProgram", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CProgram", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> AUTO OPERATION - TEST.SDF - Current active schedule program file name being loaded into NC. <para> <img src="MC.ScheduleProgramFileName.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CProgram.GetProgramRunningState">
      <summary> Gets program running state of loaded NC program </summary>
      <example> This example shows how to calls GetProgramRunningState() method <para>Dim enRunningState As ProgramRunningStateEnum</para> <para>enRunningState = objProgram.GetProgramRunningState()	</para> </example>
      <returns>A ProgramRunningStateEnum value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CSpec">
      <summary> Class provides the current specification of machine.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetOptionSpecCode(Okuma.CMDATAPI.Enumerations.OptionSpecEnum)">
      <summary> Check if option spec. code is enabled or not. </summary>
      <example> This sample shows how to call the GetOptionSpecCode method. <para>Dim objSpec As new CSpec </para> <para>Dim curSpecEnum As OptionSpecEnum </para> <para>Try </para> <para>		curSpecEnum = System.Enum.GetValues(GetType(OptionSpecEnum)).GetValue(Me.specCombo.SelectedValue) </para> <para>		Me.specCode.Text = objSpec.GetOptionSpecCode(curSpecEnum) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <param name="enValue">Available option spec. code to check</param>
      <returns>A System.Boolean value.  True if option is enabled, otherwise false.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetMachineName">
      <summary> Gets the name of this machine. </summary>
      <example> This sample shows how to call the GetMachineName method. <para>Dim objSpec As new CSpec </para> <para>Dim curSpecEnum As OptionSpecEnum </para> <para>Try </para> <para>		objCMDSpec = New Okuma.CMCMDAPI.CommandAPI.CSpec </para> <para>		curSpecEnum = Me.specCombo.SelectedValue </para> <para>		Me.specMachineName.Text = objSpec.GetMachineName </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value.  If current system does not support machine name, an emtpy string is returned.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetMachineSerialNumber">
      <summary> Gets the serial of this machine. </summary>
      <example> This sample shows how to call the GetMachineSerialNumber method. <para>Dim objSpec As new CSpec </para> <para>Dim curSpecEnum As OptionSpecEnum </para> <para>Try </para> <para>		objCMDSpec = New Okuma.CMCMDAPI.CommandAPI.CSpec </para> <para>		curSpecEnum = Me.specCombo.SelectedValue </para> <para>		Me.specMachineName.Text = objSpec.GetMachineName </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>	   doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.String value.  If current system does not support machine serial number, an emtpy string is returned.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetSpecCode(System.Int32,System.Int32)">
      <summary> Check if spec. code is enabled or not given spec. code index and spec. code bit number. Please see <see href="MC.SpecCodeTable.html">Spec. Code Table</see> for more information. </summary>
      <example> This sample shows how to call the GetSpecCode method. <para>Dim objSpec As new CSpec </para> <para>Dim intSpecCodeIndex As Int32 </para> <para>Dim intBit As Int32 </para> <para>Try </para> <para>		txtSpecCode.Text = objSpec.GetSpecCode(intSpecCodeIndex, intBit) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <param name="intSpecCodeIndex">spec. code index</param>
      <param name="intBit">spec. code bit index</param>
      <returns>A System.Boolean value.  True if option is enabled, otherwise false.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION - SPEC CODE <para> <img src="MC.SpecCodeTable.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetBSpecCode(System.Int32,System.Int32)">
      <summary> Check if B spec. code is enabled or not give B spec. code index and B spec. code bit number. Please see <see href="MC.BSpecCodeTable.html">B Spec. Code Table</see> for more information. </summary>
      <example> This sample shows how to call the GetBSpecCode method. <para>Dim objSpec As new CSpec </para> <para>Dim intSpecCodeIndex As Int32 </para> <para>Dim intBit As Int32 </para> <para>Try </para> <para>		txtSpecCode.Text = objSpec.GetBSpecCode(intSpecCodeIndex, intBit) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <param name="intBSpecCodeIndex">B spec. code index</param>
      <param name="intBit">B spec. code bit index</param>
      <returns>A System.Boolean value.  True if option is enabled, otherwise false.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetPLCSpecCode(System.Int32,System.Int32)">
      <summary> Check if PLC code is enabled or not given spec. code index and spec. code bit number. Please see <see href="MC.PLCSpecCodeTable.html">PLC Spec. Code Table</see> for more information. </summary>
      <example> This sample shows how to call the GetPLCSpecCode method. <para>Dim objSpec As new CSpec </para> <para>Dim intSpecCodeIndex As Int32 </para> <para>Dim intBit As Int32 </para> <para>Try </para> <para>		txtPLCSpecCode.Text = objSpec.GetPLCSpecCode(intSpecCodeIndex, intBit) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <param name="intPLCSpecCodeIndex">PLC spec. code index</param>
      <param name="intBit">Bit Index</param>
      <returns>A System.Boolean value.  True if option is enabled, otherwise false.</returns>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION -PLC SPEC CODE <para> <img src="MC.PLCSpecCodeTable.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetPLCSpecCode2(System.Int32,System.Int32)">
      <summary> Check if PLC code 2 is enabled or not given spec. code 2 index and spec. code bit number. Please see <see href="MC.PLCSpecCode2Table.html">PLC Spec. Code 2 Table</see> for more information. </summary>
      <example> This sample shows how to call the GetPLCSpecCode2 method. <para>Dim objSpec As CSpec = new CSpec </para> <para>Dim intSpecCodeIndex As Int32 </para> <para>Dim intBit As Int32 </para> <para>Try </para> <para>		txtPLCSpecCode.Text = objSpec.GetPLCSpecCode2(intSpecCodeIndex, intBit) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpec", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpec", ex.Message) </para> <para>End Try </para> </example>
      <param name="intPLCSpecCodeIndex">PLC spec. code index ranging from A1 to A32</param>
      <param name="intBit">Bit Index</param>
      <returns>A System.Boolean value.  True if option is enabled, otherwise false.</returns>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> AUTO OPERATION -PLC SPEC CODE 2 <para> <img src="MC.PLCSpecCodeTable_2.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpec.GetControlType">
      <summary> Get control type of machine </summary>
      <example> This sample shows how to call the GetControlType method. <para>Dim objSpec As new CSpec </para> <para>Dim enValue As ControlTypeEnum </para> <para>	enValue = objSpec.GetControlType() </para> </example>
      <returns>A ControlTypeEnum value.  </returns>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CSpindle">
      <summary> Class provides information about spindle.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetSpindleState">
      <summary> Gets states of spindle. </summary>
      <example> This sample shows how to call the GetSpindleState method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>		Me.spinCommandRate.Text = objSpindle.GetCommandSpindlerate </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.SpindleStateEnum value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>AUTO OPERATION - ACTUAL POSITION - SPDLST - CW - Main spindle is in CW rotation. <para> <img src="MC.ActualPosition.P4.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetOilMistCondition">
      <summary> Get the state of Oil Mist. </summary>
      <example> This sample shows how to call the GetOilMistCondition method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>		Me.spinOilMist.Text = System.Enum.GetNames(GetType(OnOffEnum)).GetValue(objSpindle.GetOilMistCondition) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>	  doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>An Okuma.CMDATAPI.Enumerations.OnOffEnum enumeration</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetSpindlerateOverride">
      <summary> Gets the spindle rate override.  When there is no spindle rate command, the spindle rate override is 100. </summary>
      <example> This sample shows how to call the GetSpindlerateOverride method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>    Me.spinRateOverride.Text = objSpindle.GetSpindlerateOverride </para> <para>Catch ae As ApplicationException </para> <para>    doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>Standard Navigation Panel <para>G01 is spindle rate override for main spindle.</para> <para> <img src="MC.MachinePanel.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetMaxSpindlerateOverride">
      <summary> Gets the maximum allowable spindle rate override </summary>
      <example> This sample shows how to call the GetMaxSpindlerateOverride method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>		Me.spinMaxOverrideRate.Text = objSpindle.GetMaxSpindlerateOverride </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetCommandSpindlerate">
      <summary> Gets the command spindle rate in the part program. </summary>
      <example> This sample shows how to call the GetCommandSpindlerate method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>		Me.spinCommandRate.Text = objSpindle.GetCommandSpindlerate </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <DataUnit> RPM </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>AUTO OPERATION - BLOCK DATA - So is Commnannd Spindle rate. <para> <img src="MC.BLOCKDATA.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetActualSpindlerate">
      <summary> Gets the actual spindle rate. </summary>
      <example> This sample shows how to call the GetActualSpindlerate method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>    Me.spinActualRate.Text = objSpindle.GetActualSpindlerate </para> <para>Catch ae As ApplicationException </para> <para>    doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <DataUnit> RPM </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>AUTO OPERATION - BLOCK DATA - Sr is Actual Spindle rate. <para> <img src="MC.BLOCKDATA.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CSpindle.GetSpindleLoad">
      <summary> Gets the spindle load. </summary>
      <example> This sample shows how to call the GetSpindleLoad method. <para>Dim objSpindle As new CSpindle </para> <para>Try </para> <para>		Me.spinLoad.Text = objSpindle.GetSpindleLoad </para> <para>Catch ae As ApplicationException </para> <para>		doError("CSpindle", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CSpindle", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <DataUnit> Percentage </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure>AUTO OPERATION - LOAD MONITOR - S value from 0 to 300% is spindle load. <para> <img src="MC.Spindleload.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CTools">
      <summary> Class provides different offsets and tool life information.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
      <summary> Sets current data unit for this class instance. </summary>
      <example> This sample shows how to call the SetDataUnit method. <para>Dim objTools As CTools </para> <para>Try </para> <para>		objTools.SetDataUnit(Me.tulDataUnitCombo.SelectedValue) </para> <para>	    updateTools() </para> <para>Catch ae As ApplicationException </para> <para>   	doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>   	doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="enDataUnit">Data Unit to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If applicable, this setting is applied to data in this class instance only, not for NC Data Unit. For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, then NC data will be converted to inch and vice versa. </remarks>
      <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. <para> <img src="MC.Parameter.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
      <summary> Gets the tool length geometry offset data at the specified tool number and tool compensation number </summary>
      <example> This sample shows how to call the GetToolOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    dblValue = objTools.GetToolOffset(intToolNo, enToolCompensation) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the tool length geometry offset value data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the SetToolOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.SetToolOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the tool length geometry offset value by adding the input value to the existing data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the AddToolOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.AddToolOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Determines the tool length geometry offset value based on the calculation made for the input data. </summary>
      <example> This sample shows how to call the CalToolOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.CalToolOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
      <summary> Gets the tool length geometry wear offset data at the specified tool number and tool compensation number </summary>
      <example> This sample shows how to call the GetToolWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    dblValue = objTools.GetToolWearOffset(intToolNo, enToolCompensation) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - WEAR - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the tool length geometry wear offset value data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the SetToolWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.SetToolWearOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - GEOMETRY - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the tool length geometry wear offset value by adding the input value to the existing data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the AddToolWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.AddToolWearOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - WEAR - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Determines the tool length geometry wear offset value based on the calculation made for the input data. </summary>
      <example> This sample shows how to call the CalToolWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.CalToolWearOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - TOOL-L OFST - WEAR - HA/HB/HC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterROffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
      <summary> Gets the cutter radius compensation offset data at the specified tool number and tool compensation number </summary>
      <example> This sample shows how to call the GetCutterROffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    dblValue = objTools.GetCutterROffset(intToolNo, enToolCompensation) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - CUTTER R COMP - GEOMETRY - DA/DB/DC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterROffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the cutter radius compensation offset value data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the SetCutterROffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.SetCutterROffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - CUTTER R COMP - GEOMETRY - DA/DB/DC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterROffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the cutter radius compensation offset value by adding the input value to the existing data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the AddCutterROffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.AddCutterROffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - CUTTER R COMP - GEOMETRY - DA/DB/DC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum)">
      <overloads>This function has 3 overload methods to get tool length geometry offset value.</overloads>
      <summary> Gets the cutter radius compensation wear offset data at the specified tool number and tool compensation number </summary>
      <example> This sample shows how to call the GetCutterRWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    dblValue = objTools.GetCutterRWearOffset(intToolNo, enToolCompensation) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - CUTTER R COMP - WEAR - DA/DB/DC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterRWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the cutter radius compensation wear offset value data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the SetCutterRWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.SetCutterRWearOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - CUTTER R COMP - WEAR - DA/DB/DC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterRWearOffset(System.Int32,Okuma.CMDATAPI.Enumerations.ToolCompensationEnum,System.Double)">
      <summary> Sets the cutter radius compensation wear offset value by adding the input value to the existing data at the specified tool number and tool compensation number. </summary>
      <example> This sample shows how to call the AddCutterRWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolNo As Int32 </para> <para>	    Dim enToolCompensation As ToolCompensationEnum = ToolCompensationEnum.HADA </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.AddCutterRWearOffset(intToolNo, enToolCompensation, dblValue) </para> </example>
      <param name="intToolNo">Tool number</param>
      <param name="enToolCompensation">Tool compensation number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> <para> OSP-P300 - TOOL DATA - CUTTER R COMP - WEAR - DA/DB/DC <img src="MC.P300.TOOLDATA.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetStatus(System.Int32,Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum)">
      <summary> Sets tool life status at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetStatus method. <para>Dim objTools As CTools = new CTools</para> <para>Dim intToolNo As Integer</para> <para>Dim enToolLifeStatus As ToolLifeStatusEnum</para> <para>objTools.SetStatus(intToolNo, enToolLifeStatus) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="enToolLifeStatus">Tool life status to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - OK/NG <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolType(System.Int32)">
      <summary>Get Tool Type</summary>
      <param name="intToolNo">Tool number</param>
      <returns> <para> A String value.</para> <para> List of different tool types: UNDEF, ACS.TL, CNT-DRL, SPT-DRL, DRILL, REAMER, BORING, BACK-BOR, CHAMFER, TAP, HELI-TAP, END-MILL, BL-EMILL, RD-MILL, FACEMILL, SIDE-CTR</para> </returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> For OSP-P300 controls: <para> TOOL DATA - TOOL GEOMETRY - TYPE <img src="MC.P300.ToolData.jpg" /> </para> </Figure>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetMaxTools">
      <summary> Gets number of tools configured for this system. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetMaxTools method. <para>Dim objTools As new CTools </para> <para>Dim MaxTools As Int32 </para> <para>Try </para> <para>		MaxTools = objTools.GetMaxTools </para> <para>Catch ae As ApplicationException </para> <para>		doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCurrentToolNumber">
      <summary> Gets current active tool number mounted in the spindle. </summary>
      <example> This sample shows how to call the GetCurrentToolNumber method. <para>Dim objTools As new CTools </para> <para>Dim intValue As Int32 </para> <para>	intValue = objTools.GetCurrentToolNumber() </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> T  - Current tool number <para> <img src="MC.ActualPosition.P4.jpg" /> </para> <para> For OSP-P300S(MP)/M - ACT T.No. <img src="MC.P300.ToolData.ATC.jpg" /> </para> </Figure>
      <remarks> This current tool number is the same tool number obtaining in the CATC.GetActualTool without tool attributes.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCurrentToolLengthOffsetNumber">
      <summary> <para>Gets the current tool offset number in use.</para> For OSP-P300 controls, if current tool offset is HA/HB/HC the return value will be 10001/10002/10003, respectively. </summary>
      <example> This sample shows how to call the GetCurrentToolLengthOffsetNumber method. <para>Dim objTools As new CTools </para> <para>Dim intValue As Integer </para> <para> intValue = objTools.GetCurrentToolLengthOffsetNumber() </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> H - Current Tool Offset number in use <para> <img src="ActualPosition-p1.jpg" /> </para> </Figure>
      <Figure> For OSP-P300 controls: <para> H - Current Tool Length Offset number in use <img src="MC.P300.MDI.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCurrentCutterRCompOffsetNumber">
      <summary> <para>Gets the current Cutter Radius Compensation number in use.</para> For OSP-P300 controls, if current tool offset is DA/DB/DC the return value will be 10001/10002/10003, respectively. </summary>
      <example> This sample shows how to call the GetCurrentCutterRCompOffsetNumber method. <para>Dim objTools As new CTools </para> <para>Dim intValue As Integer </para> <para> intValue = objTools.GetCurrentCutterRCompOffsetNumber() </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> D - Current Cutter Radius Offset number in use <para> <img src="ActualPosition-p1.jpg" /> </para> </Figure>
      <Figure> <para> D - Current Cutter Radius Offset number in use <img src="MC.P300.MDI.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthOffset(System.Int32)">
      <overloads>This function has multiple overload methods to get tool length geometry offset value.</overloads>
      <summary> Gets the tool length geometry offset data at the specified offset index <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset method. <para>Private Sub updateTools() </para> <para>On Error GoTo sd </para> <para>		Dim objTools As new CTools </para> <para>	    Dim toolNum As Int16 </para> <para>	    toolNum = CInt(Me.tulToolNumber.Text) </para> <para>	    Me.tulToolLengthOffset.Text = objTools.GetToolLengthOffset(toolNum) </para> <para>	    Exit Sub </para> <para>sd: </para> <para>	    doError("CTool", Err.Description) </para> <para>		Resume Next </para> <para>End Sub </para> </example>
      <param name="intToolOffsetNo">Tool length offset index.  The 1-based index at which the tool length offset information is obtained</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthOffset(System.Int32,System.Int32)">
      <summary> Get the tool length geometry offset at the specified offset indexes. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset method. <para>Dim dblResults As Double() </para> <para>Dim dr As Double </para> <para>Try </para> <para>	    Me.tulResults.Text = "" </para> <para>	    dblResults = objTools.GetToolLengthOffset(CInt(Me.tulFrom.Text), CInt(Me.tulTo.Text)) </para> <para>	    For Each dr In dblResults </para> <para>	        Me.tulResults.Text += dr &amp; vbCrLf </para> <para>	    Next </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the tool length offset information is obtained</param>
      <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the tool length offset information is obtained</param>
      <returns>An array of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLengthOffset(System.Int32,System.Double)">
      <summary> Sets the tool length offset value at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetToolLengthOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	     objTools.SetToolLengthOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdToolLengthOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>		 doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no. </param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolLengthOffset(System.Int32,System.Double)">
      <summary> Sets the tool length geometry offset value by adding the input value to the existing data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the AddToolLengthWearOffset method. <para>		Dim objTools As CTools = new CTools</para> <para>	    Dim intToolOffsetNo As Int32 </para> <para>	    Dim dblValue As Double </para> <para>	    objTools.AddToolLengthWearOffset(intToolOffsetNo, dblValue) </para> </example>
      <param name="intToolOffsetNo">Offset no.</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolLengthOffset(System.Int32,System.Double)">
      <summary> Determines the tool length geometry offset value based on the calculation made for the input data. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the CalToolLengthOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	    objTools.CalToolLengthOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdToolLengthOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no. </param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - GEOMETRY -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthWearOffset(System.Int32)">
      <overloads>This function has multiple overload methods to get tool length wear offset value.</overloads>
      <summary> Gets the tool length wear offset data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLengthWearOffset method. <para>Me.tulToolLengthWearOffset.Text = objTools.GetToolLengthWearOffset(toolNum) </para> </example>
      <param name="intToolOffsetNo">Tool length wear offset index.  The 1-based index at which the tool length wear offset information is obtained</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLengthWearOffset(System.Int32,System.Int32)">
      <summary> Get the tool length wear offset at the specified offset indexes. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLengthWearOffset method. <para>Dim dblResults As Double() </para> <para>Dim dr As Double </para> <para>Try </para> <para>	    Me.tulResults.Text = "" </para> <para>	    dblResults = objTools.GetToolLengthWearOffset(CInt(Me.tulFrom.Text), CInt(Me.tulTo.Text)) </para> <para>	    For Each dr In dblResults </para> <para>	        Me.tulResults.Text += dr &amp; vbCrLf </para> <para>	    Next </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	   doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the tool length wear offset information is obtained</param>
      <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the tool length wear offset information is obtained</param>
      <returns>An array of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLengthWearOffset(System.Int32,System.Double)">
      <summary> Sets the tool length wear offset value at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetToolLengthWearOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	      objTools.SetToolLengthWearOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdToolLengthWearOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	      doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	      doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no. </param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddToolLengthWearOffset(System.Int32,System.Double)">
      <summary> Sets the tool length wear offset value by adding the input value to the existing data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the AddToolLengthWearOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	     objTools.AddToolLengthWearOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdToolLengthWearOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	     doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no.</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Wear Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.CalToolLengthWearOffset(System.Int32,System.Double)">
      <summary> Determines the tool length wear offset value based on the calculation made for the input data. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the CalToolLengthWearOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	     objTools.CalToolLengthWearOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdToolLengthWearOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	     doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no. </param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - TOOL LENGTH OFFSET (H--) - WEAR -  Table of Tool Length Wear Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompOffset(System.Int32)">
      <overloads>This function has multiple overload methods to get cutter radius compensation offset value.</overloads>
      <summary> Gets the Cutter Radius Compensation offset data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset method. <para>		Dim objTools As new CTools </para> <para>		Dim toolNum As Int16 </para> <para>		toolNum = CInt(Me.tulToolNumber.Text) </para> <para>		Me.tulCutterRCompOffset.Text = objTools.GetCutterRCompOffset(toolNum) </para> <para>		Exit Sub </para> <para>sd: </para> <para>		doError("CTool", Err.Description) </para> <para>		Resume Next </para> </example>
      <param name="intToolOffsetNo">Cutter Radius Compensation offset index.  The 1-based index at which the Cutter Radius Compensation offset information is obtained</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY -  Table of Cutter Radius Compensation Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompOffset(System.Int32,System.Int32)">
      <summary> Get Cutter Radius Compensation offset at the specified offset indexes. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset method. <para>Dim dblResults As Double() </para> <para>Dim dr As Double </para> <para>Try </para> <para>	    Me.tulResults.Text = "" </para> <para>	    dblResults = objTools.GetCutterRCompOffset(CInt(Me.tulFrom.Text), CInt(Me.tulTo.Text)) </para> <para>	    For Each dr In dblResults </para> <para>	        Me.tulResults.Text += dr &amp; vbCrLf </para> <para>	    Next </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	   doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the Cutter Radius Compensation offset information is obtained</param>
      <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the Cutter Radius Compensation offset information is obtained</param>
      <returns>An array of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY -  Table of Cutter Radius Compensation Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterRCompOffset(System.Int32,System.Double)">
      <summary> Sets the Cutter Radius Compensation geometry offset value at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetCutterRCompOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	     objTools.SetCutterRCompOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdCutterRCompOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	     doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no.</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY -  Table of Cutter Radius Compensation Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterRCompWearOffset(System.Int32,System.Double)">
      <summary> Sets the cutter radius compensation wear offset value by adding the input value to the existing data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the AddCutterRCompWearOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	     objTools.AddCutterRCompWearOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdCutterRCompWearOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	     doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no.</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR -  Table of Cutter R Compensation Wear Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompWearOffset(System.Int32)">
      <overloads>This function has multiple overload methods to get cutter radius compensation wear offset value.</overloads>
      <summary> Gets the Cutter Radius Compensation Wear offset data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetCutterRCompWearOffset method. <para>Me.tulCutterRCompWearOffset.Text = objTools.GetCutterRCompWearOffset(toolNum) </para> </example>
      <param name="intToolOffsetNo">Cutter Radius Compensation Wear offset index.  The 1-based index at which the Cutter Radius Compensation Wear offset information is obtained</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR -  Table of Cutter Radius Compensation Geometry Wear Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetCutterRCompWearOffset(System.Int32,System.Int32)">
      <summary> Get Cutter Radius Compensation Wear offset at the specified offset indexes. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetCutterRCompWearOffset method. <para>Dim dblResults As Double() </para> <para>Dim dr As Double </para> <para>Try </para> <para>	    Me.tulResults.Text = "" </para> <para>	    dblResults = objTools.GetCutterRCompWearOffset(CInt(Me.tulFrom.Text), CInt(Me.tulTo.Text)) </para> <para>	    For Each dr In dblResults </para> <para>	        Me.tulResults.Text += dr &amp; vbCrLf </para> <para>	    Next </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intFromOffsetIndex">Starting offset index.  The 1-based index at which the Cutter Radius Compensation Wear offset information is obtained</param>
      <param name="intToOffsetIndex">Ending offset index.  The 1-based index at which the Cutter Radius Compensation Wear offset information is obtained</param>
      <returns>An array of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR -  Table of Cutter Radius Compensation Geometry Wear Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetCutterRCompWearOffset(System.Int32,System.Double)">
      <summary> Sets the Cutter Radius Compensation Wear offset value at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetCutterRCompWearOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	     objTools.SetCutterRCompWearOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdCutterRCompWearOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	     doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no.</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool wear compensation specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - WEAR -  Table of Cutter Radius Compensation Geometry Wear Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.AddCutterRCompOffset(System.Int32,System.Double)">
      <summary> Sets the cutter radius compensation offset value by adding the input value to the existing data at the specified offset index. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the AddCutterRCompOffset method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	    objTools.AddCutterRCompOffset(CInt(Me.tulToolNumber.Text), CDbl(Me.tulUpdCutterRCompOffset.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolOffsetNo">Offset no.</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL OFFSET/COMPENSATION - CUTTER R COMP (D--) - GEOMETRY -  Table of Cutter Radius Geometry Offset. <para> <img src="MC.TOOLDATA.TOOLWEARCOMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetGroupNo(System.Int32)">
      <summary> Gets the group number assigned for this tool number <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetGroupNo method. <para>		Dim objTools As CTools = new CTools</para> <para>		Dim intToolNo As Int32 </para> <para>		Dim intGroupNo As Int32 </para> <para>	   intGroupNo = objTools.GetGroupNo(intToolNo) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> If no tool group has been assigned for this tool number, then it returns a zero.  A group number can be assigned to multiple tool numbers. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> <para>GRP NO. - Tool Group number. <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - G.NO <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetGroupNo(System.Int32,System.Int32)">
      <summary> Sets tool group number at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetGroupNo method. <para>		Dim objTools As CTools = new CTools</para> <para>		Dim intToolNo As Int32 </para> <para>		Dim intToolGroupNo As Int32 </para> <para>	   objTools.SetGroupNo(intToolNo, intToolGroupNo) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="intToolGroupNo">Group number to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> If no tool group has been assigned for this tool number, then it returns a zero.  A group number can be assigned to multiple tool numbers. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> <para>GRP NO. - Tool Group number. <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - G.NO <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetPotNo(System.Int32)">
      <summary> Gets the pot number assigned at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetPotNo method. <para>		Dim objTools As new CTools </para> <para>	    Dim intToolNo As Integer </para> <para>	    intValue = objTools.GetPotNo(intToolNo) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns> A System.Int32 value. <list type="table"> <listheader> <term> Case </term> <term> Int32 returned </term> </listheader> <item> <description> Tool is in a pot </description> <description> POT NO. </description> </item> <item> <description> Tool not in a pot </description> <description> 0 </description> </item> <item> <description> Tool not registered </description> <description> ApplicationException </description> </item> <item> <description> intToolNo out of range </description> <description> NotSupportedException </description> </item> </list> </returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> An NA displaying in POT NO. column (see Figure below) means tool is not registered to any pot. </remarks>
      <Figure> POT NO. - Tool Pot number. <para> <img src="MC.TLM.jpg" /> </para> </Figure>
      <Figure> For OSP-P300 controls: <para> TOOL DATA - MAGAZINE INFO. <img src="MC.P300.ToolData.ATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLife(System.Int32)">
      <summary> Gets setting of tool life for this tool number. <para>For OSP-P200: In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLife method. <para>		Dim objTools As new CTools </para> <para>		Dim intToolNo As Integer </para> <para>		intValue = objTools.GetToolLife(intToolNo) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of tool life's management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <remarks> <para> It will return 0 if it is not in managed mode. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool life controlling-function specification</term> <description>Valid</description> </item> </list> </para>  <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>Yes</description> </item> <item> <term>P200</term> <description>Yes</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> SET - Current setting of Tool's life <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - SET <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLife(System.Int32,System.Int32)">
      <summary> Sets tool life at the specified tool number. <para>For OSP-P200: In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetToolLife method. <para>		Dim objTools As new CTools </para> <para>		Dim intToolNo As Integer </para> <para>		objTools.SetToolLife(intToolNo, intValue) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="intValue">tool life to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of tool life's management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <remarks> <para> It will return 0 if it is not in managed mode. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool life controlling-function specification</term> <description>Valid</description> </item> </list> </para>  <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>Yes</description> </item> <item> <term>P200</term> <description>Yes</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> SET - Current setting of Tool's life <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - SET <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLifeRemaining(System.Int32)">
      <summary> Gets the remaining tool's life for this tool number.  The remaining tool life value is decreased as the machine is cutting part. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLifeRemaining method. <para>On Error GoTo sd </para> <para>		Dim toolNum As Int16 </para> <para>	    toolNum = CInt(Me.tulToolNumber.Text) </para> <para>	    Me.tulToolLifeRemaining.Text = objTools.GetToolLifeRemaining(toolNum) </para> <para>	    Exit Sub </para> <para>sd: </para> <para>	    doError("CTool", Err.Description) </para> <para>	    Resume Next </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <remarks> <para> It will return zero if it is not in managed mode. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool life controlling-function specification</term> <description>Valid</description> </item> </list> </para>  <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>Yes</description> </item> <item> <term>P200</term> <description>Yes</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> LEFT - The remaining tool life <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - LEFT <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolLifeRemaining(System.Int32,System.Int32)">
      <summary> Sets remaining tool life at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetToolLifeRemaining method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>		objTools.SetToolLifeRemaining(CInt(Me.tulToolNumber.Text), CInt(Me.tulUpdToolLifeRemaining.Text)) </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="intValue">Remaining tool life to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <remarks> <para> Tool must be in management mode other than NOT MODE. Otherwise, an ApplicationException will be generated. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool life controlling-function specification</term> <description>Valid</description> </item> </list> </para>  <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>Yes</description> </item> <item> <term>P200</term> <description>Yes</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> LEFT - The remaining tool life <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - LEFT <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolLifeRemainingTimeSecond(System.Int32)">
      <summary> Gets the remaining tool's life in second data area for this tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolLifeRemainingTimeSecond method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>		Me.tulToolLifeRemainSec.Text = objTools.GetToolLifeRemainingTimeSecond(toolNum) </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> The unit is always in seconds for tool life mode in Time or Time Spare. </DataUnit>
      <remarks> <para> If tool is not in Time/Time (Spare) managed mode, then it returns a zero. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Tool life controlling-function specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> LEFT - 12345:0 - In this case, the remaining tool life is 12345 minutes and 0 second. <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - LEFT : 0 <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetStatus(System.Int32)">
      <summary> Gets the tool life status at the specified tool number.  It does not rely on the current setting of tool life managent mode. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetStatus method. <para>		Dim objTools As CTool = new CTools </para> <para>		Dim intToolNo As Integer </para> <para>		Dim enToolLifeStatus As ToolLifeStatusEnum </para> <para>	    enToolLifeStatus = System.Enum.GetNames(GetType(ToolLifeStatusEnum)).GetValue(objTools.GetStatus(intToolNo)) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> OK/NG - Tool life status <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - OK/NG <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetStatus(System.Int32,System.Boolean)">
      <summary> Sets tool status at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetStatus method. <para>Dim objTools As CTools = new CTools</para> <para>Dim intToolNo As Integer</para> <para>Dim blnValue As Boolean</para> <para>objTools.SetStatus(intToolNo, blnValue) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="blnOK">Tool status to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> OK/NG - Tool status <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - OK/NG <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetMode(System.Int32)">
      <summary> Gets the current setting of tool life management mode at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetMode method. <para>Private Sub updateTools() </para> <para>On Error GoTo sd </para> <para>		Dim objTools As new CTools </para> <para>	    Dim toolNum As Int16 </para> <para>	    toolNum = CInt(Me.tulToolNumber.Text) </para> <para>	    Me.tulToolMode.Text = System.Enum.GetNames(GetType(ToolLifeModeEnum)).GetValue(objTools.GetMode(toolNum)) </para> <para>	    Exit Sub </para> <para>sd: </para> <para>    Resume Next </para> <para>End Sub </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para>  <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>Yes</description> </item> <item> <term>P200</term> <description>Yes</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> MNG.MODE - Management mode <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - MNG.MODE <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetMode(System.Int32,Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum)">
      <summary> Sets tool life management mode at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetMode method. <para>Dim objTools As new CTools </para> <para>Try </para> <para>	    objTools.SetMode(CInt(Me.tulToolNumber.Text), System.Enum.GetNames(GetType(ToolLifeModeEnum)).GetValue(Me.tulUpdToolMode.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>	    doError("CTool", ae.Message) </para> <para>Catch ex As Exception </para> <para>     doError("CTool", ex.Message) </para> <para>End Try </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="enValue">Tool Life management mode to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> MNG.MODE - Management mode <para> <img src="MC.TLM.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - TOOL LIFE - MNG.MODE <img src="MC.P300.Tooldata.ToolLife.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolGroupOrder(System.Int32)">
      <summary> <para>Gets the tool group order.</para> <para>For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</para> <para>Tool group number must not be equal 0 in order to have a tool group order.</para> <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call GetToolGroupOrder method. <para>		Dim objTools As new CTools </para> <para>		Dim enToolGroupOrder As ToolGroupOrderEnum </para> <para>		Dim intToolNo As Int32 </para> <para>		enToolGroupOrder = System.Enum.GetNames(GetType(ToolGroupOrderEnum)).GetValue(objTools.GetToolGroupOrder(intToolNo)) </para> </example>
      <param name="intToolNo">Tool number. For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</param>
      <returns>An Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification NC spec [21,0]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> <para> P200/P100II CONTROLS: ORG - The tool group order.</para> <para> <img src="MC.TLM.jpg" /> </para> <para> P300 or newer CONTROLS: ORG/SPR - The tool group order.</para> <para> <img src="MC.TLM_P300.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolGroupOrder(System.Int32,Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum)">
      <summary> <para>Sets the tool group order given tool number</para> <para>For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</para> <para>Tool group number must not be equal 0 in order to have a tool group order.</para> <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call SetToolGroupOrder method. <para>		Dim objTools As new CTools </para> <para>		Dim enToolGroupOrder As ToolGroupOrderEnum </para> <para>		Dim intToolNo As Int32 </para> <para>		objTools.SetToolGroupOrder(intToolNo, enToolGroupOrder)) </para> </example>
      <param name="intToolNo">Tool number. For P300 or newer controls, tool must be registered and attached to magazine in order to access to this data</param>
      <param name="enValue">Tool group order to be set. Values of parameter come from the Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum enumeration.  </param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Reserve tool change functional specification NC spec [21,0]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> <para> P200/P100II CONTROLS: ORG - The tool group order.</para> <para> <img src="MC.TLM.jpg" /> </para> <para> P300 or newer CONTROLS: ORG/SPR - The tool group order.</para> <para> <img src="MC.TLM_P300.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetReferenceToolOffset2(System.Int32)">
      <summary> Gets the reference tool length/cutter radius compensation offset number 2 for the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetReferenceToolOffset2 method. <para> Dim toolNum As Int16 </para> <para> toolNum = CInt(Me.tulToolNumber.Text) </para> <para> Me.tulCutterRCompOffset.Text = objTools.GetCutterRCompOffset(toolNum) </para> <para> Me.tulCutterRCompWearOffset.Text = objTools.GetCutterRCompWearOffset(toolNum) </para> <para> Me.tulPotNumber.Text = objTools.GetPotNo(toolNum) </para> <para> Me.tulReferenceToolOffset2.Text = objTools.GetReferenceToolOffset2(toolNum) </para> <para> Me.tulReferenceToolOffset3.Text = objTools.GetReferenceToolOffset3(toolNum) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If no reference offset number is assigned for this tool number, it returns a zero. </remarks>
      <Figure> COMP NO.2 - The reference offset number 2. <para> <img src="MC.TLM.COMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetReferenceToolOffset2(System.Int32,System.Int32)">
      <summary> Sets reference tool length/cutter radius compensation offset number 2 at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetReferenceToolOffset2 method. <para>Private Sub tulSetReferenceToolOffset2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tulSetReferenceToolOffset2.Click </para> <para>	   Try </para> <para>	       objTools.SetReferenceToolOffset2(CInt(Me.tulToolNumber.Text), CInt(Me.tulUpdReferenceToolOffset2.Text)) </para> <para>	       updateTools() </para> <para>	   Catch ae As ApplicationException </para> <para>	       doError("CTool", ae.Message) </para> <para>	   Catch ex As Exception </para> <para>	       doError("CTool", ex.Message) </para> <para>	   End Try </para> <para>End Sub </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="intValue">Reference tool length/cutter radius compensation offset number to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> For no reference offset, it is set to 0. </remarks>
      <Figure> COMP NO. 2 - Reference Offset number 2 <para> <img src="MC.TLM.COMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetReferenceToolOffset3(System.Int32)">
      <summary> Gets the reference tool length/cutter radius compensation offset number 3 for this tool number <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetReferenceToolOffset3 method. <para>Dim toolNum As Int16 </para> <para>toolNum = CInt(Me.tulToolNumber.Text) </para> <para>Me.tulCutterRCompOffset.Text = objTools.GetCutterRCompOffset(toolNum) </para> <para>Me.tulCutterRCompWearOffset.Text = objTools.GetCutterRCompWearOffset(toolNum) </para> <para>Me.tulPotNumber.Text = objTools.GetPotNo(toolNum) </para> <para>Me.tulReferenceToolOffset2.Text = objTools.GetReferenceToolOffset2(toolNum) </para> <para>Me.tulReferenceToolOffset3.Text = objTools.GetReferenceToolOffset3(toolNum) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If no reference tool offset is assigned for this tool number, it returns a zero. </remarks>
      <Figure> COMP NO.3 - The reference tool offset number 3. <para> <img src="MC.TLM.COMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetReferenceToolOffset3(System.Int32,System.Int32)">
      <summary> Sets reference tool length/cutter radius compensation offset number 3 at the specified tool number. <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetReferenceToolOffset3 method. <para>Private Sub tulSetReferenceToolOffset3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tulSetReferenceToolOffset3.Click </para> <para>	   Try </para> <para>	       objTools.SetReferenceToolOffset3(CInt(Me.tulToolNumber.Text), CInt(Me.tulUpdReferenceToolOffset3.Text)) </para> <para>	       updateTools() </para> <para>	   Catch ae As ApplicationException </para> <para>	       doError("CTool", ae.Message) </para> <para>	   Catch ex As Exception </para> <para>	       doError("CTool", ex.Message) </para> <para>	   End Try </para> <para>End Sub </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="intValue">Reference tool length/cutter radius compensation offset number to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> For no reference offset, it is set to 0. </remarks>
      <Figure> COMP NO. 3 - Reference Offset number 3 <para> <img src="MC.TLM.COMP.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolKind(System.Int32)">
      <summary> Gets tool kind at the specified tool number <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> <para>Note: On P300 HMI, abbreviation order is not fixed. (e.g. Large Diameter Heavy Tool could display as either 'LM' or 'ML')</para> </summary>
      <example> This sample shows how to call the GetToolKind method. <para>		Dim objTools As new CTools </para> <para>	    Dim intToolNo As Integer </para> <para>	    Dim strValue As String </para> <para>	    strValue  = objTools.GetToolKind(intToolNo) </para> </example>
      <param name="intToolNo">Tool number</param>
      <returns>A System.String value represents tool kind.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> List of available tool kind: [PAUBTGQZMSELFHRJKVWXNC] </para> <list type="table"> <listheader> <term>Tool Kind</term> <description>Description</description> </listheader> <item> <term>(Blank)</term> <description>Tool without any attribute</description> </item> <item> <term>M</term> <description>Heavy Tool</description> </item> <item> <term>P</term> <description>Planer Tool</description> </item> <item> <term>PM</term> <description>A heavy planer tool</description> </item> <item> <term>A</term> <description>Attachment Tool</description> </item> <item> <term>AM</term> <description>A heavy attachment tool</description> </item> <item> <term>U</term> <description>An axial tool</description> </item> <item> <term>UM</term> <description>A heavy axial tool</description> </item> <item> <term>N</term> <description>Manual attachement tool</description> </item> <item> <term>B</term> <description>A tool with a lid</description> </item> <item> <term>L</term> <description>Large diameter tool</description> </item> <item> <term>LM (ML on OSP-P300)</term> <description>Large diameter and heavy tool</description> </item> <item> <term>PL</term> <description>A large diameter planer tool</description> </item> <item> <term>PLM</term> <description>A heavy and large diameter planer tool</description> </item> <item> <term>AL</term> <description>A large diameter attachement tool</description> </item> <item> <term>ALM</term> <description>A heavy and large diameter attachement tool</description> </item> <item> <term>UL</term> <description>A large diameter axial tool</description> </item> <item> <term>ULM</term> <description>A heavy and large diameter axial tool</description> </item> <item> <term>NL</term> <description>Large diameter of manual attachement tool</description> </item> <item> <term>BL</term> <description>A large diameter tool with a lid</description> </item> <item> <term>D</term> <description>Dummy tool</description> </item> <item> <term>C</term> <description>Thru-Spindle Coolant Tool</description> </item> <item> <term>T</term> <description>Turning Tool</description> </item> <item> <term>S</term> <description>Light Tool</description> </item> <item> <term>E</term> <description>Long Tool</description> </item> <item> <term>F</term> <description>Super large diameter Tool</description> </item> <item> <term>H</term> <description>Small-diameter Tool</description> </item> <item> <term>R</term> <description>Standard boring Tool</description> </item> <item> <term>J</term> <description>Medium-diameter Tool</description> </item> <item> <term>K</term> <description>Medium-diameter boring Tool</description> </item> <item> <term>V</term> <description>Large-diameter single-side boring Tool</description> </item> <item> <term>W</term> <description>Large-diameter double-side boring Tool</description> </item> <item> <term>X</term> <description>Super Large-diameter single-side boring Tool</description> </item> </list> </remarks>
      <Figure> POT NO./TOOL NO. - ATC Tool Pot Table <para> <img src="atc.jpg" /> </para> <para> For OSP-P300S(MP)/M - TOOL DATA - MAGAZINE INFO. - ATT. <img src="MC.P300.Tooldata.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolName(System.Int32)">
      <summary> Gets tool name given tool number <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the GetToolName method. <para>Dim objTools As CTools = new CTools</para> <para>Dim intToolNo As Integer</para> <para>Dim strToolName As String</para> <para>strToolName = objTools.GetToolName(intToolNo) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <returns>A String value represents name of tool</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - TOOL NAME <img src="MC.ToolDataEdit.P300M.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolName(System.Int32,System.String)">
      <summary> Sets tool name given tool number <para>In case of 8 Digits Tool ID specification is effective, use Tool ID functions instead</para> </summary>
      <example> This sample shows how to call the SetToolName method. <para>Dim objTools As CTools = new CTools</para> <para>Dim intToolNo As Integer</para> <para>Dim strToolName As String</para> <para>objTools.SetToolName(intToolNo, strToolName) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="strToolName">Name of tool to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - TOOL NAME <img src="MC.ToolDataEdit.P300M.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.GetToolMaxSpeed(System.Int32)">
      <summary> Gets tool max speed given tool number </summary>
      <example> This sample shows how to call the SetToolMaxSpeed method. <para>Dim objTools As CTools = new CTools</para> <para>Dim intToolNo As Integer</para> <para>Dim intMaxSpeed As Integer</para> <para> intMaxSpeed = objTools.GetToolMaxSpeed(intToolNo) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <returns>A System.Int32 value represents tool's max speed</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - S_UPPER_LIM <img src="MC.ToolDataEdit.P300M.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools.SetToolMaxSpeed(System.Int32,System.Int32)">
      <summary> Sets tool max speed given tool number </summary>
      <example> This sample shows how to call the SetToolMaxSpeed method. <para>Dim objTools As CTools = new CTools</para> <para>Dim intToolNo As Integer</para> <para>Dim intMaxSpeed As Integer</para> <para>objTools.SetToolMaxSpeed(intToolNo, intMaxSpeed) </para> </example>
      <param name="intToolNo">Tool Number</param>
      <param name="intMaxSpeed">Tool's max speed to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> Compatible Chart of this function for different OSP controls: <list type="table"> <listheader> <term>OSP Control</term> <description>Compatible</description> </listheader> <item> <term>P100II</term> <description>No</description> </item> <item> <term>P200</term> <description>No</description> </item> <item> <term>P300M</term> <description>Yes</description> </item> <item> <term>P300S</term> <description>Yes</description> </item> </list> </para> </remarks>
      <Figure> <para> For OSP-P300S(MP)/M - TOOL DATA EDIT - S_UPPER_LIM <img src="MC.ToolDataEdit.P300M.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CTools2">
      <summary> Class provides offsets and tool life information for 8-digits Tool ID specification.. </summary>
      <remarks> <para> Except where it is noted, all indexing parameters are 1-based index. </para> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>8-Digits Tool ID specification</term> <description>Valid</description> </item> </list> </para> <para> ********************* This class cannot be supported in OSP-P100 II machines. ************************ </para> </remarks>
      <Version> Required MC.dll Version 43.1.0.0 1502N-z0041(TOOL-ID B Watch software)</Version>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
      <summary> Sets current data unit for this class instance. </summary>
      <example> This sample shows how to call the SetDataUnit method. <para>Dim objTools As CTools </para> <para>Try </para> <para>		objTools2.SetDataUnit(Me.tulDataUnitCombo.SelectedValue) </para> <para>	    updateTools() </para> <para>Catch ae As ApplicationException </para> <para>   	doError("CTool2", ae.Message) </para> <para>Catch ex As Exception </para> <para>   	doError("CTool2", ex.Message) </para> <para>End Try </para> </example>
      <param name="enDataUnit">Data Unit to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If applicable, this setting is applied to data in this class instance only, not for NC Data Unit. For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, then NC data will be converted to inch and vice versa. </remarks>
      <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. <para> <img src="MC.Parameter.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetMaxPots">
      <summary> Gets number of pots configured for this system. </summary>
      <example> This sample shows how to call the GetMaxPots method. <para>Dim intValue As Int32 </para> <para>		intValue = objTools2.GetMaxPots </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetGroupNo(System.Int32)">
      <summary> <para> Fixed Address ATC: Get group number for a given pot number. </para> <para> Memory Random ATC: Get group number for a given tool number. </para> <para>In case of dummy tool/pot, the function returns 'DUMMY'.</para> </summary>
      <example> This sample shows how to call the GetGroupNo method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_GroupNumber.Text = objTools2.GetGroupNo(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <returns>A System.String Value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - GROUP NO. <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetSerialNo(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool serial number for a given pot number. </para> <para> Memory Random ATC: Gets the tool serial number for a given tool number. </para> </summary>
      <example> This sample shows how to call the GetSerialNo method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_Serial.Text = objTools2.GetSerialNo(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <returns>A System.Int32 Value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - SER. NO. <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolName(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool name for a given pot number. </para> <para> Memory Random ATC: Gets tool name for a given tool number. </para> </summary>
      <example> This sample shows how to call the GetToolName method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_ToolName.Text = objTools2.GetToolName(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <returns>A System.String Value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - TOOL NAME. <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolKind(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool kind for a given pot number. </para> <para> Memory Random ATC: Gets tool kind for a given tool number. </para> </summary>
      <example> This sample shows how to call the GetToolKind method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_ToolKind.Text = objTools2.GetToolKind(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <returns>A System.String Value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> List of available tool kind: </para> <list type="table"> <listheader> <term>Tool Kind</term> <description>Description</description> </listheader> <item> <term>(Blank)</term> <description>Tool without any attribute</description> </item> <item> <term>M</term> <description>Heavy Tool</description> </item> <item> <term>P</term> <description>Planer Tool</description> </item> <item> <term>PM</term> <description>A heavy planer tool</description> </item> <item> <term>A</term> <description>Attachment Tool</description> </item> <item> <term>AM</term> <description>A heavy attachment tool</description> </item> <item> <term>U</term> <description>An axial tool</description> </item> <item> <term>UM</term> <description>A heavy axial tool</description> </item> <item> <term>N</term> <description>Manual attachement tool</description> </item> <item> <term>B</term> <description>A tool with a lid</description> </item> <item> <term>L</term> <description>Large diameter tool</description> </item> <item> <term>LM</term> <description>Large diameter and heavy tool</description> </item> <item> <term>PL</term> <description>A large diameter planer tool</description> </item> <item> <term>PLM</term> <description>A heavy and large diameter planer tool</description> </item> <item> <term>AL</term> <description>A large diameter attachement tool</description> </item> <item> <term>ALM</term> <description>A heavy and large diameter attachement tool</description> </item> <item> <term>UL</term> <description>A large diameter axial tool</description> </item> <item> <term>ULM</term> <description>A heavy and large diameter axial tool</description> </item> <item> <term>NL</term> <description>Large diameter of manual attachement tool</description> </item> <item> <term>BL</term> <description>A large diameter tool with a lid</description> </item> <item> <term>D</term> <description>Dummy tool</description> </item> </list> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL POT TABLE - POT - TOOL KIND <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsToolInUse(System.Int32)">
      <summary> <para> Fixed Address ATC: Determine if a registered tool is in USE state at the specified pot index. </para> <para> Memory Random ATC: Determine if a registered tool is in USE state at the specified tool index. </para> </summary>
      <example> This sample shows how to call the IsToolInUse method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_PotInUse.Text = objTools2.IsToolInUse(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number</param>
      <returns>A System.Boolean Value.  True if it is in use, otherwise false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - USE <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolInUse(System.Int32,System.Boolean)">
      <summary> <para> Fixed Address ATC: Set a registered tool to be a selected tool (USE state) for a given pot number. </para> <para> Memory Random ATC: Set a pot number to be a selected Pot (USE state) for a given tool number. </para> </summary>
      <example> This sample shows how to call the SetToolInUse method. <para>Dim intPotToolNo As Int32 </para> <para>Dim blnValue As Boolean </para> <para>objTools2.SetToolInUse(intToolPotNo, blnValue) </para> </example>
      <param name="intToolPotNo">Pot/Tool Number.</param>
      <param name="blnValue"> True if it is a selected Pot/Tool, otherwise false.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <remarks> <para>Fixed Address ATC: Only one registered tool in the same tool group number can be set to USE state at at time. </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - USE <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsStandardTool(System.Int32)">
      <summary> <para> Fixed Address ATC: Determine if a tool is standard tool for a given pot number. </para> <para> Memory Random ATC: Determine if a tool is standard tool for a given tool number. </para> </summary>
      <example> This sample shows how to call the IsStandardTool method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_StandardTool.Text = objTools2.IsStandardTool(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <returns>A System.Boolean Value.  True if tool is a standard tool, otherwise false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - STD TOOL <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetStandardTool(System.Int32,System.Boolean)">
      <summary> <para> Fixed Address ATC: Set a registered tool as standard tool for a given pot number. </para> <para> Memory Random ATC: Set a registered tool as standard tool for a given tool number. </para> </summary>
      <example> This sample shows how to call the SetStandardTool method. <para>Dim intToolPotNo As Int32 </para> <para>Dim blnValue As Boolean </para> <para>objTools2.SetStandardTool(intToolPotNo, blnValue) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <param name="blnValue"> True if it is a standard tool, otherwise false.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - STD TOOL <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.IsAdjustmentTool(System.Int32)">
      <summary> <para> Fixed Address ATC: Determine if a tool is adjustment tool for a given pot number. </para> <para> Memory Random ATC: Determine if a tool is adjustment tool for a given tool number. </para> </summary>
      <example> This sample shows how to call the IsAdjustmentTool method. <para>Dim intToolPotNo As Int32 </para> <para>txtToolID_AdjustmentTool.Text = objTools2.IsAdjustmentTool(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Boolean Value.  True if it is an adjustment tool, otherwise false</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - POT - ADJ TOOL <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetAdjustmentTool(System.Int32,System.Boolean)">
      <summary> <para> Fixed Address ATC: Set a registered tool as adjustment tool for a given pot number. </para> <para> Memory Random ATC: Set a registered tool as adjustment tool for a given tool number. </para> </summary>
      <example> This sample shows how to call the SetAdjustmentTool method. <para>Dim intToolPotNo As Int32 </para> <para>Dim blnValue As Boolean </para> <para>objTools2.SetAdjustmentTool(intToolPotNo, blnValue) </para> </example>
      <param name="intToolPotNo">Tool/Pot Number.</param>
      <param name="blnValue"> True if it is a adjustment tool, otherwise false.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system or it fails to write data to system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - ADJ TOOL <para> Fixed ATC <img src="MC.TOOLID.PotToolTable.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.PotToolTable.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCarrierStatus(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool data carrrier status for the specified pot number. </para> <para> Memory Random ATC: Gets tool data carrrier status for the specified tool number. </para> </summary>
      <example> This sample shows how to call the GetCarrierStatus method. <para>Dim enValue As CarrierStatusEnum </para> <para>		enValue = objTools2.GetCarrierStatus(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.CarrierStatusEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetMaxTools">
      <summary> <para> Memory Random ATC: Gets number of tool groups </para> </summary>
      <example> This sample shows how to call the GetMaxTools method. <para>Dim intValue As Int32 </para> <para>		intValue = objTools2.GetMaxTools </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetPotNo(System.Int32)">
      <summary> <para> Memory Random ATC: Gets pot number at the specified tool number registered in Tool-Pot table. Tool registered (Actual Tool number) in Pot 0 is not valid for this function. </para> </summary>
      <example> This sample shows how to call the GetPotNo method. <para>Dim intValue As Int32 </para> <para>		intValue = objTools2.GetPotNo(intToolNo) </para> </example>
      <returns>A System.Int32 value</returns>
      <param name="intToolNo">Tool number</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Random ATC specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> <para> TOOL DATA - TOOL ID INFORMATION - POT-TOOL TABLE - POT NO. <img src="MC.ToolID.PotToolTable.RandomATC.jpg" /> </para> <para> TOOL DATA - TOOL ID INFORMATION - TOOL-POT TABLE - POT NO. <img src="MC.ToolID.ToolPot.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolNo(System.Int32)">
      <summary> <para> Memory Random ATC: Gets tool number at the specified pot number. Pot 0 is not valid for this function. </para> </summary>
      <example> This sample shows how to call the GetToolNo method. <para>Dim intValue As Int32 </para> <para>		intValue = objTools2.GetToolNo(intPotNo) </para> </example>
      <returns>A System.Int32 value</returns>
      <param name="intPotNo">Pot number.  Pot number is ranging from 1 to max. pot number.</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Random ATC specification</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> <para> TOOL DATA - TOOL ID INFORMATION - POT-TOOL TABLE - POT NO. <img src="MC.ToolID.PotToolTable.RandomATC.jpg" /> </para> <para> TOOL DATA - TOOL ID INFORMATION - TOOL-POT TABLE - POT NO. <img src="MC.ToolID.ToolPot.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetMode(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool life management mode at the specified pot number. </para> <para> Memory Random ATC: Gets tool life management mode at the specified tool number. </para> </summary>
      <example> This sample shows how to call the GetMode method. <para>	    Dim intToolPotNo As Int32 </para> <para>	    Me.ToolID.ToolLifeMode.Text = System.Enum.GetNames(GetType(ToolLifeModeEnum)).GetValue(objTools2.GetMode(intToolPotNo)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - MANAGE MODE <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetMode(System.Int32,Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum)">
      <summary> <para> Fixed Address ATC: Sets tool life management mode at the specified pot number. </para> <para> Memory Random ATC: Sets tool life management mode at the specified tool number. </para> </summary>
      <example> This sample shows how to call the SetMode method. <para>	    objTools2.SetMode(CInt(Me.ToolID.PotNo.Text), System.Enum.GetNames(GetType(ToolLifeModeEnum)).GetValue(Me.ToolID.ModeValue.SelectedValue)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="enValue">Tool Life management mode to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - MANAGE MODE <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetStatus(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool life status at the specified pot number.  It does not rely on the current setting of tool life managent mode. </para> <para> Memory Random ATC: Gets the tool life status at the specified tool number.  It does not rely on the current setting of tool life managent mode. </para> </summary>
      <example> This sample shows how to call the GetStatus method. <para>Dim intToolPotNo as Int32</para> <para>txtToolID_LifeStatus.Text = System.Enum.GetNames(GetType(ToolLifeStatusEnum)).GetValue(objTools2.GetStatus(intToolPotNo)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - STATUS <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLife(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool life at the specified pot number. </para> <para> Memory Random ATC: Gets tool life at the specified tool number. </para> </summary>
      <example> This sample shows how to call the GetToolLife method. <para>		Dim intToolPotNo as Int32 </para> <para>		Me.txtToolID_ToolLife.Text = objTools2.GetToolLife(intToolPotNo) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of tool life's management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <remarks> It will return 0 if it is not in managed mode. </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - SET TIME <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLife(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Sets tool life at the specified pot number. </para> <para> Memory Random ATC: Sets tool life at the specified tool number. </para> </summary>
      <example> This sample shows how to call the SetToolLife method. <para>objTools2.SetToolLife(CInt(Me.txtToolID_PotNo.Text), CInt(Me.txtToolID_ToolLifeValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="intValue">tool life to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of tool life's management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - SET TIME <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para> </Figure>
      <remarks> Tool must be in management mode other than NOT MODE. Otherwise, an ApplicationException will be generated.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLifeRemaining(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the remaining tool's life for this pot number.  The remaining tool life value is decreased as the machine is cutting part. </para> <para> Memory Random ATC: Gets the remaining tool's life for this tool number.  The remaining tool life value is decreased as the machine is cutting part. </para> </summary>
      <example> This sample shows how to call the GetToolLifeRemaining method. <para>	    Me.txtToolID_ToolLifeLeft.Text = objTools2.GetToolLifeRemaining(CInt(txtToolID_Pot.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <remarks> It will return zero if it is not in managed mode. </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - LEFT TIME <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLifeRemaining(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Sets remaining tool life at the specified pot number. </para> <para> Memory Random ATC: Sets remaining tool life at the specified tool number. </para> </summary>
      <example> This sample shows how to call the SetToolLifeRemaining method. <para>		objTools2.SetToolLifeRemaining(CInt(Me.txtToolID_PotNo.Text), CInt(Me.txtToolID_ToolLifeLeftValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="intValue">Remaining tool life to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> <para> The data unit depends on the current setting of management mode: </para> <list type="table"> <listheader> <term>Management Mode</term> <description>Unit</description> </listheader> <item> <term>Not Mode</term> <description>Not applicable</description> </item> <item> <term>Time (Spare)</term> <description>Minutes</description> </item> <item> <term>Time</term> <description>Minutes</description> </item> <item> <term>Count (Spare)</term> <description>Pieces</description> </item> <item> <term>Count</term> <description>Pieces</description> </item> </list> </DataUnit>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - LEFT TIME <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para> </Figure>
      <remarks> Tool must be in management mode other than NOT MODE. Otherwise, an ApplicationException will be generated.  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLifeRemainingTimeSecond(System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the remaining tool's life for this pot number.  The remaining tool life value is decreased as the machine is cutting part. </para> <para> Memory Random ATC: Gets the remaining tool's life for this tool number.  The remaining tool life value is decreased as the machine is cutting part. </para> </summary>
      <example> This sample shows how to call the GetToolLifeRemainingTimeSecond method. <para>	    Me.txtToolID_ToolLifeLeftSecond.Text = objTools2.GetToolLifeRemainingTimeSecond(CInt(txtToolID_Pot.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Int32 value.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> The unit is always in seconds for tool life mode in Time or Time Spare. </DataUnit>
      <remarks> If tool is not in Time/Time (Spare) managed mode, then it returns a zero. </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL LIFE MANAGEMENT - LIFE - LEFT TIME <para> Fixed ATC <img src="MC.TOOLID.Life.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.Life.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset1(System.Int32)">
      <overloads>This function has multiple overload methods to get tool length geometry offset 1 value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool length geometry offset 1 data at the specified pot index </para> <para> Memory Random ATC: Gets the tool length geometry offset 1 data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset1 method. <para>	    Me.txtToolID_ToolOffset1.Text = objTools2.GetToolLengthOffset1(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset1(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool length geometry offset 1 data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool length geometry offset 1 data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset1 method. <para>Dim dblResults As Double() </para> <para>	    dblResults = objTools.GetToolLengthOffset1(CInt(Me.ToolID.FromPotNo.Text), CInt(Me.ToolID.ToPotNo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Statring tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthOffset1(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length offset 1 value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length offset 1 value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolLengthOffset1 method. <para>objTools2.SetToolLengthOffset1(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset1Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthOffset1(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length geometry offset 1 value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length geometry offset 1 value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddToolLengthOffset1 method. <para>objTools2.AddToolLengthOffset1(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset1Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.CalToolLengthOffset1(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Determines the tool length geometry offset 1 value at the specified pot number based on the calculation made for the input data. </para> <para> Memory Random ATC: Determines the tool length geometry offset 1 value at the specified tool number based on the calculation made for the input data. </para> </summary>
      <example> This sample shows how to call the CalToolLengthOffset1 method. <para>objTools2.CalToolLengthOffset1(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset1Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH OFFSET 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset2(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool length geometry offset 2 data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool length geometry offset 2 data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset2 method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetToolLengthOffset2(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Statring tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset2(System.Int32)">
      <overloads>This function has multiple overload methods to get tool length geometry offset 2 value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool length geometry offset 2 data at the specified pot index </para> <para> Memory Random ATC: Gets the tool length geometry offset 2 data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset2 method. <para>	    Me.txtToolID_ToolOffset2.Text = objTools2.GetToolLengthOffset2(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthOffset2(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length offset 2 value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length offset 2 value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolLengthOffset2 method. <para>objTools2.SetToolLengthOffset2(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset2Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthOffset2(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length geometry offset 2 value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length geometry offset 2 value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddToolLengthOffset2 method. <para>objTools2.AddToolLengthOffset2(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset2Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.CalToolLengthOffset2(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Determines the tool length geometry offset 2 value at the specified pot number based on the calculation made for the input data. </para> <para> Memory Random ATC: Determines the tool length geometry offset 2 value at the specified tool number based on the calculation made for the input data. </para> </summary>
      <example> This sample shows how to call the CalToolLengthOffset2 method. <para>objTools2.CalToolLengthOffset2(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset2Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset3(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool length geometry offset 3 data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool length geometry offset 3 data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset3 method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetToolLengthOffset3(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Statring tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthOffset3(System.Int32)">
      <overloads>This function has multiple overload methods to get tool length geometry offset 3 value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool length geometry offset 3 data at the specified pot index </para> <para> Memory Random ATC: Gets the tool length geometry offset 3 data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolLengthOffset3 method. <para>	    Me.txtToolID_ToolOffset3.Text = objTools2.GetToolLengthOffset3(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthOffset3(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length offset 3 value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length offset 3 value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolLengthOffset3 method. <para>objTools2.SetToolLengthOffset3(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset3Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthOffset3(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length geometry offset 3 value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length geometry offset 3 value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddToolLengthOffset3 method. <para>objTools2.AddToolLengthOffset3(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset3Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.CalToolLengthOffset3(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Determines the tool length geometry offset 3 value at the specified pot number based on the calculation made for the input data. </para> <para> Memory Random ATC: Determines the tool length geometry offset 3 value at the specified tool number based on the calculation made for the input data. </para> </summary>
      <example> This sample shows how to call the CalToolLengthOffset3 method. <para>objTools2.CalToolLengthOffset3(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolOffset3Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Input data. Actual position value to be calculated from</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - LENGTH OFFSET 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset1(System.Int32)">
      <overloads>This function has multiple overload methods to get tool cutter radius compensation 1 value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation 1 data at the specified pot index </para> <para> Memory Random ATC: Gets the tool cutter radius compensation 1 data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset1 method. <para>	    Me.txtToolID_ToolCutterRComp1.Text = objTools2.GetCutterRCompOffset1(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompOffset1(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation 1 value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation 1 value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetCutterRCompOffset1 method. <para>objTools2.SetCutterRCompOffset1(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRComp1Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompOffset1(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation 1 value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation 1 value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddCutterRCompOffset1 method. <para>objTools2.AddCutterRCompOffset1(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRComp1Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset1(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation 1 data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool cutter radius compensation 1 data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset1 method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetCutterRCompOffset1(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R COMP 1 <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset2(System.Int32)">
      <overloads>This function has multiple overload methods to get tool cutter radius compensation 2 value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation 2 data at the specified pot index </para> <para> Memory Random ATC: Gets the tool cutter radius compensation 2 data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset2 method. <para>Me.txtToolID_ToolCutterRComp2.Text = objTools2.GetCutterRCompOffset2(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompOffset2(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation 2 value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation 2 value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetCutterRCompOffset2 method. <para>objTools2.SetCutterRCompOffset2(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRComp2Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompOffset2(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation 2 value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation 2 value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddCutterRCompOffset2 method. <para>objTools2.AddCutterRCompOffset2(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRComp2Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset2(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation 2 data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool cutter radius compensation 2 data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset2 method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetCutterRCompOffset2(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 2 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset3(System.Int32)">
      <overloads>This function has multiple overload methods to get tool cutter radius compensation 3 value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation 3 data at the specified pot index </para> <para> Memory Random ATC: Gets the tool cutter radius compensation 3 data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset3 method. <para>Me.txtToolID_ToolCutterRComp3.Text = objTools2.GetCutterRCompOffset3(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompOffset3(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation 3 value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation 3 value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetCutterRCompOffset3 method. <para>objTools2.SetCutterRCompOffset3(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRComp3Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompOffset3(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation 3 value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation 3 value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddCutterRCompOffset3 method. <para>objTools2.AddCutterRCompOffset3(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRComp3Value.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompOffset3(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation 3 data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool cutter radius compensation 3 data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetCutterRCompOffset3 method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetCutterRCompOffset3(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 2,3 - OSF2,3 - CUT-R COMP 3 <para> Fixed ATC <img src="MC.TOOLID.OFFSET23.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET23.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthWearOffset(System.Int32)">
      <overloads>This function has multiple overload methods to get tool length geometry wear offset value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool length geometry wear offset data at the specified pot index </para> <para> Memory Random ATC: Gets the tool length geometry wear offset data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolLengthWearOffset method. <para>	    Me.txtToolID_ToolWearOffset.Text = objTools2.GetToolLengthWearOffset(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolLengthWearOffset(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length wear offset value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length wear offset value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolLengthWearOffset method. <para>objTools2.SetToolLengthWearOffset(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolWearOffsetValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolLengthWearOffset(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool length geometry wear offset value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool length geometry wear offset value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddToolLengthWearOffset method. <para>objTools2.AddToolLengthWearOffset(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolWearOffsetValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolLengthWearOffset(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets the tool length geometry wear offset data at the specified pot indexes </para> <para> Memory Random ATC: Gets the tool length geometry wear offset data at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolLengthWearOffset method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetToolLengthWearOffset(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - LENGTH WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompWearOffset(System.Int32)">
      <overloads>This function has multiple overload methods to get tool cutter radius compensation wear offset value.</overloads>
      <summary> <para> Fixed Address ATC: Gets the tool cutter radius compensation wear offset data at the specified pot index </para> <para> Memory Random ATC: Gets the tool cutter radius compensation wear offset data at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetCutterRCompWearOffset method. <para>	    Me.txtToolID_ToolCutterRCompOffset.Text = objTools2.GetCutterRCompWearOffset(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetCutterRCompWearOffset(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation wear offset value at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation wear offset value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetCutterRCompWearOffset method. <para>objTools2.SetCutterRCompWearOffset(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRCompWearValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddCutterRCompWearOffset(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets the tool cutter radius compensation wear offset value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets the tool cutter radius compensation wear offset value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddCutterRCompWearOffset method. <para>objTools2.AddCutterRCompWearOffset(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolCutterRCompWearValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">offset value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetCutterRCompWearOffset(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC:  Get the tool cutter radius compensation wear offset at the specified pot indexes. </para> <para> Memory Random ATC:  Get the tool cutter radius compensation wear offset at the specified tool indexes. </para> </summary>
      <example> This sample shows how to call the GetCutterRCompWearOffset method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetCutterRCompWearOffset(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL OFFSET 1 - OSF1 - CUT-R WEAR <para> Fixed ATC <img src="MC.TOOLID.OFFSET1.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.OFFSET1.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolType(System.Int32)">
      <overloads>This function has multiple overload methods to get tool type.</overloads>
      <summary> <para> Fixed Address ATC: Gets tool type for the specified pot index </para> <para> Memory Random ATC: Gets tool type for the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolType method. <para>	    Me.txtToolID_ToolType.Text = objTools2.GetToolType(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>An Okuma.CMDATAPI.Enumerations.ToolTypeEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - SHAPE <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolType(System.Int32,Okuma.CMDATAPI.Enumerations.ToolTypeEnum)">
      <summary> <para> Fixed Address ATC: Sets the tool type at the specified pot index. </para> <para> Memory Random ATC: Sets the tool type at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolType method. <para>objTools2.SetToolType(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolTypeValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="enValue">Tool type value to be set. Values of parameter come from the Okuma.CMDATAPI.Enumerations.ToolTypeEnum enumeration.  </param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - SHAPE <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolType(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool type for the specified pot indexes </para> <para> Memory Random ATC: Gets tool type for the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolType method <para> Dim arValues as ToolTypeEnum ()</para> <para>arValues = objTools2.GetToolType(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of Okuma.CMDATAPI.Enumerations.ToolTypeEnum enumeration.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - SHAPE <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolAngle(System.Int32)">
      <overloads>This function has multiple overload methods to get tool nose angle value.</overloads>
      <summary> <para> Fixed Address ATC: Gets tool nose angle at the specified pot index </para> <para> Memory Random ATC: Gets tool nose angle at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolAngle method. <para>	    Me.txtToolID_ToolNoseAngle.Text = objTools2.GetToolAngle(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Degree </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter. </para> <para> Table of tool types having angle data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>Yes</description> </item> <item> <term>Drill</term> <description>Yes</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolAngle(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets tool nose angle value at the specified pot index. </para> <para> Memory Random ATC: Sets tool nose angle value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolAngle method. <para>objTools2.SetToolAngle(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolNoseAngle.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Tool nose angle value to be set</param>
      <DataUnit> Degree </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter. </para> <para> Table of tool types having angle data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>Yes</description> </item> <item> <term>Drill</term> <description>Yes</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolAngle(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets tool nose angle value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets tool nose angle value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolAngle method. <para>objTools2.AddToolAngle(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolNoseAngleValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Tool nose angle value to be added</param>
      <DataUnit> Degree </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter. </para> <para> Table of tool types having angle data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>Yes</description> </item> <item> <term>Drill</term> <description>Yes</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolAngle(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool nose angle at the specified pot indexes </para> <para> Memory Random ATC: Gets tool nose angle at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolAngle method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetToolAngle(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Degree </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an angle parameter. </para> <para> Table of tool types having angle data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>Yes</description> </item> <item> <term>Drill</term> <description>Yes</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - ANGLE A <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolDiameter(System.Int32)">
      <overloads>This function has multiple overload methods to get tool diameter value.</overloads>
      <summary> <para> Fixed Address ATC: Gets tool diameter at the specified pot index </para> <para> Memory Random ATC: Gets tool diameter at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolDiameter method. <para>	    Me.txtToolID_ToolDiameter.Text = objTools2.GetToolDiameter(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolDiameter(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets tool diameter value at the specified pot index. </para> <para> Memory Random ATC: Sets tool diameter value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolDiameter method. <para>objTools2.SetToolDiameter(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolDiameterValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Tool diameter  value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolDiameter(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets tool diameter value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets tool diameter value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddToolDiameter method. <para>objTools2.AddToolDiameter(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolDiameterValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Tool diameter value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolDiameter(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool diameter at the specified pot indexes </para> <para> Memory Random ATC: Gets tool diameter at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolDiameter method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetToolDiameter(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter. </para> <para> Table of tool types having nose diameter data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>No</description> </item> <item> <term>Drill</term> <description>No</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - DIAMETER D <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolNoseDiameter(System.Int32)">
      <overloads>This function has multiple overload methods to get tool nose diameter value.</overloads>
      <summary> <para> Fixed Address ATC: Gets tool nose diameter at the specified pot index </para> <para> Memory Random ATC: Gets tool nose diameter at the specified tool index </para> </summary>
      <example> This sample shows how to call the GetToolNoseDiameter method. <para>	    Me.txtToolID_ToolNoseDiameter.Text = objTools2.GetToolNoseDiameter(txtToolID_PotNo.Text) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <returns>A System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter. </para> <para> Table of tool types having nose diameter data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>No</description> </item> <item> <term>Drill</term> <description>No</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE ND <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.SetToolNoseDiameter(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets tool nose diameter value at the specified pot index. </para> <para> Memory Random ATC: Sets tool nose diameter value at the specified tool index. </para> </summary>
      <example> This sample shows how to call the SetToolNoseDiameter method. <para>objTools2.SetToolNoseDiameter(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolNoseDiameterValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Tool nose diameter  value to be set</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter. </para> <para> Table of tool types having nose diameter data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>No</description> </item> <item> <term>Drill</term> <description>No</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE  ND <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.AddToolNoseDiameter(System.Int32,System.Double)">
      <summary> <para> Fixed Address ATC: Sets tool nose diameter value by adding the input value to the existing data at the specified pot index. </para> <para> Memory Random ATC: Sets tool nose diameter value by adding the input value to the existing data at the specified tool index. </para> </summary>
      <example> This sample shows how to call the AddToolNoseDiameter method. <para>objTools2.AddToolNoseDiameter(CInt(Me.txtToolID_PotNo.Text), CDbl(Me.txtToolID_ToolNoseDiameterValue.Text)) </para> </example>
      <param name="intToolPotNo">Tool/Pot number</param>
      <param name="dblValue">Tool nose diameter value to be added</param>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> A NotSupportException will be generated if tool type is not specified for a registered tool in a pot or a tool type does not have an nose diameter parameter. </para> <para> Table of tool types having nose diameter data: <list type="table"> <listheader> <term>Tool Type</term> <description>Yes/No</description> </listheader> <item> <term>Center Drill</term> <description>No</description> </item> <item> <term>Drill</term> <description>No</description> </item> <item> <term>Tap</term> <description>Yes</description> </item> <item> <term>Reamer</term> <description>Yes</description> </item> <item> <term>Boring Bar</term> <description>Yes</description> </item> <item> <term>End Mill</term> <description>No</description> </item> <item> <term>Face Mill</term> <description>No</description> </item> <item> <term>Chamfering Cutter</term> <description>Yes</description> </item> <item> <term>Ball End</term> <description>No</description> </item> <item> <term>Helical Tap</term> <description>No</description> </item> </list> </para> </remarks>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE ND <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CTools2.GetToolNoseDiameter(System.Int32,System.Int32)">
      <summary> <para> Fixed Address ATC: Gets tool nose diameter at the specified pot indexes </para> <para> Memory Random ATC: Gets tool nose diameter at the specified tool indexes </para> </summary>
      <example> This sample shows how to call the GetToolNoseDiameter method. <para>Dim dblResults As Double() </para> <para>dblResults = objTools2.GetToolNoseDiameter(CInt(Me.txtToolID_PotFrom.Text), CInt(txtToolID_PotTo.Text)) </para> </example>
      <param name="intFromToolPotIndex">Starting tool/pot index.  Starting tool/pot index must be less than or equal to intToToolPotIndex parameter value</param>
      <param name="intToToolPotIndex">Ending tool/pot index.  Ending tool/pot index must be greater than or equal to intFromToolPotIndex parameter value</param>
      <returns>An array list of System.Double value</returns>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> TOOL DATA - TOOL ID INFORMATION - TOOL SHAPE DEFINITION - SHAPE - NOSE ND <para> Fixed ATC <img src="MC.TOOLID.ToolType.jpg" /> </para> <para> Random ATC <img src="MC.TOOLID.ToolType.RandomATC.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CVariables">
      <summary> Class provides Variables information.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetCommonVariableValue(System.Int32)">
      <summary> Gets the common variable value at the specified index. </summary>
      <example> This sample shows how to call the GetCommonVariableValue() method. <para>Dim objVariables As new CVariables </para> <para>Try </para> <para>      Me.varValue.Text = objVariables.GetCommonVariableValue(CInt(Me.varCommonVarNumber.Text)) </para> <para>Catch ae As ApplicationException </para> <para>      doError("CVariable", ae.Message) </para> <para>Catch ex As Exception </para> <para>      doError("CVariable", ex.Message) </para> <para>End Try </para> </example>
      <param name="intIndex">Common variable index.  The 1-based index at which the Common variable information is obtained</param>
      <returns>A System.Double value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> COMMON VARAIBLES - List of all common variables. <para> <img src="Parameters.CommonVariables.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetCommonVariableValues(System.Int32,System.Int32)">
      <summary> Gets the Common variable values at the specified indexes. </summary>
      <example> This sample shows how to call the GetCommonVariableValues() method. <para>Dim varRes As Double() </para> <para>Dim curRes As Double </para> <para>Try </para> <para>    Me.varGetAllResults.Text = "" </para> <para>    varRes = objVariables.GetCommonVariableValues(CInt(Me.varBegin.Text), CInt(Me.varEnd.Text)) </para> <para>    For Each curRes In varRes </para> <para>        Me.varGetAllResults.Text += curRes &amp; vbCrLf </para> <para>    Next </para> <para>Catch ae As ApplicationException </para> <para>    doError("CVariable", ae.Message) </para> <para>Catch ex As Exception </para> <para>    doError("CVariable", ex.Message) </para> <para>End Try </para> </example>
      <param name="intFromIndex">Starting index.  The 1-based index at which the Common variable information is obtained</param>
      <param name="intToIndex">Ending index.  The 1-based index at which the Common variable information is obtained</param>
      <returns>An array of System.Double values</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> COMMON VARAIBLES - List of all common variables. <para> <img src="Parameters.CommonVariables.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.SetCommonVariableValue(System.Int32,System.Double)">
      <summary> Sets common variable value at the specified index </summary>
      <example> This sample shows how to call the SetCommonVariableValue() method. <para>Dim objVariables As new CVariables </para> <para>Dim intIndex As Integer = 10</para> <para>Dim dblValue As Double = 1.2345</para> <para>objVariables.SetCommonVariableValue(intIndex, dblValue) </para> </example>
      <param name="intIndex">Common variable index.  The 1-based index at which the Common variable information is obtained</param>
      <param name="dblValue">Common variable Value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> COMMON VARIABLES - List of common variables <para> <img src="Parameters.CommonVariables.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.AddCommonVariableValue(System.Int32,System.Double)">
      <summary> Sets the common variable value by adding the input value to the existing data at the specified index </summary>
      <example> This sample shows how to call the AddCommonVariableValue() method. <para>Dim objVariables As new CVariables </para> <para>Try </para> <para>      objVariables.AddCommonVariableValue(CInt(Me.varCommonVarNumber.Text), CDbl(Me.varValueUpdate.Text)) </para> <para>Catch ae As ApplicationException </para> <para>      doError("CVariable", ae.Message) </para> <para>Catch ex As Exception </para> <para>      doError("CVariable", ex.Message) </para> <para>End Try </para> </example>
      <param name="intIndex">Common variable index.  The 1-based index at which the Common variable information is obtained</param>
      <param name="dblValue">Common variable Value to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> COMMON VARIABLES - List of common variables <para> <img src="Parameters.CommonVariables.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetCommonVariableCount">
      <summary> Get the common variable count configured for this system. it can be configured up to 2000 common variables if 2000 Common Variables option NC spec [3,3] is ON. </summary>
      <example> This sample shows how to call the GetCommonVariableCount() method. <para>Dim objVariables As new CVariables </para> <para>Dim intCount As Integer</para> <para>intCount = objVariables.GetCommonVariableCount </para> </example>
      <returns>A System.Int32 value represents the total number of common variables are available in the system.</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetOptionCommonVariableValue(System.Int32)">
      <summary> Gets Option common variable value at the specified index. </summary>
      <example> This sample shows how to call the GetOptionCommonVariableValue() method. <para>Dim objVariables As new CVariables </para> <para>Dim dblValue as Double</para> <para> dblValue = objVariables.GetOptionCommonVariableValue(CInt(txtOptionCommonVarNumber.Text)) </para> </example>
      <param name="intIndex">Option Common variable index.  The 1-based index at which the Common variable information is obtained</param>
      <returns>A System.Double value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables <para> <img src="MC.P300.Parameters.OptionCommonVariables.jpg" /> </para> </Figure>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetOptionCommonVariableValues(System.Int32,System.Int32)">
      <summary> Gets Option Common variable values at the specified indexes. </summary>
      <example> This sample shows how to call the GetOptionCommonVariableValues() method. <para>Dim arValues As Double() </para> <para>Dim intFromIndex As Integer = 1 </para> <para>Dim intToIndex As Integer = 10 </para> <para>    arValues = objVariables.GetOptionCommonVariableValues(intFromIndex,intToIndex) </para> </example>
      <param name="intFromIndex">Starting index.  The 1-based index at which the Option Common variable information is obtained</param>
      <param name="intToIndex">Ending index.  The 1-based index at which the Option Common variable information is obtained</param>
      <returns>An array of System.Double values</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables <para> <img src="MC.P300.Parameters.OptionCommonVariables.jpg" /> </para> </Figure>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.SetOptionCommonVariableValue(System.Int32,System.Double)">
      <summary> Sets Option common variable value at the specified index </summary>
      <example> This sample shows how to call the SetOptionCommonVariableValue() method. <para>Dim objVariables As new CVariables </para> <para>Dim intIndex as Integer </para> <para>Dim dlbValue as Double </para> <para>		objVariables.SetCommonVariableValue(intIndex, dlbValue) </para> </example>
      <param name="intIndex">Option Common variable index.  The 1-based index at which the Common variable information is obtained</param>
      <param name="dblValue">Option Common variable Value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables <para> <img src="MC.P300.Parameters.OptionCommonVariables.jpg" /> </para> </Figure>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.AddOptionCommonVariableValue(System.Int32,System.Double)">
      <summary> Sets Option common variable value by adding the input value to the existing data at the specified index </summary>
      <example> This sample shows how to call the AddOptionCommonVariableValue() method. <para>Dim objVariables As new CVariables </para> <para>Dim intIndex as Integer</para> <para>Dim dblValue as Double</para> <para>      objVariables.AddOptionCommonVariableValue(intIndex, dblValue) </para> </example>
      <param name="intIndex">Option Common variable index.  The 1-based index at which the Common variable information is obtained</param>
      <param name="dblValue">Option Common variable Value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> PARAMETER - OPTION COMMON VARIABLES - List of option common variables <para> <img src="MC.P300.Parameters.OptionCommonVariables.jpg" /> </para> </Figure>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>Option Common Variable (200 sets) NC-B-Spec[3,6]</term> <description>Valid</description> </item> </list> </para>  </remarks>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CVariables.GetOptionCommonVariableCount">
      <summary> Get the option common variable count configured for this system.  Option Common Variable (200 sets) NC-B-Spec[3,6] </summary>
      <example> This sample shows how to call the GetOptionCommonVariableCount() method. <para>Dim objVariables As new Variables </para> <para>Dim intValue As Integer</para> <para> intValue = objVariables.GetOptionCommonVariableCount </para> </example>
      <returns>A System.Int32 value represents the total number of Option common variables are available in the system.  It returns zero if system does not support Option Common Variables</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
    </member>
    <member name="T:Okuma.CMDATAPI.DataAPI.CWorkpiece">
      <summary> Class provides work piece information.  </summary>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetDataUnit(Okuma.CMDATAPI.Enumerations.DataUnitEnum)">
      <summary> Sets current data unit for this class instance. </summary>
      <example> This sample shows how to call the SetDataUnit method. <para>Dim objWorkPiece As CWorkpiece </para> <para>Try </para> <para>		objWorkPiece.SetDataUnit(Me.wkDataUnitCombo.SelectedValue) </para> <para>Catch ae As ApplicationException </para> <para>	    doError("Cworkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("Cworkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="enDataUnit">Data Unit to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> If applicable, this setting is applied to data in this class instance only, not for NC Data Unit. For linear axis position, data unit can be either mm or inch. For circular (rotary) axis position, data unit is in degree only. For example: If NC Data unit is set to mm, and the data unit for this class instance is in inch, then NC data will be converted to inch and vice versa. </remarks>
      <Figure> DATA SET UNIT - Data Unit in mm or inch.  This is for NC Data only. <para> <img src="ParametersScreen.DataUnit.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetMaxZeroOffset">
      <summary> Gets the maximum number of zero offset configured for this system. </summary>
      <example> This sample shows how to call the GetMaxZeroOffset method. <para>Try </para> <para>   MaxZeroOffset = objWorkPiece.GetMaxZeroOffset </para> <para>   CurrentZeroOffsetNumber = objWorkPiece.GetCurrentZeroOffsetNumber </para> <para>   ZeroResults = objWorkPiece.GetZeroOffsets(CInt(Me.wkZeroFrom.Text), CInt(Me.wkZeroTo.Text), CInt(wkAxisCombo.SelectedValue)) </para> <para>   For Each zr In ZeroResults </para> <para>       Me.wkZeroResults.Text += zr &amp; vbCrLf </para> <para>   Next </para> <para>Catch ae As ApplicationException </para> <para>   doError("Cworkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>   doError("Cworkpiece", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <figure>  </figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetCurrentZeroOffsetNumber">
      <summary> Gets the current zero offset number in use. </summary>
      <example> This sample shows how to call the GetCurrentZeroOffsetNumber method. <para>Try </para> <para>		MaxZeroOffset = objWorkPiece.GetMaxZeroOffset </para> <para>	    CurrentZeroOffsetNumber = objWorkPiece.GetCurrentZeroOffsetNumber </para> <para>	    ZeroResults = objWorkPiece.GetZeroOffsets(CInt(Me.wkZeroFrom.Text), CInt(Me.wkZeroTo.Text), CInt(wkAxisCombo.SelectedValue)) </para> <para>	    For Each zr In ZeroResults </para> <para>			Me.wkZeroResults.Text += zr &amp; vbCrLf </para> <para>	    Next </para> <para>Catch ae As ApplicationException </para> <para>	    doError("Cworkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>	    doError("Cworkpiece", ex.Message) </para> <para>End Try </para> </example>
      <returns>A System.Int32 value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <Figure> Co - Current zero offset number in use by the system in program coordinate. <para> <img src="MC.ZeroOffset.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets zero offset in the program coordinate at the specified axis index, and offset index. </summary>
      <example> This sample shows how to call the GetZeroOffset method. <para>Try </para> <para>		objWorkPiece.CalZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue), CDbl(Me.wkUpdateZeroOffset.Text)) </para> <para>		Me.wkZeroOffset.Text = objWorkPiece.GetZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="intWorkpieceOffsetIndex">Offset index.  The 1-based index at which the information is obtained</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>A System.Double value</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <Figure> PROGRAM ZERO - Table of zero offset in program coordinate <para> <img src="MC.ZeroOffset.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetZeroOffsets(System.Int32,System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum)">
      <summary> Gets the zero offset values at the specified axis index, and offset indexes. </summary>
      <example> This sample shows how to call the GetZeroOffsets method. <para>Try </para> <para>   MaxZeroOffset = objWorkPiece.GetMaxZeroOffset </para> <para>   CurrentZeroOffsetNumber = objWorkPiece.GetCurrentZeroOffsetNumber </para> <para>   ZeroResults = objWorkPiece.GetZeroOffsets(CInt(Me.wkZeroFrom.Text), CInt(Me.wkZeroTo.Text), CInt(wkAxisCombo.SelectedValue)) </para> <para>   For Each zr In ZeroResults </para> <para>       Me.wkZeroResults.Text += zr &amp; vbCrLf </para> <para>   Next </para> <para>Catch ae As ApplicationException </para> <para>   doError("Cworkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>   doError("Cworkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="intFromIndex">Starting offset index.  The 1-based index at which the information is obtained</param>
      <param name="intToIndex">Ending offset index.  The 1-based index at which the information is obtained</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <returns>An array of System.Double values</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <Figure> PROGRAM ZERO - Table of zero offset in program coordinate <para> <img src="MC.ZeroOffset.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Sets the zero offset data at the specified offset index, and axis index. </summary>
      <example> This sample shows how to call the SetZeroOffset method. <para>Try </para> <para>		objWorkPiece.SetZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue), CDbl(Me.wkUpdateZeroOffset.Text)) </para> <para>		Me.wkZeroOffset.Text = objWorkPiece.GetZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="intWorkpieceOffsetIndex">Zero offset index</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Zero offset value to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <Figure> PROGRAM ZERO - Table of Zero Offset in program coordinate <para> <img src="MC.ZeroOffset.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.AddZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Set the zero offset data by adding the input value to the existing data at the specified offset index, and axis index. </summary>
      <example> This sample shows how to call the AddZeroOffset method. <para>Try </para> <para>		objWorkPiece.AddZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue), CDbl(Me	.wkUpdateZeroOffset.Text)) </para> <para>		Me.wkZeroOffset.Text = objWorkPiece.GetZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="intWorkpieceOffsetIndex">Zero offset index</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Zero offset value to be added</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <Figure> PROGRAM ZERO - Table of Zero Offset in program coordinate <para> <img src="MC.ZeroOffset.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.CalZeroOffset(System.Int32,Okuma.CMDATAPI.Enumerations.AxisIndexEnum,System.Double)">
      <summary> Determined the zero offset data at the specified offset index, and axis index so that the input value is taken as the actual position data </summary>
      <example> This sample shows how to call the CalZeroOffset method. <para>Try </para> <para>		objWorkPiece.CalZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue), CDbl(Me.wkUpdateZeroOffset.Text)) </para> <para>		Me.wkZeroOffset.Text = objWorkPiece.GetZeroOffset(CInt(Me.wkOffsetNumber.Text), System.Enum.GetValues(GetType(AxisIndexEnum)).GetValue(Me.wkAxisCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="intWorkpieceOffsetIndex">Zero offset index</param>
      <param name="enAxisIndex">Axis index.  Values of parameter come from Okuma.CMDATAPI.Enumerations.AxisIndexEnum enumeration.</param>
      <param name="dblValue">Actual Position data to be calculated from</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <DataUnit> Default unit is in millimeters. Other units can be set by calling the SetDataUnit method. </DataUnit>
      <Figure> PROGRAM ZERO - Table of Zero Offset in program coordinate <para> <img src="MC.ZeroOffset.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetWorkpieceCounter(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum)">
      <summary> Gets the workpiece counter COUNT at the specified counter index. </summary>
      <example> This sample shows how to call the GetWorkpieceCounter method. <para>Dim objWorkPiece As new CWorkpiece </para> <para>Try </para> <para>		wkCounterValue.Text = objWorkPiece.GetWorkpieceCounter(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
      <returns>A System.Int32 value represents number of workpiece counter COUNT for the specified counter index</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC Work shop counter spec code [18,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (1/2) COUNT - Workpiece counter table <para> <img src="MC.Workcounter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetWorkpieceCounter(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
      <summary> Sets the workpiece counter at the specified counter index. </summary>
      <example> This sample shows how to call the SetWorkpieceCounter method. <para>Dim objWorkPiece As new CWorkpiece </para> <para>Try </para> <para>		objWorkPiece.SetWorkpieceCounter(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue), CInt(Me.wkUpdateCounter.Text)) </para> <para>		wkCounterValue.Text = objWorkPiece.GetWorkpieceCounter(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>		doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
      <param name="intValue">Number of workpiece to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC Work shop counter spec code [18,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (1/2) COUNT - Workpiece counter table <para> <img src="MC.Workcounter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.AddWorkpieceCounter(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
      <summary> Sets the workpiece counter by adding the input value to the existing data at the specified counter index. </summary>
      <example> This sample shows how to call the AddWorkpieceCounter method. <para>Dim objWorkPiece As new CWorkpiece </para> <para>Try </para> <para>		objWorkPiece.AddWorkpieceCounter(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue), CInt(Me.wkUpdateCounter.Text)) </para> <para>		wkCounterValue.Text = objWorkPiece.GetWorkpieceCounter(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue)) </para> <para>Catch ae As ApplicationException </para> <para>		doError("CWorkpiece", ae.Message) </para> <para>Catch ex As Exception </para> <para>	   doError("CWorkpiece", ex.Message) </para> <para>End Try </para> </example>
      <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
      <param name="intValue">Number of workpiece to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC Work shop counter spec code [18,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (1/2) COUNT - Workpiece counter table <para> <img src="MC.Workcounter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.GetWorkpieceCounterSet(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum)">
      <summary> Gets the workpiece counter SET at the specified counter index. </summary>
      <example> This sample shows how to call the GetWorkpieceCounterSet method. <para>Dim objWorkPiece As new CWorkpiece </para> <para>Dim intValue As Integer </para> <para>		objWorkPiece.AddWorkpieceCounterSet(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue), CInt(Me.wkUpdateCounter.Text)) </para> <para>		intValue = objWorkPiece.GetWorkpieceCounterSet(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue)) </para> </example>
      <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
      <returns>A System.Int32 value represents number of workpiece counter SET for the specified counter index</returns>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC Work shop counter spec code [18,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (1/2) SET - Workpiece counter table <para> <img src="MC.Workcounter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.SetWorkpieceCounterSet(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
      <summary> Sets the workpiece counter SET at the specified counter index. </summary>
      <example> This sample shows how to call the SetWorkpieceCounterSet method. <para>Dim objWorkPiece As new CWorkpiece </para> <para>Dim intValue As Integer </para> <para>		objWorkPiece.SetWorkpieceCounterSet(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue), CInt(Me.wkUpdateCounter.Text)) </para> <para>		intValue = objWorkPiece.GetWorkpieceCounterSet(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue)) </para> </example>
      <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
      <param name="intValue">Number of workpiece to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC Work shop counter spec code [18,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (1/2) SET - Workpiece counter table <para> <img src="MC.Workcounter.jpg" /> </para>  </Figure>
    </member>
    <member name="M:Okuma.CMDATAPI.DataAPI.CWorkpiece.AddWorkpieceCounterSet(Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum,System.Int32)">
      <summary> Sets the workpiece counter SET by adding the input value to the existing data at the specified counter index. </summary>
      <example> This sample shows how to call the AddWorkpieceCounterSet method. <para>Dim objWorkPiece As new CWorkpiece </para> <para>Dim intValue As Integer </para> <para>		objWorkPiece.AddWorkpieceCounterSet(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue), CInt(Me.wkUpdateCounter.Text)) </para> <para>		intValue = objWorkPiece.GetWorkpieceCounterSet(System.Enum.GetValues(GetType(WorkpieceCounterEnum)).GetValue(wkCounterCombo.SelectedValue)) </para> </example>
      <param name="enValue">Workpiece counter.  Values of parameter come from Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum enumeration.</param>
      <param name="intValue">Number of workpiece to be set</param>
      <exception cref="System.ApplicationException">Thrown when function fails to perform the operation at current NC condition.</exception>
      <exception cref="System.NotSupportedException">Thrown when operation/input parameters are not supported for the current system.</exception>
      <remarks> <para> The following specifications must be met in order to function: <list type="table"> <listheader> <term>Specification</term> <description>Valid/Invalid</description> </listheader> <item> <term>NC Work shop counter spec code [18,2]</term> <description>Valid</description> </item> </list> </para> </remarks>
      <Figure> NC OPR MONITOR (1/2) SET - Workpiece counter table <para> <img src="MC.Workcounter.jpg" /> </para>  </Figure>
    </member>
    <member name="T:Okuma.CMDATAPI.Structures.ToolProperty">
      <summary> Represents tool property of a tool in ATC.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Structures.ToolProperty.intToolNo">
      <summary> Tool number. <list type="table"> <listheader> <term>Tool number</term> <description>Description</description> </listheader> <item> <term>-1</term> <description>NONE - No tool assigned to this pot</description> </item> <item> <term>0</term> <description>Represent a dummy Tool.  Ususally it is displayed as 'D'</description> </item> <item> <term>1 - N</term> <description>Tool number 1 to max tool number</description> </item> </list>  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Structures.ToolProperty.strToolKind">
      <summary> An attribute of a tool <list type="table"> <listheader> <term>Attribute Name</term> <description>Description</description> </listheader> <item> <term>(Blank)</term> <description>Tool without any attribute</description> </item> <item> <term>M</term> <description>Heavy Tool</description> </item> <item> <term>P</term> <description>Planer Tool</description> </item> <item> <term>PM</term> <description>A heavy planer tool</description> </item> <item> <term>A</term> <description>Attachment Tool</description> </item> <item> <term>AM</term> <description>A heavy attachment tool</description> </item> <item> <term>U</term> <description>An axial tool</description> </item> <item> <term>UM</term> <description>A heavy axial tool</description> </item> <item> <term>N</term> <description>Manual attachement tool</description> </item> <item> <term>B</term> <description>A tool with a lid</description> </item> <item> <term>L</term> <description>Large diameter tool</description> </item> <item> <term>LM (ML on OSP-P300)</term> <description>Large diameter and heavy tool</description> </item> <item> <term>PL</term> <description>A large diameter planer tool</description> </item> <item> <term>PLM</term> <description>A heavy and large diameter planer tool</description> </item> <item> <term>AL</term> <description>A large diameter attachement tool</description> </item> <item> <term>ALM</term> <description>A heavy and large diameter attachement tool</description> </item> <item> <term>UL</term> <description>A large diameter axial tool</description> </item> <item> <term>ULM</term> <description>A heavy and large diameter axial tool</description> </item> <item> <term>NL</term> <description>Large diameter of manual attachement tool</description> </item> <item> <term>BL</term> <description>A large diameter tool with a lid</description> </item> <item> <term>D</term> <description>Dummy tool</description> </item> <item> <term>C</term> <description>Thru-Spindle Coolant Tool</description> </item> <item> <term>T</term> <description>Turning Tool</description> </item> <item> <term>S</term> <description>Light Tool</description> </item> <item> <term>E</term> <description>Long Tool</description> </item> <item> <term>F</term> <description>Super large diameter Tool</description> </item> <item> <term>H</term> <description>Small-diameter Tool</description> </item> <item> <term>R</term> <description>Standard boring Tool</description> </item> <item> <term>J</term> <description>Medium-diameter Tool</description> </item> <item> <term>K</term> <description>Medium-diameter boring Tool</description> </item> <item> <term>V</term> <description>Large-diameter single-side boring Tool</description> </item> <item> <term>W</term> <description>Large-diameter double-side boring Tool</description> </item> </list>  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Structures.MagazineProperty">
      <summary> Represents ATC magazine property.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Structures.MagazineProperty.PotPerMagazine">
      <summary> Number of pot per magazine.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Structures.MagazineProperty.StartingPotNumber">
      <summary> Represents the starting pot number of each magazine.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Structures.MagazineProperty.EndingPotNumber">
      <summary> Represent the ending pot number of each magazine.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.HourMeterEnum">
      <summary> Represents different hour meter types counter  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.ExternalInputTime">
      <summary> External Input  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.PowerOnTime">
      <summary> Power On Time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.NCRunningTime">
      <summary> NC Running Time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.CuttingTime">
      <summary> Cutting Time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.HourMeterEnum.SpindleRevolutionTime">
      <summary> Spindle Revolution Time  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolListTypeEnum">
      <summary> Represent tool list type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolListTypeEnum.AllTools">
      <summary> All tools that are registered and attached Tools  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ProgramRunningStateEnum.Executing">
      <summary> Program is in running state.  Once the program has been executed it will remain in the this state until the program is stopped or reset.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ProgramRunningStateEnum.NotRun">
      <summary> Program is not in running state.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.IOAddressSizeEnum">
      <summary> Represent IO Address size  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum">
      <summary> Represent the slope converting  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum.None">
      <summary> No slope converting  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum.Program">
      <summary> Program Slope Converting  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SlopeConvertingEnum.Manual">
      <summary> Manual Slope Converting  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum">
      <summary> Represent compensation number for tool offset and cutter radius offset  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum.HADA">
      <summary> First compensation - HA/DA  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum.HCDC">
      <summary> Third compensation - HC/DC  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolCompensationEnum.HBDB">
      <summary> Second compensation - HB/DB  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.NCStatusEnum">
      <summary> Represents status indicator lamps are displayed at the top of the screen  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.ProgramStop">
      <summary> This lamp is lit during a program stop (M00) or optional stop (M01) in the automatic or MDI mode. It blinks during dwell (G04).  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.Run">
      <summary> This RUN lamp is lit while the machine is actually operating in the automatic or MDI mode.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.STM">
      <summary> This lamp is lit while S (spindle), T (tool), or M (miscellaneous) operation is being executed.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.Limit">
      <summary> This lamp goes on when an axis reaches the variable limit position.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.SlideHold">
      <summary> This lamp goes on when the [SLIDE HOLD] button is pressed.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NCStatusEnum.Alarm">
      <summary> This lamp goes at the occurrence of an alarm. Note that it does not light when a warning message is displayed due to erroneous operation.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum">
      <summary> Represents sub program status of OSPR1 or OSPR2  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum.OSPR2">
      <summary> Probe Subprogram OSPR2 is running  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum.None">
      <summary> None  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ProbeSubProgramStatusEnum.OSPR1">
      <summary> Probe Subprogram OSPR1 is running  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum">
      <summary> Validate level enumeration. For internal data structure only </summary>
      <remarks> </remarks>
      <history> [Lhuynh] 07/02/2013	Created </history>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.Higher">
      <summary> Same or higher level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.All">
      <summary> All  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.SameOrLower">
      <summary> Same or lower level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.SameOrHigher">
      <summary> Same or higher level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.Lower">
      <summary> Same or lower level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ValidateLevelEnum.Exact">
      <summary> Exact same level  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ControlTypeEnum">
      <summary> Represents machine control type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300G">
      <summary> P300 Grinder OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300SMP">
      <summary> P300 Special Machining Center OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P200">
      <summary> P200 OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P100">
      <summary> P100 Type II OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300M">
      <summary> P300 Machining Center OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300SLP">
      <summary> P300 Special Lathe OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.P300L">
      <summary> P300 Lathe OSP-P control  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ControlTypeEnum.None">
      <summary> Un-determined control type  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum">
      <summary> Represents status of Tool ID carrier  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum.COMP_Write">
      <summary> Forcibly write data to the data carrier without verifying the tool number.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum.Yes">
      <summary> Data carrier is available  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CarrierStatusEnum.No">
      <summary> Data carrier is not available  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolTypeEnum">
      <summary> Represents different type of tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.Tap">
      <summary> Tap Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.CenterDrill">
      <summary> Centerl Drill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.None">
      <summary> None  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.ChamferingCutter">
      <summary> Chamfering Cutter Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.FaceMill">
      <summary> Face Mill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.EndMill">
      <summary> End Mill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.BoringBar">
      <summary> Boring Bar Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.Reamer">
      <summary> Reamer Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.HelicalTap">
      <summary> Helical Tap Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.DrillTool">
      <summary> Drill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolTypeEnum.BallEnd">
      <summary> Ball EndMill Tool  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum">
      <summary> Represents different alarm level of current OSP alarm  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_P">
      <summary> Alarm  P  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_D">
      <summary> Alarm  D  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_A">
      <summary> Alarm  A  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_B">
      <summary> Alarm  B  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.ALARM_C">
      <summary> Alarm  C  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OSPAlarmLevelEnum.None">
      <summary> No alarm  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.GCodeMacroTypeEnum">
      <summary> Represents type of G Code macro  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.GCodeMacroTypeEnum.MODIN">
      <summary> MODIN Macro type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.GCodeMacroTypeEnum.CALL">
      <summary> CALL Macro type  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum">
      <summary> Represents variable soft-limit settings that can be made either in reference to the program zero (P) and the machine zero (M).  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.PlusVariableLimitInProgramCoordinate">
      <summary> Plus (positive axis direction) variable soft-limit in reference to the program zero (P)  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.PlusVariableLimitInMachineCoordinate">
      <summary> Plus (positive axis direction) variable soft-limit in reference to the machine zero (M)  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.MinusVariableLimitInMachineCoordinate">
      <summary> Minus (negative axis direction) variable soft-limit in reference to the machine zero (M)  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.UserParameterVariableLimitEnum.MinusVariableLimitInProgramCoordinate">
      <summary> Minus (negative axis direction) variable soft-limit in reference to the program zero (P)  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OnOffStateEnum">
      <summary> Represents an ON/OFF state  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OnOffStateEnum.OFF">
      <summary> Off State  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OnOffStateEnum.ON">
      <summary> On State  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.IOTypeEnum">
      <summary> Represents types of I/O variables  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.IOTypeEnum.Output">
      <summary> Output I/O variable type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.IOTypeEnum.None">
      <summary> Unknown I/O variable type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.IOTypeEnum.Input">
      <summary> Input I/O variable type  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.BitsEnum">
      <summary> Represents 16 bits of a WORD.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_14">
      <summary> Bit 14  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_10">
      <summary> Bit 10  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_7">
      <summary> Bit 7  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_3">
      <summary> Bit 3  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_13">
      <summary> Bit 13  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_8">
      <summary> Bit 8  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_4">
      <summary> Bit 4  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_0">
      <summary> Bit 0  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_12">
      <summary> Bit 12  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_9">
      <summary> Bit 9  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_5">
      <summary> Bit 5  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_1">
      <summary> Bit 1  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_15">
      <summary> Bit 15  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_11">
      <summary> Bit 11  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_6">
      <summary> Bit 6  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.BitsEnum.Bit_2">
      <summary> Bit 2  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolKindEnum">
      <summary> Represents tool kind of each tool in ATC table  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.SideCutter">
      <summary> Side Cutter Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Tap">
      <summary> Tap Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.CenterDrill">
      <summary> Center Drill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.DummyTool">
      <summary> A dummy tool.  A tool that is assigned next to a large diameter tool to prevent colliding with the adjacent tools.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterAttachHeavyTool">
      <summary> A large diameter and heavy attach tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterPlanarHeavyTool">
      <summary> A large diameter and heavy planar tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterPlanarTool">
      <summary> A large diameter planer tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.AttachmentHeavyTool">
      <summary> An attachment and heavy tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.HeavyTool">
      <summary> A heavy tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.None">
      <summary> Tool without an attribute  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.BallEndMill">
      <summary> Ball End Mill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.BackBoring">
      <summary> Back Boring Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Boring">
      <summary> Boring Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Reamer">
      <summary> Reamer Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Drill">
      <summary> Center Drill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ACS_TL">
      <summary> ACS arbitrary shape tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterToolWithLid">
      <summary> A large diameter tool type that has lid  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterManualAttachTool">
      <summary> A large diameter manual attach tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterUAxisHeavyTool">
      <summary> A large diameter and heavy U axis tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterUAxisTool">
      <summary> A large diameter U axis tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterAttachTool">
      <summary> A large diameter attach tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterHeavyTool">
      <summary> A large diameter and heavy tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.Fraise">
      <summary> Fraise Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.FlatEndMill">
      <summary> Flat End Mill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.HelicalTap">
      <summary> Helical Tap Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.LargeDiameterTool">
      <summary> A large diameter tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ToolWithLid">
      <summary> A tool type that has a lid  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.UAxisHeavyTool">
      <summary> An U axis and heavy tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.UAxisTool">
      <summary> An U axis tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.EndMillR">
      <summary> End Mill Tool with R  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ChamferCutter">
      <summary> Chamfer Cutter Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.SpotDrill">
      <summary> Spot Drill Tool  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.ManualAttachTool">
      <summary> A manual attach tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.AttachmentTool">
      <summary> An attachement tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.PlanarHeavyTool">
      <summary> A planar and heavy tool type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolKindEnum.PlanarTool">
      <summary> A planar tool type  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum">
      <summary> Represents tool life status of each tool. <para> Defect level 1: The tool remains used until the opeprator takes action.</para> <para> Defect level 2: The tool will change to a spare tool when the next T command is executed. In this case, an alarm will occur and the ongoing operation will immediately stop if there is no spare tool.</para> <para> Defect level 3: An alarm will occur and the ongoing operation will immediately stop even during cutting</para>  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_USER">
      <summary> Tool life is expired. Level 3.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_TORQUE">
      <summary> Tool life is expired. Level 3.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_USER">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_USER">
      <summary> Tool life is expired. Level 1.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_TORQUE">
      <summary> Tool life is expired. Level 1.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_ELECTRICAL_OVERLOAD">
      <summary> Tool life is expired. Level 1.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_TORQUE">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_BREAKAGE">
      <summary> Tool life is expired. Level 1.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_WEAR">
      <summary> Tool life is expired. Level 3.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_WEAR">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_WEAR">
      <summary> Tool life is expired. Level 1.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.OK">
      <summary> Tool life is good.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_BREAKAGE">
      <summary> Tool life is expired. Level 3.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_ELECTRICAL_OVERLOAD">
      <summary> Tool life is expired. Level 3.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG3_LIFE">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_BREAKAGE">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_ELECTRICAL_OVERLOAD">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG2_LIFE">
      <summary> Tool life is expired. Level 2.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeStatusEnum.NG1_LIFE">
      <summary> Tool life is expired. Level 1.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum">
      <summary> Represents tool group order in tool life management table  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum.SPR">
      <summary> Spare  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum.ORG">
      <summary> Tool as commanded in the machining program  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolGroupOrderEnum.None">
      <summary> No order  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum">
      <summary> Represents settings of MOP Tool data.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.Limit">
      <summary> This is the threshold level used by the overload monitoring function for determining the overload status to give the overload alarm.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.ALV">
      <summary> This is the upper limit level used by the adaptive control function  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.UL">
      <summary> This is the upper limit level used by the adaptive control function. The setting is made in either the measure value or percentage to the reference value.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolSettingEnum.LL">
      <summary> This is the lower limit level used by the adaptive control function. The setting is made in either the measure value or percentage to the reference value.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum">
      <summary> Represents MOP Tool data input mode.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum.Absolute">
      <summary> Absolute mode.  The value should be set in measured value.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolInputModeEnum.Relative">
      <summary> Relative mode. The value should be set in percentaeg of the REFERENCE value.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum">
      <summary> Represents tool life mode of tool in tool life management table.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.TimeMode">
      <summary> Tool life is under time management mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.TimeSpareMode">
      <summary> Tool life is under time spare management mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.NoMode">
      <summary> Tool life is not under management mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.CountMode">
      <summary> Tool life is under Count management mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ToolLifeModeEnum.CountSpareMode">
      <summary> Tool life is under Count Spare management mode  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.PanelModeEnum">
      <summary> Represents machine navigation panel mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ParameterSetup">
      <summary> Parameter set up mode - In this mode the parameter data necessary for numerical control can be set, changed, an displayed.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ProgramOperation">
      <summary> Program operation mode - In this mode program and data files can be edited, input/output, displayed, and deleted  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.Auto">
      <summary> Operation mode - Auto  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.MacMan">
      <summary> MacMan Mode - Machining Maintenance screen  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ZeroSetup">
      <summary> Zero set up mode - In this mode the zero offset data and zero offset shift data which define a program coordinate system can be set, changed, or checked.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.MDI">
      <summary> Operation mode - MDI  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.Manual">
      <summary> Operation mode - Manual  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.PanelModeEnum.ToolDataSetup">
      <summary> Too Data set up mode - In this mode the tool offset data, nose radius compensation data, tool shape data, and load monitor data can be set, changed, or displayed  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OperationModeEnum">
      <summary> Represents 1 of the 3 operation modes  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperationModeEnum.MDI">
      <summary> MDI mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperationModeEnum.Manual">
      <summary> Manual mode  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperationModeEnum.Auto">
      <summary> Auto mode  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ExecutionModeEnum">
      <summary> Represents machine running mode.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ExecutionModeEnum.Running">
      <summary> Running  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ExecutionModeEnum.NotRun">
      <summary> Not run  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.SpindleStateEnum">
      <summary> Represents spindle states.  In manual operation mode, spindle state can only be in the first 4 states.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.ORIENTATION_CW_CCW">
      <summary> Spindle orientation by CW/CCW rotation  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.CCW">
      <summary> Spindel rotates in counter clockwise direction  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.ORIENTATION">
      <summary> Spindle orientation  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.Stop">
      <summary> Spindle stops.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.ORIENTATION_CW">
      <summary> Spindle orientation by CCW rotation.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.SpindleStateEnum.CW">
      <summary> Spindle rotates in clockwise direction.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum">
      <summary> Represents type of feed rate  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum.PerRevolution">
      <summary> Per revolution (Fr)  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.FeedrateTypeEnum.PerMinute">
      <summary> Per minute (Fm)  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.AxisIndexEnum">
      <summary> Represents controlled axes.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Fifth_Axis">
      <summary> 5th Axis.  It could be assigned to B/C axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Fourth_Axis">
      <summary> 4th Axis. It could be assgined to A/B/C axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Sixth_Axis">
      <summary> 6th Axis. Use CAxis.GetAxisName function to obtain axis name per machine spec.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Y_Axis">
      <summary> Y Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.Z_Axis">
      <summary> Z Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisIndexEnum.X_Axis">
      <summary> X Axis  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum">
      <summary> Represents Rotary controlled axes.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum.Sixth_Axis">
      <summary> 6th Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum.Fifth_Axis">
      <summary> 5th Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisIndexEnum.Fourth_Axis">
      <summary> 4th Axis  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum">
      <summary> Represents Linear controlled axes.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum.Y_Axis">
      <summary> Second Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum.Z_Axis">
      <summary> Third Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LinearAxisIndexEnum.X_Axis">
      <summary> First Axis  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum">
      <summary> Represents the setup position of Rotary controlled axes.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum.NoSetting">
      <summary> No setting  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum.PrincipalAxisSide">
      <summary> It is setup on principal axis side  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupPositionEnum.TableSide">
      <summary> It is setup on table side  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum">
      <summary> Represents the setup structure of Rotary controlled axes.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum.NoSetting">
      <summary> No setting  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum.SecondRotation">
      <summary> Second axis of rotation  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisSetupStructureEnum.FirstRotation">
      <summary> First axis of rotation  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum">
      <summary> Represents the rotation center side enumeration  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum.PrincipalAxisSide">
      <summary> It is setup on principal axis side  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotationCenterSideEnum.TableSide">
      <summary> It is setup on table side  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum">
      <summary> Represents the structure of Rotary controlled axes.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum.SecondAxisRotation">
      <summary> Second axis of rotation  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.RotaryAxisStructureEnum.FirstAxisRotation">
      <summary> First axis of rotation  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum">
      <summary> Represents controlled axes for MOP Tool data  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.Spindle_Axis">
      <summary> Spindle Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.Y_Axis">
      <summary> Y Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.Z_Axis">
      <summary> Z Axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolAxisEnum.X_Axis">
      <summary> X Axis  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.AxisTypeEnum">
      <summary> Represents movement type of axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisTypeEnum.Rotation">
      <summary> Rotary axis  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.AxisTypeEnum.Linear">
      <summary> Linear axis  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum">
      <summary> Represents type of ATC magazine.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum.StandardMagazine">
      <summary> ATC with standard magazine  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum.MultiMagazine">
      <summary> ATC with multi-magazines  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MagazineTypeEnum.MatrixMagazine">
      <summary> ATC with maxtrix magazine  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ATCTypeEnum">
      <summary> Represents type of ATC  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ATCTypeEnum.FixedAddress">
      <summary> Fixed address ATC type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ATCTypeEnum.RandomAddress">
      <summary> Random address ATC type  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OptionSpecEnum">
      <summary> Represent machine option specification  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.OneTenthMicron">
      <summary> 0.1 Micron option spec.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.MOPTool">
      <summary> MOP Tool option spec.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.ToolWearOffset">
      <summary> Tool wear option spec.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OptionSpecEnum.ToolID8Digits">
      <summary> 8 Digits Tool ID spec.  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm">
      <summary> Represents alarm type of MOP Tool data  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.OverrideMinimumAlarm">
      <summary> Override minimum alarm  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.ElectricalOverloadAlarm">
      <summary> Alamr due to electrical overload  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.ToolWearAlarm">
      <summary> Alarm due tool wear  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.UnsualSignalAlarm">
      <summary> Alarm due to unsual signal  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MOPToolDataAlarm.NoAlarm">
      <summary> No alarm  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum">
      <summary> Represents order of command feed rate  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.ThirdCommand">
      <summary> Third command feed rate  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.CurrentCommand">
      <summary> Current commmand feed rate  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.FourthCommand">
      <summary> Fourth command feed rate  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.CommandFeedrateOrderEnum.SecondCommand">
      <summary> Second command feed rate  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum">
      <summary> Represents workpiece counter  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterB">
      <summary> Workpiece counter B  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterA">
      <summary> Workpiece counter A  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterD">
      <summary> Workpiece counter D  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.WorkpieceCounterEnum.CounterC">
      <summary> Workpiece counter C  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum">
      <summary> Represent execute block type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum.NextExecuteBlock">
      <summary> Next execute block  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ExecuteBlockTypeEnum.CurrentExecuteBlock">
      <summary> Current execute block  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OnOffEnum">
      <summary> Represents an ON/OFF state  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OnOffEnum.OFF">
      <summary> OFF  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OnOffEnum.ON">
      <summary> ON  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OperatingStatusEnum">
      <summary> Represents machine operating status  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingStatusEnum.MachineOperating">
      <summary> Machine is operating  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingStatusEnum.NonOperating">
      <summary> Machine is not operating  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum">
      <summary> Represents different conditions when machine is not operating  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.Maintenance">
      <summary> Machine is not operating due to maintenance  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.InProcessSetup">
      <summary> Machine is not operating due to in process set-up  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.Other">
      <summary> Machine is not operating due to other condition  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.PartWaiting">
      <summary> Machine is not operating due to waiting for part  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.NonOperatingConditionEnum.NoOperator">
      <summary> Machine is not operating due to no opeartor  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.LogTypeEnum">
      <summary> Represents different logging level.  It logs current and any level below current level.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.Exception">
      <summary> Exception logging level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.Information">
      <summary> Information logging level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.WriteData">
      <summary> Write logging level  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.LogTypeEnum.ReadData">
      <summary> Read logging level  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum">
      <summary> Represents operating report data  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.OtherTime">
      <summary> Non operating time due to other condition  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.MaintenanceTime">
      <summary> Non operating time due to maintenance  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.PartWaitingTime">
      <summary> Non operating time due to part waiting  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.CuttingTime">
      <summary> Cutting Time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.ExternalInputTime">
      <summary> External input time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.NoOperatorTime">
      <summary> Non operating time due to no operator  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.InProcessSetupTime">
      <summary> Non operating time due to in process setup time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.NonOperatingTime">
      <summary> Non operating time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.AlarmOnTime">
      <summary> Alarm on time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.SpindleRunTime">
      <summary> Spindle run time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.RunningTime">
      <summary> Running Time  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.OperatingReportDataEnum.OperatingTime">
      <summary> Operating Time  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum">
      <summary> Represents report period type  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.PreviousDayReport">
      <summary> Previous day report  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.TodayReport">
      <summary> Today report  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.ReportPeriodEnum.PeriodReport">
      <summary> Period report  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.DataUnitEnum">
      <summary> Specified the data unit to be used in function for conversion, if applicable  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.DataUnitEnum.Unit_Inch">
      <summary> Inch unit  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.DataUnitEnum.Unit_mm">
      <summary> Millimeter unit  </summary>
    </member>
    <member name="T:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum">
      <summary> Represents sub system for Mac Man data area.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum.SubSystem_1">
      <summary> MacMan data for right side of machine having 2 sides  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum.CurrentSubSystem">
      <summary> Current MacMan selection.  </summary>
    </member>
    <member name="F:Okuma.CMDATAPI.Enumerations.MacManSubSystemEnum.SubSystem_2">
      <summary> MacMan data for left side of machine having 2 sides  </summary>
    </member>
  </members>
</doc>